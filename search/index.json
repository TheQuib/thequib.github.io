[{"content":"Welcome! My name is Quinn. I currently work as a Network Specialist at public school district part-time and attend Pennsylvania College of Technology as a full-time student, majoring in Network Administration and Engineering.\nOn this site, I post projects I work on both at home and at school. For the most part, I will include items from working in my home lab.\nThis site, built using the Hugo Static Site Generator, is a fun little project I also took on as a part of my homelab, hosted on GitHub.\nÂ Please feel free to check out my socials, and to share the content!\n","date":"2022-03-20T00:00:00Z","image":"https://thequib.github.io/p/welcome-to-the-site/featuredImage_hua235a1e6870bffda0047b64fe3b67992_582221_120x120_fill_box_smart1_3.png","permalink":"https://thequib.github.io/p/welcome-to-the-site/","title":"Welcome to the site"},{"content":"The scoop When I host Minecraft servers for my friends, I seriously hate having to tell them to connect to example.com:25567 or example.com:25568.\nLuckily, there is an amazing solution for this: Reverse Proxies\nÂ I tried doing this with Traefik at first (which is my preferred http reverse proxy), but I had zero luck, even after hours of scouring the internet for help.\nSo as an alternative, I found infrared, a reverse proxy for Minecraft by Hendrik Schlehlein, built with Go.\nWhat will we be doing? By the end of this, we will have a working reverse proxy running in a docker container, and two minecraft servers sitting behind mc-server1.example.com and mc-server2.example.com. Both of these will be accessed using the default minecraft port of 25565.\n Before You Start Requirements  A virtual machine with Ubuntu 22.04 or later  Or bare metal, I won\u0026rsquo;t judge   A bit of knowledge in the ways of Docker  i.e. you will need Docker installed on your server   At least 2 working Minecraft servers Ability to edit DNS records  Optional  Ability to port forward on your router (if you want to access outside of your network)   Set up Proxy Server Create Proxy Server To get it all started, we\u0026rsquo;ll need a server that will act as a proxy.\n This can be a new virtual machine, or existing. It just needs to have Docker installed Make sure you take note of its IP Address  For this example, we\u0026rsquo;ll use 192.168.1.10    Create necessary files and directories cd to a directory that you want to store your files in, your current user\u0026rsquo;s home directory is probably best\nCreate the necessary directories and files:\n1 2 3 4 5 6 7 8 9  mkdir infrared touch docker-compose.yml mkdir data cd data mkdir configs cd configs touch mc-server1.example.com.json touch mc-server2.example.com.json cd ../../   What these commands do  Create a project folder Create docker-compose file to deploy from Creates a data/configs directory to store configurations Creates two configuration files, one for each server name listed under What will we be doing?  Edit docker-compose.yml Now, you\u0026rsquo;ll want to edit the docker-compose.yml file:\n1  nano docker-compose.yml   And paste in the following text:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  version:\u0026#39;3\u0026#39;services:infrared:image:ghcr.io/haveachin/infrared:1.3.3container_name:infraredrestart:unless-stoppedstdin_open:truetty:trueports:- \u0026#34;25565:25565/tcp\u0026#34;volumes:- \u0026#34;./data/configs:/configs\u0026#34;expose:- \u0026#34;25565\u0026#34;environment:INFRARED_CONFIG_PATH:\u0026#34;/configs\u0026#34;  What this bit of Yaml does  Uses docker-compose version 3 Creates a service called infrared  With the image ghcr.io/haveachin/infrared:1.3.3 With a name of infrared Don\u0026rsquo;t restart the container unless we (the admin) stops it Open up a port Define a location for configurations    Edit configurations Now, go into the configurations directory\n1  cd /data/configs   You may want to change the names of the created files to match the FQDN\u0026rsquo;s of your actual servers.\nI will continue to use the names mc-server1.example.com and mc-server2.example.com for this tutorial, however.\nEdit each file and include the following contents:\nmc-server.example.com.json 1 2 3 4 5 6 7 8 9  { \u0026#34;domainName\u0026#34;: \u0026#34;mc-server1.example.com\u0026#34;, \u0026#34;proxyTo\u0026#34;: \u0026#34;192.168.0.11:25565\u0026#34;, \u0026#34;listenTo\u0026#34;: \u0026#34;0.0.0.0:25565\u0026#34;, \u0026#34;disconnectMessage\u0026#34;: \u0026#34;Goodbye\u0026#34;, \u0026#34;offlineStatus\u0026#34;: { \u0026#34;motd\u0026#34;: \u0026#34;Server is currently offline :(\u0026#34; } }   mc-server2.example.com.json 1 2 3 4 5 6 7 8 9  { \u0026#34;domainName\u0026#34;: \u0026#34;mc-server2.example.com\u0026#34;, \u0026#34;proxyTo\u0026#34;: \u0026#34;192.168.0.12:25565\u0026#34;, \u0026#34;listenTo\u0026#34;: \u0026#34;0.0.0.0:25565\u0026#34;, \u0026#34;disconnectMessage\u0026#34;: \u0026#34;Goodbye\u0026#34;, \u0026#34;offlineStatus\u0026#34;: { \u0026#34;motd\u0026#34;: \u0026#34;Server is currently offline :(\u0026#34; } }   Configuration note Make sure that you change domainName to your server\u0026rsquo;s FQDN and the proxyTo address and port to match your Minecraft server.\n Set up DNS Reverse Proxies rely on DNS to route the incoming connection to the intended server.\nLet\u0026rsquo;s say, for this example we are going to proxy 2 servers:\n mc-server1.example.com mc-server2.example.com  On your DNS server, create an A record for each of the servers, pointed at your proxy server. For eaxmple:\n A: mc-server1.example.com \u0026gt; 192.168.1.10 A: mc-server2.example.com \u0026gt; 192.168.1.10   Test \u0026rsquo;er out Spin up your container Now you\u0026rsquo;re ready to spin up your container!\nMake sure you\u0026rsquo;re in the same directory as your docker-compose.yml file, and run:\n1  sudo docker-compose up -d   Launch Minecraft, and check your work Now, launch Minecraft, head over to the multiplayer menu, and add servers that point to the FQDNs for your A records created in Set up DNS.\nIf you did everything correctly, these should be showing as online! (If not make sure they\u0026rsquo;re running first ðŸ˜‰)\n","date":"2022-05-04T00:00:00Z","image":"https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/featuredImage_hu1f9b670f15031e47206bef00af34ddde_168720_120x120_fill_box_smart1_3.png","permalink":"https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/","title":"Stop using weird ports for your Minecraft Servers"},{"content":"Something everyone is dying to do\u0026hellip; Code-driven Discord server management.\nÂ Requirements  Discord API Token  Learn how to get this   Some knowledge with Terraform (to understand what is going on) Terraform 0.13 and up  Â  Â Source Code All of my code and related files can be found in my Overture Repo.\nÂ  Â Obtain Discord API Token  Head over to the Discord Developer Portal Get logged in Create a new application Name this whatever you want  Ex: \u0026ldquo;Terraform\u0026rdquo;   Once in your new application, head over to the \u0026ldquo;Bot\u0026rdquo; section Click \u0026ldquo;Add Bot\u0026rdquo; Give the bot a name (or leave the default name)  Ex: \u0026ldquo;Mr. Terraform\u0026rdquo;   Click the \u0026ldquo;Reset Token\u0026rdquo; button  This will give you your token, and is the only time it will be displayed Make sure you keep this in a safe place, and treat it like a password   Use this token in your credentials.auto.tfvars file  Â  Â Terraform Provider Information The provider used here is discord by Chaotic Logic (Source).\nÂ Get started Note: Make sure you have your Discord API token ready\nÂ Prepare Terraform To get Terraform ready, create a file in the same directory called provider.tf, and paste the following information into it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  terraform { required_version = \u0026#34;\u0026gt;= 0.13.0\u0026#34; required_providers { discord = { source = \u0026#34;Chaotic-Logic/discord\u0026#34; version = \u0026#34;0.0.1\u0026#34; } } } provider \u0026#34;discord\u0026#34; { token = var.discord_token }   Now, get the required provider downloaded (cd into your Terraform directory first):\n1  terraform init   Â Create credentials file Create a new directory, and cd into it. Then create a file in there called credentials.auto.tfvars.\nPaste the following information in:\n1 2 3 4 5 6 7 8 9  discord_token = \u0026#34;YourDiscordApiToken\u0026#34; server_name = \u0026#34;NewServerName\u0026#34; server_region = \u0026#34;us-east\u0026#34; # Region to host in (Brazil | Europe | Hong Kong | India | Rapan | Russia | Singapore | South Africa | Sydney | US (Central | East | South | West)) category_name = \u0026#34;NewCategoryName\u0026#34; text_channel_name = \u0026#34;NewTextChannelName\u0026#34;   You\u0026rsquo;ll want to edit the values (in quotations) as needed, filling in discord_token with your API token received from here, it would be best to choose a region closest to you.\nÂ Create variables file While the credentials.auto.tfvars assigns values to variables, the variables still need to be defined within Terraform. Create a file called variables.tf to store these, paste the following contents (one per assigned variable from above):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  variable \u0026#34;discord_token\u0026#34; { type = string sensitive = true } variable \u0026#34;server_name\u0026#34; { type = string } variable \u0026#34;server_region\u0026#34; { type = string } variable \u0026#34;category_name\u0026#34; { type = string } variable \u0026#34;text_channel_name\u0026#34; { type = string }   Â Create a server In the same directory as your provider.tf file, create a file called createServer.tf.\nPaste the following information:\n1 2 3 4 5 6 7 8 9 10 11 12 13  # Create a server resource \u0026#34;discord_server\u0026#34; \u0026#34;my_server\u0026#34; { name = var.server_name region = var.server_region default_message_notifications = 0 } # Get newly created server\u0026#39;s ID data \u0026#34;discord_server\u0026#34; \u0026#34;createdServerInfo\u0026#34; { server_id = resource.discord_server.my_server.id }   What does this do?  The block discord_server.my_server creates a Discord server with a given name and region assigned from the credentials.auto.tfvars file. Then saves the id of the server in data.discord_server.createdServerInfo.  Â Create a text channel Now, we need to add a general channel for the server!\nI found the provider requires a category channel needs created, and channels be placed under that category\u0026hellip; so we can do this in one shot:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  resource \u0026#34;discord_category_channel\u0026#34; \u0026#34;general\u0026#34; { depends_on = [ data.discord_server.createdServerInfo ] name = var.category_name position = 0 server_id = data.discord_server.createdServerInfo.id } resource \u0026#34;discord_text_channel\u0026#34; \u0026#34;general\u0026#34; { depends_on = [ resource.discord_category_channel.general ] name = lower(var.text_channel_name) position = 0 server_id = data.discord_server.createdServerInfo.id category = resource.discord_category_channel.general.id }   What does this do?  The block discord_category_channel.general creates a \u0026ldquo;general\u0026rdquo; category, which also depends on data.discords_server.createdServerInfo to contain information (ensuring the server is created before the category is)  This places the category in the server that we created by supplying its id   The block discord_text_channel.general creates a \u0026ldquo;general\u0026rdquo; text channel, which falls under the \u0026ldquo;general\u0026rdquo; category. Just like the category depends on the server to exist, this text channel depends on the category to exist.  Â Create an invite Now, we need a way to actually see all of the work Terraform will perform. Since a Bot is what created the server and everything in it, we need an invite so our own user can join the server and interact with it.\nSo, create yet another file, call this one createServerInvite.tf:\n1 2 3 4 5 6 7 8  resource \u0026#34;discord_invite\u0026#34; \u0026#34;inviteMe\u0026#34; { channel_id = resource.discord_text_channel.general.id max_age = 0 } output \u0026#34;invite_info\u0026#34; { value = resource.discord_invite.inviteMe.id }   What does this do?  The discord_invite.inviteMe block will create a non-expiring invite code that we can use to join the server, placing the invite under the channel we created earlier (by id) The output.invite_info block will print the invite code as a string to the terminal in a cleaner, more easily-found fashion.  Â Let Terraform do the work, and join your server! Now, open a terminal session, cd into your Terraform files directory and run terraform plan.\n This will show you what Terraform will do  You may have to correct some errors before you can proceed    Then, just run terraform apply -auto-approve to create the server.\nÂ In the terminal, something like this will show:\n1 2 3 4 5  Apply complete! Resources: 3 added, 0 changed, 0 destroyed. Outputs: invite_info = \u0026#34;kvdyTVBuUs\u0026#34;   Â This invite_info is what you need to join the server. To do this:\n Open your Discord client Click the \u0026ldquo;+\u0026rdquo; button under the list of joined servers to \u0026ldquo;Add a Server\u0026rdquo; Under \u0026ldquo;Have an invite already?\u0026rdquo;, click the \u0026ldquo;Join Server\u0026rdquo; button Enter the code given by the terminal (you don\u0026rsquo;t need a URL, just the code), and click \u0026ldquo;Join Server\u0026rdquo;!  You should now be a member of the new server, and you should also see a shiny new text channel titled general.\n","date":"2022-05-01T00:00:00Z","image":"https://thequib.github.io/p/manage-discord-servers-with-terraform/featuredImage_hua35bfdf4fd422c0dcb65b4e45d6f41e9_68354_120x120_fill_box_smart1_3.png","permalink":"https://thequib.github.io/p/manage-discord-servers-with-terraform/","title":"Manage Discord Servers with Terraform"},{"content":"A static website is a plain and simple site with some HTML and CSS, without the need for a database or a beefy server.\nHugo is one of many different static site generators. The most popular is called Jekyll, and is a bit simpler to use than Hugo. It\u0026rsquo;s mostly personal preference, but here we\u0026rsquo;ll be going through setup for Hugo.\nÂ Requirements  A computer running Windows / Mac / Linux / OpenBSD / FreeBSD IDE that supports YAML and Markdown Basic command line knowledge Basic understanding of websites (HTML, CSS)  In this post, I\u0026rsquo;ll be using Visual Studio Code as my IDE, you can download that here if you are interested.\nÂ  Â Install Hugo Firstly, you\u0026rsquo;ll have to install Hugo. This differs between operating systems\u0026hellip; But the official instructions can be found here.\nBelow, you can find instructions for Windows and Linux systems.\nInstall on Windows The best way to install on Windows is to use the chocolatey method. You can find installation instructions for that here\nOnce that is installed, run\n1  choco install hugo   Install on Linux If you want to use Linux, I found it\u0026rsquo;s best to get the latest version from Hugo\u0026rsquo;s GitHub repo releases page. If you try to install using apt, it will install an older version.\nDownload the latest release to a directory of your choosing\nEx:\n1 2  wget https://github.com/gohugoio/hugo/releases/hugo_0.96.0_Linux-64it.deb sudo dpkg -i hugo_0.96.0_Linux-64it.deb   Confirm installation To confirm you\u0026rsquo;ve installed Hugo, just run hugo --version in your command line\nÂ  Â Generate Hugo site files To get started, will need to generate site files that you can edit\n Open a terminal / command prompt cd into an empty directory on your machine Run hugo new site sitename Run ls to view all of the new files  Â  Â Add theme to site First thing you will need to do after creating a site is to add a theme to it. You can find a whole big list of themes directly from Hugo\u0026rsquo;s website here.\nThere are two methods to add a theme to a site\u0026hellip; Via a git submodule or just copying all theme files into your site.\nIn this example, I will be using the PaperMod.\nGit Submodule Method The benefit to cloning a submodule from git is you can quickly update the theme without having to re-copy all files manually. Git will take care of this for you :)\n Find the theme you want, and go to its GitHub repository. Copy the URL of the repository Open a terminal session, cd in to your new site directory Run: git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod (substituting the URL of your chosen theme) To update the submodule, run git submodule update --remote --merge  Note: If your site is in a git repository, you must run git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod to pull the submodule, as this is not done by default\nCopy Method You can also just copy the contents of the repository by clicking the \u0026ldquo;Code\u0026rdquo; button on the GitHub repo, extract the files from the downloaded zip file, and place those in your themes folder.\nÂ  Â File structure As you may have noticed, Hugo created a bunch of directories for you, including the themes directory from the last section.\nThe most notable and important directories are:\n content  Storage for Markdown files that will be used to generate pages   layouts  Storage for HTML files that are used as templates to place markdown data into   static  Storage for all static files the website will use, such as CSS and image files   themes  Stores the theme you are using for your site    Â  Â Site configuration Each site contains a configuration file, this can be either toml or yaml file types, and using one over another is dependent first on what your theme supports, and personal preference.\nTypically, it is best to reference your chosen theme\u0026rsquo;s documentation to get base configuration to get started.\nThe default config.yml file for PaperMod can be found here. Feel free to make changes as you see fit.\nÂ  Â Create your first page Now it is time to create your first page!\nFirst create a file named about.md under the content directory.\nNow, paste in the following lines:\n1 2 3 4 5 6 7 8 9  --- title: \u0026#34;About\u0026#34; description: \u0026#34;Description of page.\u0026#34; aliases: [\u0026#34;contact\u0026#34;] author: \u0026#34;Your Name\u0026#34; --- This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme. Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est.   Make sure to save the file.\nÂ  Â View your configured site To spin up a quick webserver on your local machine, run the command hugo server in the directory containing your site files.\nThis will generate the website files, and serve an HTTP server locally on your machine (the output of the command will give you the url).\nBy default, Hugo will server on port 1313, so you can open a web browser and go to http://localhost:1313\nÂ Once you\u0026rsquo;ve done this, there is your new site! If you want to check out the about.md page we created above, you can navigate to http://localhost:1313/about.\nÂ  Â Extra note If you want to generate all HTML files for this site, run the command hugo -v, this will create a directory named public and you can copy the files there to your webserver of choice.\n","date":"2022-03-28T00:00:00Z","image":"https://thequib.github.io/p/create-a-static-website/featuredImage_hua8e89a1db18ac97da0e77a478009c247_74039_120x120_fill_box_smart1_3.png","permalink":"https://thequib.github.io/p/create-a-static-website/","title":"Create a Static Website"},{"content":"So, I just got my new UniFi G4 Doorbell installed. Out of the box, itâ€™s great! I can view live video, past video, and spy on my dog when sheâ€™s in my front yardâ€¦ All with my data being stored on my local network with no subscription fee.\nWhile the out of box experience is great, I couldnâ€™t help myself but look up how I can get my own ring (or \u0026ldquo;chime\u0026rdquo; as Ubiquiti calls it) uploaded to my doorbell. This requires a bit of work using some SSH, but itâ€™s extremely fun to play around with.\nÂ The scoop While you can do this all manually, the doorbell sadly resets back to itâ€™s default chime when restarted. So as an example, if you loose power, your doorbell will have itâ€™s original chime again.\nThis is no fun, so I made a script for you to use! You can find it on my personal GitHub page at https://github.com/TheQuib/G4-Doorbell-Custom-Chime\n You will need to enable SSH on your doorbell before use, please refer to this section of this post to do so  If you want to learn how to do this yourself, please continue on!\nÂ  Â Enable SSH on Doorbell This process is kinda hard to find, but enabling SSH on your UniFi Protect console (whether that be a Dream Machine, Cloud Key Gen 2+, or UniFi NVR) is pretty simple, and a quick google search awayâ€¦ so that wonâ€™t be covered here.\nSo first off, you will need to SSH into your UniFi Protect Console\nDream Machine Only:\n1  unifi-os shell   Â Dream Mahcine + All Other Devices:\n Edit the file /etc/unifi-protect/config.json  If this file does not exist already, don\u0026rsquo;t worry    1  nano /etc/unifi-protect/config.json   Â Enter the following configuration to the end of the file:\n1 2 3  { \u0026#34;enableSsh\u0026#34;: true }   Â Save the file with the following commands:\n Ctrl+X y enter  Â You should now be able to SSH to all of your UniFi Protect devices! The username is ubnt and the password can be set in your UniFi/Protect Console settings.\n Â Prepare audio file Now, you will need to get a working .wav file to be later uploaded to your doorbell. I would recommend to use a clip that is 10 seconds maximum (though I havenâ€™t tested lengths yet).\nIf youâ€™re familiar with how to use Audacity, here are the file specifications you need:\n Specs:  Mono 44100Hz 16 bit   A good idea to:  Normalize the audio Apply a limiter, and make sure make-up gain is applied    Â First, get your audio file that you would like to trim down.\nÂ Now, open the file in Audacity\n The audio file will show in the main area, click the down arrow next to the file name  Click \u0026ldquo;Split stereo to mono\u0026rdquo;   Delete the second track   Make sure the track is selected   In the toolbar, click \u0026ldquo;Effect\u0026rdquo; \u0026gt; Normalize  Leave the default settings Click \u0026ldquo;OK\u0026rdquo;     Again in the toolbar, click \u0026ldquo;Effect\u0026rdquo; \u0026gt; Limiter  Leave the default settings Make sure to \u0026ldquo;Apply Make-up Gain\u0026rdquo; is set to \u0026ldquo;Yes\u0026rdquo; Click \u0026ldquo;OK\u0026rdquo;     Make sure the \u0026ldquo;Project Rate (Hz)\u0026rdquo; at the bottom-left of Audacity is set to \u0026ldquo;44100\u0026rdquo;   Click \u0026ldquo;File\u0026rdquo; \u0026gt; \u0026ldquo;Export\u0026rdquo; \u0026gt; \u0026ldquo;Export as WAV\u0026rdquo;  Set \u0026ldquo;Encoding\u0026rdquo; to \u0026ldquo;Signed 16-bit PCM\u0026rdquo;   Save the file to a location you\u0026rsquo;ll remember  Â  Â Upload audio file Now we get to upload the audio file to the doorbell!\nTo do this, youâ€™ll need to open a terminal of your choice (such as CMD in Windows)\nNavigate to where you saved your WAV file using the cd command.\nEx:\n1  cd C:\\Users\\Quib\\Desktop\\   Now, we\u0026rsquo;ll use the SCP command to copy the file to the doorbell via SSH. General usage of SCP is:\n1  scp localFile user@remoteHost:/path/to/remoteFile   Lets put our variables in there. In my case, I will be using a file name trainHorn.wav:\n1  scp trainHorn.wav ubnt@192.168.10.100:trainHorn.wav   NOTE: Make sure you remember this file name for later\nÂ You may notice t hat I didn\u0026rsquo;t specify a path on the rmoet host, this is because we\u0026rsquo;ll let the file residei n the default directory of /etc/persistent on the doorbell, and later create a symlink for that file to a different directory.\nÂ  Â Create symlink of audio file Now, weâ€™ll backup the original chime.wav just so it can easily be reset later if desired, and then create a symlink from our uploaded file to where chime.wav exists.\nThe reason this is done is because the doorbell seems to only like reading a symlink instead of a regular file when playing the chime sound.\n**First, lets create the backup:\n navigate to the /etc/sounds/ directory and list the files to see what\u0026rsquo;s in there:  1 2  cd /etc/sounds ls    This should show a list of audio files, one of them being chime.wav. Lets create a backup of that:  1  mv chime.wav chime.wav.back    Now, lets create a symlink of our uploaded file, make sure you replace trainHorn.wav with the name of the file you uploaded earlier, and list the files in /etc/sounds/  1 2  ln -s /etc/persistent/trainHorn.wav /etc/sounds/chime.wav ls    The ls command should now show two chime files:  chime.wav chime.wav.bak   The new chime.wav file is the symlink you just created, and now the current doorbell chime!  Â  Â Finishing up Now you\u0026rsquo;re all done! You can go ahead and test out the new chime by pressing the ring button on your doorbell, and it should play your uploaded file.\n","date":"2022-03-15T00:00:00Z","image":"https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/featuredImage_hu8233ebaa93238652fe932be24439f22f_372677_120x120_fill_box_smart1_3.png","permalink":"https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/","title":"UniFi Doorbell G4 Custom Chime"},{"content":"Ever though about an easier way to configure tons of network devices easily? Python is definitely the answer to get started, and as long as you have a basic understanding of programming, it\u0026rsquo;s pretty simple, and tons of fun!\n Requirements  Python version 3.9 or higher An IDE that supports the Python language Some sort of appliance you can connect to via SSH  I will be using a Cisco IOS appliance here running in GNS3 A Linux VM will also work    In this post, I\u0026rsquo;ll be using Visual Studio Code as my IDE, you can download that here if you are interested.\nYou can find all of my scripts, and other projects on my GitHub page.\n Before you Start Note: This is only if you are using Visual Studio Code as your IDE\nVS Code gets a little funky when it comes to installed python libraries. First, make sure you install the latest version of Python from the Microsoft Store\u0026hellip; Code will look to the installation path of this by default.\nAfter installation:\n Open VS Code Open or create a Python file (use the extension .py to tell Code to use Python) On the bottom-left of the window, click the Python version number, this should open a box at the top of the screen Select \u0026ldquo;Entire Workspace\u0026rdquo; Choose the following option from the list:  Now you should be all goood to go!\n Installing Netmiko Netmiko is, in my opinion, the best all-in-one network automation tool to use in Python. Netmiko has a multitude of supported devices; including Linux, Cisco (IOS, NX-OS, etc), HP Enterprise, and TONS more.\nTo install Netmiko on your computer, open a terminal and type:\n1  python3 -m pip install netmiko   Now, open your IDE and create a new Python file, enter the following code and run it to test installation:\n1  from Netmiko import ConnectHandler   If you run this, and it doesn\u0026rsquo;t do anything, that\u0026rsquo;s good! This just means that the library imported with no problems.\n Setting up Netmiko Network automation is all about doing the similar tasks on tons of devices from a single place. That doesn\u0026rsquo;t mean you have to have a hundred devices to do some automation work.\nIn my case, I will be using the Cisco Modeling Labs IOSv router image (in GNS3), so my commands will be IOS specific. I\u0026rsquo;ll have some information down below so you can set up a Linux machine if you want as well :)\nFirst, we\u0026rsquo;ll need to import the ConnectHandler module from Netmiko:\n1 2  # NEtwork automation module from netmiko import ConnectHandler   Then let\u0026rsquo;s get some username and password information from the user:\n1 2 3 4 5 6 7 8 9  #Module used to hide passwords in the console importÂ getpass #Ask user for username usernameÂ =Â input(\u0026#34;PleaseÂ enterÂ aÂ usernameÂ toÂ connectÂ with:\\n\u0026#34;) #Ask user for password using getpass passwordÂ =Â getpass.getpass(\u0026#34;PleaseÂ enterÂ aÂ passwordÂ toÂ connectÂ with:\\n\u0026#34;) #Ask user for secret password secret = getpass.getpass(\u0026#34;Please enter a secret password to enable with:\\n\u0026#34;)   Now we\u0026rsquo;ll want to set up information that Netmiko will use for the actual connection. Type the following code and note the comments:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #DefinedÂ hostÂ IPÂ address,Â makeÂ sureÂ thisÂ matchesÂ yourÂ machine hostÂ =Â \u0026#39;1.2.3.4\u0026#39; #ConfigurationÂ dictionaryÂ thatÂ netmikoÂ willÂ use hostConfigÂ =Â { \u0026#39;device_type\u0026#39;:Â \u0026#39;cisco_ios\u0026#39;, \u0026#39;host\u0026#39;:Â host, \u0026#39;username\u0026#39;:Â username, \u0026#39;password\u0026#39;:Â password, #UsedÂ for exec privÂ commandsÂ ifÂ necessary \u0026#39;secret\u0026#39;:Â secret, #AcceptÂ unknownÂ SSHÂ keys \u0026#39;use_keys\u0026#39;:Â True } #CommandÂ toÂ beÂ sentÂ toÂ theÂ machine commandÂ =Â \u0026#39;ipÂ address\u0026#39;   This code creates a Python dictionary that contains the items device_type, host, password, secret, and use_keys, and then sets a variable to the string \u0026lsquo;ip address\u0026rsquo;.\nMost of these are pretty self explanatory, use_keys will bypass the prompt SSH gives back when connecting to an unknown device for the first time.\nIf you wanted to try this on multiple devices, tweak your code to use a list for hosts and a for loop as such:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #DefinedÂ hostÂ IPÂ address,Â makeÂ sureÂ thisÂ matchesÂ yourÂ machine hostsÂ =Â [ \u0026#39;1.2.3.4\u0026#39;, \u0026#39;4.3.2.1\u0026#39; ] forÂ hostÂ inÂ hosts: #ConfigurationÂ dictionaryÂ thatÂ netmikoÂ willÂ use hostConfigÂ =Â { \u0026#39;device_type\u0026#39;:Â \u0026#39;cisco_ios\u0026#39;, \u0026#39;host\u0026#39;:Â host, \u0026#39;username\u0026#39;:Â username, \u0026#39;password\u0026#39;:Â password, #Used for exec priv commands if necessary \u0026#39;secret\u0026#39;:Â secret, #AcceptÂ unknownÂ SSHÂ keys \u0026#39;use_keys\u0026#39;:Â True } #CommandÂ toÂ beÂ sentÂ toÂ theÂ machine commandÂ =Â \u0026#39;sh run\u0026#39;   Sending your first command Now we\u0026rsquo;re ready to send a command to your device / devices! Let\u0026rsquo;s get started by creating a Netmiko ConnectHandler variable by adding this line:\n1  ssh = ConnectHandler(**hostConfig)   Now, we can act on the variable ssh to send commands to our device. Using send_command, which is used specifically for sending a single command via Netmiko (this will utilize the command variable we set in the previous step):\n1 2  output = ssh.send_command(command) print(output)   Now go ahead and run your program! If you put everything in correctly, you should see the output of the Linux command ip addr in your terminal.\n Sending multiple commands Automation isn\u0026rsquo;t just about sending a single command to devices. While this can be pretty useful, especially for gathering some information (like switch configs), sending multiple commands can prove to be extremely useful and time-saving, especially when you\u0026rsquo;re configuring tons of devices.\nIn the previous step, we used the function send_command(), which only sends one command. For multiple configuration commands, there is a function called send_config_set(), which accepts a list in its parameters.\nSo first, let\u0026rsquo;s create a list:\n1  config = [\u0026#39;int gi0/1\u0026#39;, \u0026#39;ip address 172.16.0.1 255.255.0.0\u0026#39;]   Now, instead of send_command(), we can use the following to send our config variable instead:\n1  ssh.send_config_set(config)   ","date":"2021-09-17T00:00:00Z","permalink":"https://thequib.github.io/p/getting-started-with-network-automation/","title":"Getting Started with Network Automation"},{"content":"When diving into learning networking, GNS3 is a great tool to get started. GNS3 allows you to build out and design networks without having to buy all of the expensive hardware to do so.\nÂ  Â Requirements  A GNS3 VM server, or server running on your local machine  Check out GNS3 in Proxmox VE   GNS3 client on your local computer  Download the GNS3 Client from the official website    Optional  Cisco Modeling Labs IOSv router/switch images  Â  Â Loading GNS3 Start by opening your GNS3 client. Here, a dialog shows to create a new project.\n If you are running the GNS3 server on your local machine, go ahead and create a new project, name it whatever you want If you are running the GNS3 server on a remote machine  Go to Edit \u0026gt; Preferences \u0026gt; Server Change \u0026lsquo;Host\u0026rsquo; to the IP address of your server Change the port to \u0026lsquo;80 TCP\u0026rsquo; (Or the port you have it set to if you\u0026rsquo;ve changed it) Fill out the \u0026lsquo;user\u0026rsquo; and \u0026lsquo;password\u0026rsquo; fields (Default user is \u0026lsquo;gns3\u0026rsquo; and password is \u0026lsquo;password\u0026rsquo;) Click \u0026lsquo;Apply\u0026rsquo; and close the preferences window Go to File \u0026gt; New blank project, name the new project whatever you want    Â  Â Installing an appliance On the left hand side of the window, you will find a toolbar with the following icons:\nFrom top to bottom, these items are Routers, Switches, End Devices, Security Devices, All Devices, and Add a link. These buttons contain what are called templates, templates are virtual devices that can be manipulated just as if they were the real deal.\nAll of these are relatively self explanatory, the last \u0026ldquo;Add a link\u0026rdquo; is for connecting devices together using a virtual network cable.\nTo get started and testing things, go to End Devices and click \u0026ldquo;+ New template\u0026rdquo;. You will want to install an appliance from the server, so click \u0026ldquo;Next \u0026gt;\u0026rdquo;, expand \u0026ldquo;Guests\u0026rdquo;, and scroll to find an appliance that interests you. I\u0026rsquo;ll be choosing the \u0026ldquo;Ubuntu Docker Guest\u0026rdquo; as docker containers start up in just a few seconds.\nOnce you have found the device you want, click \u0026ldquo;Install\u0026rdquo;, then \u0026ldquo;Next\u0026rdquo; to install on the main server, then \u0026ldquo;Finish\u0026rdquo;. Now, the appliance should be installed!\nÂ  Â Adding devices to a project Now, the newly installed appliance should show up under End Devices. Click this, and drag the device into the blank space of the project. This will do some downloading work if you have just installed it, then add itself into the project.\nTo use the device, you can either click the green play button at the top of the window (this would start all devices in the project), or you can right click an individual device, and click \u0026ldquo;Start\u0026rdquo;.\nYou can confirm that the device has started by looking at the \u0026ldquo;Topology Summary\u0026rdquo; on the top right of the window. A green circle indicates that a device is online.\nTo get console access to this docker guest, you can double click on the node, or right click and hit \u0026ldquo;console\u0026rdquo;. This, by default, will open the Solarwinds Solar-PuTTY application on your computer. You can interact with the device just as if it were a physical one.\nÂ  Â Final thoughts Keep in mind, each devices has its own configuration settings that you can mess with, as well as console types depending on if the device has a GUI or not (Such as between the Ubuntu Docker and Ubuntu Desktop guests). Some of these settings include amount of CPU cores, RAM, and type of console access you have to the device.\nFeel free to play around with these and figure some stuff out! The beauty of GNS3 is that you can do anything you want, and not have to worry about breaking anything of importance :)\nÂ  Â Conclusion And there you have it! Go ahead and play with the different end devices, as well as switching/routing appliances that exist. If you have the Cisco Modeling labs subscription, you are also able to import the IOSv images into GNS3, which will allow you to interact and play with Cisco IOS devices.\n","date":"2021-05-02T00:00:00Z","permalink":"https://thequib.github.io/p/getting-started-with-gns3/","title":"Getting Started with GNS3"},{"content":"Do you use Proxmox VE as your main homelab hypervisor, and want to run the GNS3 VM on it? You\u0026rsquo;re in luck, below you can find steps on how to do just that as long as you meet a few server requirements.\nRequirements  Proxmox VE with 3-4 A VM storage device that supports .qcow2 files Location of VM disks on your Proxmox Server FTP and Shell access to your Proxmox Server   Download the .ova file Head over to the GNS3 website and download the ESXi VM https://gns3.com/software/download-vm\nKeep in mind, this will ask you to create an account before you can download.\n Upload the .ova file to your server Now you will need to get the downloaded file onto your Proxmox server\n Open your favorite FTP client on your computer. In my case, I\u0026rsquo;m using WinSCP to do this Connect to your Proxmox server using either its IP address or hostname On the left pane (your local machine), navigate to where the .ova file is   On the right pane (the server), create a new directory, naming whatever you want I\u0026rsquo;ll be putting mine underthe /root directory   Now, drag the .ova file from the left side to the right side, and you will see the upload begin   Create a VM in Proxmox Now we\u0026rsquo;re going to want to create a VM in Proxmox that we will be adding hard disk to\n Create a VM by clicking \u0026ldquo;Create VM\u0026rdquo; on the top right Under \u0026ldquo;General\u0026rdquo;, you can use any ID starting from 100 that you like, take note of this. Name it whatever you would like Under \u0026ldquo;OS\u0026rdquo;, select the radio button to not use any media   Under \u0026ldquo;System\u0026rdquo;, select your preferred graphics card (I will be using the VirtIO option), and make sure \u0026ldquo;SeaBIOS\u0026rdquo; is selected   Under \u0026ldquo;Storage\u0026rdquo;, make sure SCSI is selected, and a qcow2 compatible storage device is selected Under CPU, give it at least 3 cores to run with, and make sure to select \u0026lsquo;host\u0026rsquo; for the type   Under \u0026ldquo;Memory\u0026rdquo;, give it at least 4096MB of RAM Set your preferred settings under \u0026ldquo;Network\u0026rdquo;, the default model will work just fine and should have the best performance   Create secondary hard disk  Navigate to the newly created VM Go to the \u0026ldquo;Hardware\u0026rdquo; tab   Select the same storage device that you chose when creating the VM Change the size to whatever you would like to make it Click the \u0026lsquo;Add\u0026rsquo; button at the bottom You should now have 2 hard disks in the machine, \u0026lsquo;scsi0\u0026rsquo; and \u0026lsquo;scsi1\u0026rsquo;   Extract files from the .ova file We will need to grab files that are packaged into the file downloaded from the GNS3 website. .ova files typically contain 2 main parts: VM Configuration settings (we just did this), and virtual hard disks (In the .vmdk format)\n First access the shell of the Proxmox server, this can be either over SSH, or using the shell tab in Proxmox   Change your current directory to where you stored the .ova file earlier using the \u0026lsquo;cd\u0026rsquo; command. In my case, that would be:  1  cd /root/GNS2.2.20    Now, to extract the files using tar to the current directory, and list the new files  1 2  tar -xvf *.ova ls    This will show the new files in the current directory, these should be:  GNS3 VM-disk001.vmdk GNS3 VM-disk002.vmdk GNS3 VM.ovf    The 2 .vmdk files are the virtual hard disks, and the .ovf file is the VM configuration file\n Convert .vmdk files to .qcow2 qemu files In order for Proxmox to properly use the hard disks we just snatched, we need to convert them to .qcow2 (qemu) hard disks\n Get that VM ID you set earlier when creating the VM, I used 501 in my case Convert each file, replacing vmid with your VM ID:  1 2  qemu-img convert -f vmdk \u0026#39;GNS3 VM-disk001.vmdk\u0026#39; -O qcow2 vm-vmid-disk-0.qcow2 qemu-img convert -f vmdk \u0026#39;GNS3 VM-disk002.vmdk\u0026#39; -O qcow2 vm-vmid-disk-1.qcow2   Here\u0026rsquo;s an example of what mine looked like:\n1 2  qemu-img convert -f vmdk \u0026#39;GNS3 VM-disk001.vmdk\u0026#39; -O qcow2 vm-501-disk-0.qcow2 qemu-img convert -f vmdk \u0026#39;GNS3 VM-disk002.vmdk\u0026#39; -O qcow2 vm-501-disk-1.qcow2    Copy the newly converted .qcow2 files Now we can copy the files to the VM folder!\n Make sure you\u0026rsquo;re still in the same directory as the .qcow2 files Find the directory of the VM you will be copying the files to  In my case, my GNS3 VM is located at /mnt/pve/Proxmox-1-VM/images/501 501 in this directory is my VM ID   Use the cp command to copy the files to the vm directory  1 2  cp vm-vmid-disk-0.qcow2 /directory/of/vm/vm-vmid/ cp vm-vmid-disk-1.qcow2 /directory/of/vm/vm-vmid/   Here\u0026rsquo;s an example of what mine looked like:\n1 2  cp vm-501-disk-0.qcow2 /mnt/pve/Proxmox1-VM-images-501/ cp vm-501-disk-1.qcow2 /mnt/pve/Proxmox1-VM-images-501/    Start the VM Now you should be good to go! Try and start the VM, and head to the console tab. GNS3 should start to load, and you can begin creating your virtual networks!\n Optional - Install qemu-guest-agent on GNS3 I know that when I have a VM in Proxmox, I like to get some quick information sometimes straight from the GUI\u0026hellip; such as the VM\u0026rsquo;s IP address. This is only possible if the qemu guest agent installed on the machine.\nLucky for us, the GNS3 VM runs on Ubuntu, so this is pretty easy!\n Once GNS3 is loaded, go to the console tab, and press enter in the window to hit OK Arrow-down to the option \u0026ldquo;Shell\u0026rdquo; and hit enter In the shell, type the following commands:  1 2 3  sudo apt update sudo apt install qemu-guest-agent sudo systemctl start qemu-guest-agent    This will update the repository, install the guest agent, and start the guest agent service Now, click the \u0026ldquo;Summary\u0026rdquo; tab of the VM in Proxmox, more information (such as the VM\u0026rsquo;s IP address) will now show right there!  Note: If the guest agent information doesn\u0026rsquo;t show, try reloading the web page\n","date":"2021-04-23T00:00:00Z","permalink":"https://thequib.github.io/p/gns3-vm-in-proxmox-ve/","title":"GNS3 VM in Proxmox VE"}]