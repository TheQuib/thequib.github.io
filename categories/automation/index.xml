<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Automation on QuibTech</title><link>https://thequib.github.io/categories/automation/</link><description>Recent content in Automation on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/categories/automation/index.xml" rel="self" type="application/rss+xml"/><item><title>Host your website on Cloudflare</title><link>https://thequib.github.io/p/host-your-website-on-cloudflare/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/host-your-website-on-cloudflare/</guid><description>&lt;img src="https://thequib.github.io/p/host-your-website-on-cloudflare/featuredImage.png" alt="Featured image of post Host your website on Cloudflare" />&lt;h2 id="what-is-this">What is this?&lt;/h2>
&lt;p>&lt;a class="link" href="https://pages.cloudflare.com/" target="_blank" rel="noopener"
>Cloudflare pages&lt;/a> is a web app hosting platform that hosts websites for free. It&amp;rsquo;s free to anyone with a Cloudflare account, and super easy to set up!&lt;/p>
&lt;p>I&amp;rsquo;ll be using the Hugo static site generator. I have a full tutorial on how to get this set up and working in your own environment &lt;a class="link" href="https://quibtech.com/p/create-a-static-website/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h2 id="-requirements">📝 Requirements&lt;/h2>
&lt;ul>
&lt;li>A Cloudflare account&lt;/li>
&lt;li>A GitHub account&lt;/li>
&lt;li>GitHub desktop&lt;/li>
&lt;li>An IDE to work in (such as Visual Studio Code)&lt;/li>
&lt;li>Your static site files
&lt;ul>
&lt;li>Don&amp;rsquo;t know where to get started? &lt;a class="link" href="https://quibtech.com/p/create-a-static-website/" target="_blank" rel="noopener"
>I have a post on this&lt;/a>!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-github">🔍 Prepare GitHub&lt;/h2>
&lt;h3 id="-create-a-repository">🚩 Create a repository&lt;/h3>
&lt;p>First, let&amp;rsquo;s get started by creating the site&amp;rsquo;s repository. This can be named whatever you want:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>An example for me would be: &lt;code>my-website&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make sure this is set to &lt;code>public&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can initalize a README if you would like&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you&amp;rsquo;re using &lt;em>Jekyll&lt;/em>, it may be a good idea to initalize with a &lt;code>.gitignore&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="-clone-the-repository">🔽 Clone the repository&lt;/h2>
&lt;p>Now, we&amp;rsquo;ll get the repository down to the local machine to work on it. You can either do this in a GUI with &lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> or by using the &lt;a class="link" href="https://git-scm.com/" target="_blank" rel="noopener"
>Git CLI&lt;/a> with the following command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> directory/to/clone/to/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUsername/yourRepository
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="add-necessary-files">Add necessary files&lt;/h2>
&lt;h3 id="-open-in-your-ide">🔼 Open in your IDE&lt;/h3>
&lt;ul>
&lt;li>It&amp;rsquo;s super easy to work with a git repository in an IDE, such as Visual Studio code. But your favorite IDE should work anyways.&lt;/li>
&lt;li>Open up the directory you cloned your repository to&lt;/li>
&lt;/ul>
&lt;h3 id="-add-site-files">➕ Add site files&lt;/h3>
&lt;p>Get your hugo project files into this repository&amp;rsquo;s directory (if you are using Hugo). Or again, other site generators will do just fine.&lt;/p>
&lt;h2 id="-commit">✅ Commit&lt;/h2>
&lt;p>Now, let&amp;rsquo;s get everything commited to GitHub.&lt;/p>
&lt;ul>
&lt;li>In &lt;em>GitHub Desktop&lt;/em>, enter a message and click &lt;code>Commit&lt;/code> on the bottom-left of the application&lt;/li>
&lt;li>In &lt;em>Git CLI&lt;/em>, cd into your cloned directory and enter the following commands, substituting your own message if you would like:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;Add site files&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="-get-cloudflare-set-up">🔍 Get cloudflare set up&lt;/h2>
&lt;ul>
&lt;li>Log into the cloudflare dashboard, and head over to the &lt;code>Pages&lt;/code> tab:&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="pagesButton.png" >&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Click &lt;code>Create a Project&lt;/code> &amp;gt; &lt;code>Connect to Git&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="createButton.png" >&lt;/a>&lt;/p>
&lt;h3 id="-link-github">🔗 Link GitHub&lt;/h3>
&lt;ul>
&lt;li>Click &lt;code>Add account&lt;/code> to link your GitHub account&lt;/li>
&lt;li>Once linked, click the account dropdown, and select your account&lt;/li>
&lt;li>Select the repository you created from the list that shows&lt;/li>
&lt;li>Click &lt;code>Begin setup&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="-project-settings">⚙️ Project Settings&lt;/h3>
&lt;p>If you would like, go ahead and make a few tweaks:&lt;/p>
&lt;ul>
&lt;li>Name the project whatever you would like
&lt;ul>
&lt;li>Such as &amp;ldquo;My website&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Make sure &amp;ldquo;master&amp;rdquo; is set as the &lt;em>Production branch&lt;/em>&lt;/li>
&lt;li>Leave &lt;em>Framework preset&lt;/em> set as none
&lt;ul>
&lt;li>If you are using anything other than Hugo, check out the dropdown to see if your framework is there!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Enter &lt;code>hugo --minify&lt;/code> as the build command&lt;/li>
&lt;li>Enter &lt;code>public&lt;/code> as the &lt;em>Build output directory&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="-environment-variables">👨‍💻 Environment variables&lt;/h3>
&lt;p>In order to specify a Hugo version, we will need to configure an environment variable&lt;/p>
&lt;p>You can find the latest Hugo version &lt;a class="link" href="https://gohugo.io/categories/releases" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Click the &lt;code>Environment variables&lt;/code> link&lt;/li>
&lt;li>Click the &lt;code>Add variable&lt;/code> button&lt;/li>
&lt;li>Use the following in the text boxes:
&lt;ul>
&lt;li>&lt;em>Variable name&lt;/em>: &lt;code>HUGO_VERSION&lt;/code>&lt;/li>
&lt;li>&lt;em>Value&lt;/em>: &lt;code>0.98.0&lt;/code>
&lt;ul>
&lt;li>This is as of July 13, 2022. The latest version may be different for you&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click &lt;code>Save and Deploy&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="-watch-the-magic-happen">✅ Watch the magic happen!&lt;/h2>
&lt;p>Now, you will see a terminal output, giving you the status of the deployment.&lt;/p>
&lt;p>If it worked, it will present you with a URL for you to go to with your website!&lt;/p>
&lt;h2 id="a-few-references">A few references&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener"
>Deploying Hugo with GitHub actions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/actions" target="_blank" rel="noopener"
>GitHub actions documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/TheQuib/thequib.github.io" target="_blank" rel="noopener"
>This website&amp;rsquo;s repository!&lt;/a>
&lt;ul>
&lt;li>As I use hugo, this contains the necessary actions workflow file and directory structure for Hugo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Host your website on GitHub</title><link>https://thequib.github.io/p/host-your-website-on-github/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/host-your-website-on-github/</guid><description>&lt;img src="https://thequib.github.io/p/host-your-website-on-github/featuredImage.png" alt="Featured image of post Host your website on GitHub" />&lt;h2 id="what-is-this">What is this?&lt;/h2>
&lt;p>GitHub pages is a static site hosting platform that hosts websites for free. It is available for free to anyone with a GitHub account, organization, and / or project.&lt;/p>
&lt;p>With a little bit of static site generation using your favorite generator, and GitHub actions, your website will be up and running live on the internet in no time!&lt;/p>
&lt;p>I will be using &lt;code>Hugo&lt;/code> in this post, but it can be tweaked to accomodate for other site generators.&lt;/p>
&lt;h2 id="-requirements">📝 Requirements&lt;/h2>
&lt;ul>
&lt;li>A GitHub account&lt;/li>
&lt;li>GitHub desktop&lt;/li>
&lt;li>An IDE to work in (such as Visual Studio Code)&lt;/li>
&lt;li>A generated static site
&lt;ul>
&lt;li>Don&amp;rsquo;t know where to get started? &lt;a class="link" href="https://quibtech.com/p/create-a-static-website/" target="_blank" rel="noopener"
>I have a post on this&lt;/a>!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-github">🔍 Prepare GitHub&lt;/h2>
&lt;h3 id="-create-a-repository">🚩 Create a repository&lt;/h3>
&lt;p>First, let&amp;rsquo;s get started by creating the site&amp;rsquo;s repository. There are a few requirements for this:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Must be your &lt;code>username&lt;/code>, &lt;code>organization&lt;/code> or &lt;code>project&lt;/code> title and end with &lt;code>.github.io&lt;/code>&lt;/p>
&lt;ul>
&lt;li>An example for me would be: &lt;code>thequib.github.io&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Make sure this is set to &lt;code>public&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can initalize a README if you would like&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you&amp;rsquo;re using &lt;em>Jekyll&lt;/em>, it may be a good idea to initalize with a &lt;code>.gitignore&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="-add-gh-pages-branch">➕ Add gh-pages branch&lt;/h4>
&lt;p>Now, in your repository:&lt;/p>
&lt;ul>
&lt;li>Click on the link titled &lt;code>1 branch&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/host-your-website-on-github/branchButton.png"
width="86"
height="37"
srcset="https://thequib.github.io/p/host-your-website-on-github/branchButton_hu4f28305167a0905e9a2a4a4332b28f01_1105_480x0_resize_box_3.png 480w, https://thequib.github.io/p/host-your-website-on-github/branchButton_hu4f28305167a0905e9a2a4a4332b28f01_1105_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="557px"
>&lt;/p>
&lt;ul>
&lt;li>At the top right of the list, click &lt;code>New Branch&lt;/code>&lt;/li>
&lt;li>Name this branch &lt;code>gh-pages&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Create Branch&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="change-repository-settings">Change repository settings&lt;/h3>
&lt;p>Under the name of your repository:&lt;/p>
&lt;ul>
&lt;li>Click the &lt;code>Settings&lt;/code> tab&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/host-your-website-on-github/settingsButton.png"
width="86"
height="35"
srcset="https://thequib.github.io/p/host-your-website-on-github/settingsButton_hu2fe49c549b79b34262c504ecf73c155f_1320_480x0_resize_box_3.png 480w, https://thequib.github.io/p/host-your-website-on-github/settingsButton_hu2fe49c549b79b34262c504ecf73c155f_1320_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/p>
&lt;ul>
&lt;li>On the left sidebar, click &lt;code>Pages&lt;/code>&lt;/li>
&lt;li>Click the &lt;code>Branch&lt;/code> dropdown, and select your newly-created branch, &lt;em>gh-pages&lt;/em>&lt;/li>
&lt;li>Click &lt;code>Save&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="-clone-the-repository">🔽 Clone the repository&lt;/h2>
&lt;p>Now, we&amp;rsquo;ll get the repository down to the local machine to work on it. You can either do this in a GUI with &lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> or by using the &lt;a class="link" href="https://git-scm.com/" target="_blank" rel="noopener"
>Git CLI&lt;/a> with the following command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> directory/to/clone/to/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUsername/yourRepository
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="add-necessary-files">Add necessary files&lt;/h2>
&lt;h3 id="-open-in-your-ide">🔼 Open in your IDE&lt;/h3>
&lt;ul>
&lt;li>It&amp;rsquo;s super easy to work with a git repository in an IDE, such as Visual Studio code. But your favorite IDE should work anyways.&lt;/li>
&lt;li>Open up the directory you cloned your repository to&lt;/li>
&lt;/ul>
&lt;h3 id="-add-site-files">➕ Add site files&lt;/h3>
&lt;p>It would be beneficial to add your hugo project files into this repository (if you are using Hugo). Again, other site generators are similar in workflows.&lt;/p>
&lt;h3 id="-create-your-actions-workflow">➕ Create your Actions workflow&lt;/h3>
&lt;p>A workflow in GitHub is an automation process defined by a &lt;code>yaml&lt;/code> file. These can be anything from super simple, to extremely complex.&lt;/p>
&lt;p>For GitHub Pages, it&amp;rsquo;s pretty simple.&lt;/p>
&lt;ol>
&lt;li>First, create a directory in the root of the repository titled &lt;code>.github&lt;/code>&lt;/li>
&lt;li>In this directory, create another directory titled &lt;code>workflows&lt;/code>&lt;/li>
&lt;li>In &lt;em>this&lt;/em> directory, create a file titled &lt;code>deploy-site.yml&lt;/code>&lt;/li>
&lt;li>This &lt;code>yaml&lt;/code> file will contain all of the instructions GitHub will use to deploy the site
&lt;ul>
&lt;li>An example of this file can be found below:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">pull_request&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-20.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">extended&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">github_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./public&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>But, you can find tons of examples online if this doesn&amp;rsquo;t suit your needs (such as with a different static site generator like Jekyll).&lt;/p>
&lt;h4 id="-what-will-this-action-do">❓ What will this action do?&lt;/h4>
&lt;ol>
&lt;li>In an Ubuntu 20.04 image&lt;/li>
&lt;li>The repository will be checked out&lt;/li>
&lt;li>Hugo will be set up, using the &lt;code>extended&lt;/code> version in case needed&lt;/li>
&lt;li>Site will be built using the command &lt;code>hugo --minify&lt;/code>&lt;/li>
&lt;li>Site will deploy to the repository, using the contents of the &lt;code>./public&lt;/code> directory created from the previous command
&lt;ul>
&lt;li>In essence, the contents of &lt;code>./public&lt;/code> are committed to the &lt;code>gh-pages&lt;/code> branch&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>This will run a deployment action automatically that makes the site live&lt;/li>
&lt;/ol>
&lt;h2 id="-commit">✅ Commit!&lt;/h2>
&lt;p>Now, let&amp;rsquo;s get everything commited to GitHub, and your site should deploy!&lt;/p>
&lt;h2 id="a-few-references">A few references&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener"
>Deploying Hugo with GitHub actions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/actions" target="_blank" rel="noopener"
>GitHub actions documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/TheQuib/thequib.github.io" target="_blank" rel="noopener"
>This website&amp;rsquo;s repository!&lt;/a>
&lt;ul>
&lt;li>As I use hugo, this contains the necessary actions workflow file and directory structure for Hugo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Manage infrastructure with Terraform Cloud</title><link>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</guid><description>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/featuredImage.png" alt="Featured image of post Manage infrastructure with Terraform Cloud" />&lt;p>Yeah, Terraform is cool and all. But that&amp;rsquo;s typically done locally. The cloud is even better, and free.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="why-would-i-do-this">Why would I do this?&lt;/h2>
&lt;p>There are tons of reasons you may want to deploy with Terraform in the cloud. A few of my personal favorite highlights are&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Less load put on local hardware&lt;/li>
&lt;li>It&amp;rsquo;s still as simple as running locally&lt;/li>
&lt;li>It can be easily automated, especially if &lt;code>git&lt;/code> is used
&lt;ul>
&lt;li>Runs can occur on a push&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>It&amp;rsquo;s &lt;strong>free&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Knowledge with getting Terraform working locally&lt;/li>
&lt;li>An existing and &lt;em>working&lt;/em> Terraform project&lt;/li>
&lt;li>&lt;strong>FREE&lt;/strong> Terraform Cloud Account
&lt;ul>
&lt;li>&lt;a class="link" href="https://app.terraform.io/signup/account" target="_blank" rel="noopener"
>Get this here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="deployment-methods">Deployment Methods&lt;/h2>
&lt;p>As of May 2022, there are 3 methods to deploy code with Terraform Cloud:&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="#-method-1-version-control-workflow" >Version control workflow&lt;/a>
- Store your Terraform configuration in a git repository, and trigger runs based on pull requests and merges&lt;/li>
&lt;li>&lt;a class="link" href="#-method-2-cli-driven-workflow" >CLI-driven workflow&lt;/a>
- Trigger remote Terraform runs from your local command line&lt;/li>
&lt;li>API-driven workflow
- A more advanced option. Integrate Terraform into a larger pipeline using the Terraform API&lt;/li>
&lt;/ol>
&lt;p>For the purposes of this post, we will only be going over the first two: Version control and CLI-driven workflows.&lt;/p>
&lt;p>The reason? They are the most common, especially if you&amp;rsquo;re just getting started with Terraform. Most don&amp;rsquo;t have a need to run API-driven workflows.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-1-version-control-workflow">📕 &lt;strong>Method 1: Version control workflow&lt;/strong>&lt;/h2>
&lt;p>In this post, I will be using GitHub to keep my repositories. Any git provider will work, as long as it is internet-accesible. If you are new to git, this is typically a good place to start.&lt;/p>
&lt;p>This method is best used if you want to automate your workflows, as this can be done via updates to the repository.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="extra-requirements">Extra requirements&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> is a super useful tool for pushing changes to a GitHub repo without the command line.&lt;/li>
&lt;li>If you don&amp;rsquo;t want to use this, and know how to use gitbash, that is perfectly fine too!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>NOTE&lt;/strong>&lt;/em>: If you structure your Terraform projects as I do, your repository created &lt;a class="link" href="#clone-repository-locally" >below&lt;/a>, you will need to update your &lt;code>.gitignore&lt;/code> file to include &lt;code>*.auto.tfvars&lt;/code> so that your credentials are not stored for just anyone to see (such as API tokens)&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="create-a-git-repository">Create a Git repository&lt;/h3>
&lt;p>Login into &lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>GitHub&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a new repository with the &amp;ldquo;New&amp;rdquo; button &lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton.png"
width="105"
height="42"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="New Button"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/li>
&lt;li>Make sure this is set as &lt;code>Public&lt;/code> to make things a bit easier
&lt;ul>
&lt;li>Setting this as private would require setting up SSH keys for Terraform Cloud to read the repo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Give this repository a name, and initialize it with a &lt;code>README&lt;/code> file and choose the &lt;code>Terraform&lt;/code> &lt;code>.gitignore&lt;/code> template.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="clone-repository-locally">Clone repository locally&lt;/h3>
&lt;p>In GitHub desktop, login to your account, and add a new repository by searching for the one you just created.&lt;/p>
&lt;ul>
&lt;li>You&amp;rsquo;ll have to choose a location to store this, it would be best to keep this somewhere simple (such as a shorter path)&lt;/li>
&lt;/ul>
&lt;p>You can also clone the repository via the command line with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /path/to/directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUserName/YourRepositoryName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>Version Control Workflow&lt;/code>&lt;/li>
&lt;li>Get connected to your git provider&lt;/li>
&lt;li>This will open a new window, asking you to sign into your provider&lt;/li>
&lt;li>In the list that shows, select the repository you will be using&lt;/li>
&lt;li>By default, the workspace name will auto-populate with the repo name, probably best to keep this for readability&amp;rsquo;s sake&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="add-variables-to-your-workspace">Add variables to your workspace&lt;/h3>
&lt;p>The best and safest way to store variables for Terraform is to actually use Terraform Cloud. To create variables to use for your project, click on the &lt;code>Variables&lt;/code> tab, and create each variable you have in your local project.&lt;/p>
&lt;p>Now Terraform Cloud is ready!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="add-terraform-configurations-to-repo">Add Terraform configurations to repo&lt;/h3>
&lt;p>Now, find your working terraform project, and copy &lt;em>ALL&lt;/em> of the files from there into your local repository location.&lt;/p>
&lt;p>Once they are copied in, bring GitHub Desktop back up, enter a &amp;ldquo;Commit Summary&amp;rdquo; on the bottom-left:  &lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message.png"
width="314"
height="281"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>And then at the top, push your changes to GitHub:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button.png"
width="340"
height="71"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="478"
data-flex-basis="1149px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="stage-changes-in-terraform-cloud">Stage changes in Terraform Cloud&lt;/h3>
&lt;p>Back in Terraform Cloud, click the &lt;code>Overview&lt;/code> tab, and then &lt;code>Start new plan&lt;/code>&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>Once the plan is complete, it will show you the changes it will make!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="run-plan">Run plan!&lt;/h3>
&lt;p>To run the latest plan, scroll to the bottom of the page and click &lt;code>Confirm and Apply&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan -auto-approve&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Now&amp;hellip; Watch the magic happen.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>If your plan had &lt;code>Outputs&lt;/code>, you can see those values by droping down the &amp;ldquo;Outputs&amp;rdquo; section:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs.png"
width="339"
height="161"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="destroy-infrastructure">Destroy infrastructure&lt;/h3>
&lt;p>To destroy the newly-created infrastructure, scroll back up to the top of the page, click &lt;code>Settings&lt;/code> &amp;gt; &lt;code>Destruction and Deletion&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enter your workspace name to confirm&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the plan finishes, click &lt;code>Confirm and apply&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is the equivalent to running &lt;code>terraform destroy -auto-approve&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-2-cli-driven-workflow">⌨️ &lt;strong>Method 2: CLI-driven workflow&lt;/strong>&lt;/h2>
&lt;p>This method uses the local command-line to trigger workflows in Terraform Cloud. A command that is run locally will actually perform in the cloud, showing a &amp;ldquo;remote window&amp;rdquo; of the remote CLI locally. You&amp;rsquo;ll see what I mean shortly&amp;hellip;&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-ready">Get Ready&lt;/h3>
&lt;p>As always for Terraform, &lt;code>cd&lt;/code> into your project directory.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-authenticated">Get authenticated&lt;/h3>
&lt;p>So first, once you have your &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud&lt;/a> account, we&amp;rsquo;ll need to log into to the terraform CLI.&lt;/p>
&lt;p>To do this, run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will prompt you to type &lt;code>yes&lt;/code> and automatically open a web browser to the page to create an access token.&lt;/p>
&lt;ul>
&lt;li>On this page, give the token a name, and hit create&lt;/li>
&lt;li>Then copy the token and paste it into your terminal session
&lt;ul>
&lt;li>&lt;em>Note&lt;/em>: This is the only time the token will show&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then you&amp;rsquo;re logged in!&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud-1">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>CLI-driven workflow&lt;/code>&lt;/li>
&lt;li>Name your workspace &lt;code>Terraform-CLI-Test&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;li>Take note of the &lt;code>Example code&lt;/code> for CLI-driven runs&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="create-terraform-cloud-file">Create Terraform Cloud file&lt;/h3>
&lt;p>Now, we need a way to tell our local Terraform installation run the configurations in the cloud.&lt;/p>
&lt;p>To do this, create a file called &lt;code>TerraformCloud.tf&lt;/code>, and add the example code from &lt;a class="link" href="#set-up-terraform-cloud-1" >earlier&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cloud&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">organization&lt;/span> = &lt;span class="s2">&amp;#34;YourOrganization&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">workspaces&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="s2">&amp;#34;Terraform-CLI-Test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>Note&lt;/em>: If using the above example, make sure to change the organization name to your own&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="test-er-out">Test &amp;rsquo;er out&lt;/h3>
&lt;p>Now, this should be pretty much it. Assuming your project works correctly, you can now run all of the regular Terraform CLI commands locally, and they will execute in the cloud.&lt;/p>
&lt;p>To test this out, try running &lt;code>terraform plan&lt;/code> and check the web interface to see the plan in action.&lt;/p>
&lt;p>Once that is all good to go, run &lt;code>terraform apply -auto-approve&lt;/code> and watch the magic happen!&lt;/p>
&lt;p> &lt;/p>
&lt;p>If that is all good, and you want to destroy it, just run &lt;code>terraform destroy -auto-approve&lt;/code>.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Doing jobs with Terraform in the cloud is pretty cool. It takes the load off of local hardware, and allows the automation of workflows to be performed, and is just plain fun to use.&lt;/p>
&lt;p>Hopefully this helped at least get your foot in the door for the wonders of Terraform Cloud, and feel free to comment if you have any questions!&lt;/p></description></item><item><title>Automate server deployment in Linode</title><link>https://thequib.github.io/p/automate-server-deployment-in-linode/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/automate-server-deployment-in-linode/</guid><description>&lt;img src="https://thequib.github.io/p/automate-server-deployment-in-linode/featuredImage.png" alt="Featured image of post Automate server deployment in Linode" />&lt;p>In case you&amp;rsquo;re not aware, Terraform is pretty cool. It is super powerful, providing the ability to provision infrastructure in seconds using code. Linode and it&amp;rsquo;s Terraform provider are no exception to this ability. Let&amp;rsquo;s dive into that&amp;hellip;&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A machine with Terraform installed&lt;/li>
&lt;li>A Linode account
&lt;ul>
&lt;li>With an API token, &lt;a class="link" href="https://www.linode.com/docs/products/tools/linode-api/guides/get-access-token/" target="_blank" rel="noopener"
>here&amp;rsquo;s how you can get this&lt;/a>
&lt;ul>
&lt;li>This will need at least &lt;code>Read/Write&lt;/code> access to &lt;code>Linodes&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>With the ability to create nodes (such as with free credits, or with an added bank account)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>If you do need to add your bank account, don&amp;rsquo;t worry! Because of the awesomeness of Terraform, &lt;em>this will only cost a few cents&lt;/em> as long as you &lt;a class="link" href="#destroy-infrastructure" >destroy the infrastructure&lt;/a> when it&amp;rsquo;s all said and done.&lt;/p>
&lt;hr>
&lt;h2 id="github-repo">GitHub Repo&lt;/h2>
&lt;p>All configuration files and example files can be found on my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture&lt;/a> repo, under &lt;a class="link" href="https://github.com/TheQuib/overture/tree/master/Terraform/Compute/Linode/SimpleLinode" target="_blank" rel="noopener"
>Terraform/Compute/Linode/SimpleLinode&lt;/a>.&lt;/p>
&lt;h2 id="create-some-terraform-files">Create some Terraform files&lt;/h2>
&lt;p>First thing&amp;rsquo;s first, let&amp;rsquo;s create the Terraform files that will define this project.&lt;/p>
&lt;ul>
&lt;li>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>You&amp;rsquo;ll want to make sure you&amp;rsquo;re in an empty directory&lt;/em>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="providertf">&lt;code>provider.tf&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>Defines the necessary provider to use: &lt;a class="link" href="https://registry.terraform.io/providers/linode/linode/latest" target="_blank" rel="noopener"
>linode/linode&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">required_version&lt;/span> = &lt;span class="s2">&amp;#34;&amp;gt;= 0.13&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">required_providers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">linode&lt;/span> = &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">source&lt;/span> = &lt;span class="s2">&amp;#34;linode/linode&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">version&lt;/span> = &lt;span class="s2">&amp;#34;1.27.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Configure the Linode Provider
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">provider&lt;/span> &lt;span class="s2">&amp;#34;linode&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">token&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="variablestf">&lt;code>variables.tf&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>Defines the variables Terraform will use&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="nx">linode_token&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;API token created in linode with access to desired resources&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Instance Settings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">variable&lt;/span> &lt;span class="nx">linode_instance_label&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Label for the Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="nx">linode_instance_image&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Image for the Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_region&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Region to place the Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_type&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Type of Linode instance to create&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_ssh_keys&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> =&lt;span class="nb"> list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;List of authorized SSH keys to install on the instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_root_pass&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Root password for Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="credentialsautotfvars">&lt;code>credentials.auto.tfvars&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>Places values on the variables
&lt;ul>
&lt;li>You will need to fill in these values as you see fit, make sure to provide &lt;strong>your&lt;/strong> &lt;a class="link" href="https://www.linode.com/docs/products/tools/linode-api/guides/get-access-token/" target="_blank" rel="noopener"
>Linode token&lt;/a>&lt;/li>
&lt;li>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>This should not be a tracked file for anyone to see, it contains sensitive information&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="na">linode_token&lt;/span> = &lt;span class="s2">&amp;#34;yourLinodeToken&amp;#34;&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Instance settings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_label&lt;/span> = &lt;span class="s2">&amp;#34;terraformInstance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">linode_instance_image&lt;/span> = &lt;span class="s2">&amp;#34;linode/ubuntu22.04&amp;#34;&lt;/span>&lt;span class="c1"> # https://api.linode.com/v4/images
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_region&lt;/span> = &lt;span class="s2">&amp;#34;us-east&amp;#34;&lt;/span>&lt;span class="c1"> # https://api.linode.com/v4/regions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_type&lt;/span> = &lt;span class="s2">&amp;#34;g6-nanode-1&amp;#34;&lt;/span>&lt;span class="c1"> # https://api.linode.com/v4/linode/types
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_ssh_keys&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ssh-rsa Key1AAAA...Gw== user@example.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ssh-rsa Key2BBBB...Gw== user2@example.local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">linode_instance_root_pass&lt;/span> = &lt;span class="s2">&amp;#34;yourRootPassHere&amp;#34;&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Minecraft settings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">minecraft_server_url&lt;/span> = &lt;span class="s2">&amp;#34;https://launcher.mojang.com/v1/objects/c8f83c5655308435b3dcf03c06d9fe8740a77469/server.jar&amp;#34;&lt;/span>&lt;span class="c1"> # From https://www.minecraft.net/en-us/download/server
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="define-the-linode_instance">Define the linode_instance&lt;/h2>
&lt;p>Now, the big (yet small) file that will do the cool stuff:&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="createsimpleinstancetf">&lt;code>createSimpleInstance.tf&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;linode_instance&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;web&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">label&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">image&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">region&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_region&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_type&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #authorized_keys = [&amp;#34;ssh-rsa AAAA...Gw== user@example.local&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="na">root_pass&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_root_pass&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #group = &amp;#34;foo&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #tags = [ &amp;#34;foo&amp;#34; ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #swap_size = 256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #private_ip = true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>Note that there are a few commented lines in case you would like to use them.&lt;/em>&lt;/p>
&lt;p>This file will take the values of the variables set in &lt;a class="link" href="#credentialsautotfvars" >credentials.auto.tfvars&lt;/a> and create a linode instance based on those values.&lt;/p>
&lt;h2 id="apply-configuration">Apply configuration&lt;/h2>
&lt;p>Now, you&amp;rsquo;re ready to apply!&lt;/p>
&lt;p>Go ahead and run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform plan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To see what Terraform will do&lt;/p>
&lt;p>And run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform apply -auto-approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To actually make the changes in Linode&lt;/p>
&lt;h2 id="check-your-work">Check your work&lt;/h2>
&lt;p>Now, log into the Linode console, and watch the magic happen! You should see a new Linode create with the settings you have in the &lt;a class="link" href="#credentialsautotfvars" >credentials.auto.tfvars&lt;/a> file.&lt;/p>
&lt;h2 id="destroy-infrastructure">Destroy Infrastructure&lt;/h2>
&lt;p>If you&amp;rsquo;re like me, you may be paying for this to be up and running. And unless you want to use this server you just created for something, you&amp;rsquo;ll want to destroy it so no extra charges come into your account.&lt;/p>
&lt;p>To destroy your infrastructure with Terraform, run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform destroy -auto-approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And you can watch it magically disappear!&lt;/p>
&lt;p> &lt;/p></description></item><item><title>Manage Discord Servers with Terraform</title><link>https://thequib.github.io/p/manage-discord-servers-with-terraform/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-discord-servers-with-terraform/</guid><description>&lt;img src="https://thequib.github.io/p/manage-discord-servers-with-terraform/featuredImage.png" alt="Featured image of post Manage Discord Servers with Terraform" />&lt;p>Something everyone is dying to do&amp;hellip; Code-driven Discord server management.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="requirements">Requirements&lt;/h1>
&lt;ul>
&lt;li>Discord API Token
&lt;ul>
&lt;li>&lt;a class="link" href="#obtain-discord-api-token" >Learn how to get this&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Some knowledge with Terraform (to understand what is going on)&lt;/li>
&lt;li>Terraform 0.13 and up&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="source-code">Source Code&lt;/h1>
&lt;p>All of my code and related files can be found in my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture Repo&lt;/a>.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="obtain-discord-api-token">Obtain Discord API Token&lt;/h1>
&lt;ul>
&lt;li>Head over to the &lt;a class="link" href="https://discord.com/developers/" target="_blank" rel="noopener"
>Discord Developer Portal&lt;/a>&lt;/li>
&lt;li>Get logged in&lt;/li>
&lt;li>Create a new application&lt;/li>
&lt;li>Name this whatever you want
&lt;ul>
&lt;li>Ex: &amp;ldquo;Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Once in your new application, head over to the &amp;ldquo;Bot&amp;rdquo; section&lt;/li>
&lt;li>Click &amp;ldquo;Add Bot&amp;rdquo;&lt;/li>
&lt;li>Give the bot a name (or leave the default name)
&lt;ul>
&lt;li>Ex: &amp;ldquo;Mr. Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click the &amp;ldquo;Reset Token&amp;rdquo; button
&lt;ul>
&lt;li>This will give you your token, and is the only time it will be displayed&lt;/li>
&lt;li>Make sure you keep this in a safe place, and treat it like a password&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use this token in your &lt;a class="link" href="credentials.auto.tfvars.example" >credentials.auto.tfvars&lt;/a> file&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="terraform-provider-information">Terraform Provider Information&lt;/h1>
&lt;p>The provider used here is &lt;a class="link" href="https://registry.terraform.io/providers/Chaotic-Logic/discord/latest" target="_blank" rel="noopener"
>discord&lt;/a> by &lt;a class="link" href="https://registry.terraform.io/namespaces/Chaotic-Logic" target="_blank" rel="noopener"
>Chaotic Logic&lt;/a> (&lt;a class="link" href="https://github.com/Chaotic-Logic/terraform-provider-discord" target="_blank" rel="noopener"
>Source&lt;/a>).&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="get-started">Get started&lt;/h1>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>Make sure you have your Discord API token ready&lt;/em>&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="prepare-terraform">Prepare Terraform&lt;/h2>
&lt;p>To get Terraform ready, create a file in the same directory called &lt;code>provider.tf&lt;/code>, and paste the following information into it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">required_version&lt;/span> = &lt;span class="s2">&amp;#34;&amp;gt;= 0.13.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">required_providers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">discord&lt;/span> = &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">source&lt;/span> = &lt;span class="s2">&amp;#34;Chaotic-Logic/discord&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">version&lt;/span> = &lt;span class="s2">&amp;#34;0.0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">provider&lt;/span> &lt;span class="s2">&amp;#34;discord&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">token&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, get the required provider downloaded (&lt;code>cd&lt;/code> into your Terraform directory first):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">terraform init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-credentials-file">Create credentials file&lt;/h2>
&lt;p>Create a new directory, and &lt;code>cd&lt;/code> into it. Then create a file in there called &lt;code>credentials.auto.tfvars&lt;/code>.&lt;/p>
&lt;p>Paste the following information in:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">discord_token = &amp;#34;YourDiscordApiToken&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_name = &amp;#34;NewServerName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_region = &amp;#34;us-east&amp;#34; # Region to host in (Brazil | Europe | Hong Kong | India | Rapan | Russia | Singapore | South Africa | Sydney | US (Central | East | South | West))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">category_name = &amp;#34;NewCategoryName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">text_channel_name = &amp;#34;NewTextChannelName&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You&amp;rsquo;ll want to edit the values (in quotations) as needed, filling in &lt;code>discord_token&lt;/code> with &lt;em>your&lt;/em> API token received from &lt;a class="link" href="#obtain-discord-api-token" >here&lt;/a>, it would be best to choose a region closest to you.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="create-variables-file">Create variables file&lt;/h2>
&lt;p>While the &lt;code>credentials.auto.tfvars&lt;/code> assigns values to variables, the variables still need to be defined within Terraform. Create a file called &lt;code>variables.tf&lt;/code> to store these, paste the following contents (one per assigned variable from &lt;a class="link" href="#create-credentials-file" >above&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;discord_token&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_region&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;category_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;text_channel_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-a-server">Create a server&lt;/h2>
&lt;p>In the same directory as your &lt;code>provider.tf&lt;/code> file, create a file called &lt;code>createServer.tf&lt;/code>.&lt;/p>
&lt;p>Paste the following information:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Create a server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resource &amp;#34;discord_server&amp;#34; &amp;#34;my_server&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = var.server_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> region = var.server_region
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default_message_notifications = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Get newly created server&amp;#39;s ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data &amp;#34;discord_server&amp;#34; &amp;#34;createdServerInfo&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_id = resource.discord_server.my_server.id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_server.my_server&lt;/code> creates a Discord server with a given name and region assigned from the &lt;code>credentials.auto.tfvars&lt;/code> file.&lt;/li>
&lt;li>Then saves the &lt;code>id&lt;/code> of the server in &lt;code>data.discord_server.createdServerInfo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-a-text-channel">Create a text channel&lt;/h2>
&lt;p>Now, we need to add a general channel for the server!&lt;/p>
&lt;p>I found the provider requires a category channel needs created, and channels be placed under that category&amp;hellip; so we can do this in one shot:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_category_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">category_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_text_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">lower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text_channel_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">category&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-1">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_category_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; category, which also depends on &lt;code>data.discords_server.createdServerInfo&lt;/code> to contain information (ensuring the server is created before the category is)
&lt;ul>
&lt;li>This places the category in the server that we created by supplying its &lt;code>id&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The block &lt;code>discord_text_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; text channel, which falls under the &amp;ldquo;general&amp;rdquo; category. Just like the category depends on the server to exist, this text channel depends on the category to exist.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-an-invite">Create an invite&lt;/h2>
&lt;p>Now, we need a way to actually see all of the work Terraform will perform. Since a &lt;a class="link" href="https://discord.com/developers/docs/intro#bots-and-apps" target="_blank" rel="noopener"
>Bot&lt;/a> is what created the server and everything in it, we need an invite so our own user can join the server and interact with it.&lt;/p>
&lt;p>So, create yet &lt;strong>another&lt;/strong> file, call this one &lt;code>createServerInvite.tf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_invite&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;inviteMe&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">channel_id&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_text_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">max_age&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">output&lt;/span> &lt;span class="s2">&amp;#34;invite_info&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">value&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_invite&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inviteMe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-2">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The &lt;code>discord_invite.inviteMe&lt;/code> block will create a non-expiring invite code that we can use to join the server, placing the invite under the channel we created earlier (by &lt;code>id&lt;/code>)&lt;/li>
&lt;li>The &lt;code>output.invite_info&lt;/code> block will print the invite code as a string to the terminal in a cleaner, more easily-found fashion.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="let-terraform-do-the-work-and-join-your-server">Let Terraform do the work, and join your server!&lt;/h2>
&lt;p>Now, open a terminal session, &lt;code>cd&lt;/code> into your Terraform files directory and run &lt;code>terraform plan&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This will show you what Terraform will do
&lt;ul>
&lt;li>You may have to correct some errors before you can proceed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Then, just run &lt;code>terraform apply -auto-approve&lt;/code> to create the server.&lt;/p>
&lt;p> &lt;/p>
&lt;p>In the terminal, something like this will show:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Outputs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">invite_info = &amp;#34;kvdyTVBuUs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>This &lt;code>invite_info&lt;/code> is what you need to join the server. To do this:&lt;/p>
&lt;ul>
&lt;li>Open your Discord client&lt;/li>
&lt;li>Click the &amp;ldquo;+&amp;rdquo; button under the list of joined servers to &amp;ldquo;Add a Server&amp;rdquo;&lt;/li>
&lt;li>Under &amp;ldquo;Have an invite already?&amp;rdquo;, click the &amp;ldquo;Join Server&amp;rdquo; button&lt;/li>
&lt;li>Enter the code given by the terminal (you don&amp;rsquo;t need a URL, just the code), and click &amp;ldquo;Join Server&amp;rdquo;!&lt;/li>
&lt;/ul>
&lt;p>You should now be a member of the new server, and you should also see a shiny new text channel titled &lt;code>general&lt;/code>.&lt;/p></description></item><item><title>UniFi Doorbell G4 Custom Chime</title><link>https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/</guid><description>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/featuredImage.png" alt="Featured image of post UniFi Doorbell G4 Custom Chime" />&lt;p>So, I just got my new UniFi G4 Doorbell installed. Out of the box, it’s great! I can view live video, past video, and spy on my dog when she’s in my front yard… All with my data being stored on my local network with no subscription fee.&lt;/p>
&lt;p>While the out of box experience is great, I couldn’t help myself but look up how I can get my own ring (or &amp;ldquo;chime&amp;rdquo; as Ubiquiti calls it) uploaded to my doorbell. This requires a bit of work using some SSH, but it’s extremely fun to play around with.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="the-scoop">The scoop&lt;/h2>
&lt;p>While you can do this all manually, the doorbell sadly resets back to it’s default chime when restarted. So as an example, if you loose power, your doorbell will have it’s original chime again.&lt;/p>
&lt;p>This is no fun, so I made a script for you to use! You can find it on my personal GitHub page at &lt;a class="link" href="https://github.com/TheQuib/G4-Doorbell-Custom-Chime" target="_blank" rel="noopener"
>https://github.com/TheQuib/G4-Doorbell-Custom-Chime&lt;/a>&lt;/p>
&lt;ul>
&lt;li>You will need to enable SSH on your doorbell before use, please refer to this section of this post to do so&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>If you want to learn how to do this yourself, please continue on!&lt;/strong>&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="enable-ssh-on-doorbell">Enable SSH on Doorbell&lt;/h2>
&lt;p>This process is kinda hard to find, but enabling SSH on your UniFi Protect console (whether that be a Dream Machine, Cloud Key Gen 2+, or UniFi NVR) is pretty simple, and a quick google search away… so that won’t be covered here.&lt;/p>
&lt;p>&lt;strong>So first off, you will need to SSH into your UniFi Protect Console&lt;/strong>&lt;/p>
&lt;p>&lt;em>Dream Machine Only:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">unifi-os shell
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>&lt;em>Dream Mahcine + All Other Devices:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Edit the file &lt;code>/etc/unifi-protect/config.json&lt;/code>
&lt;ul>
&lt;li>If this file does not exist already, don&amp;rsquo;t worry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nano /etc/unifi-protect/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>Enter the following configuration to the end of the file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;enableSsh&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>Save the file with the following commands:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl+X&lt;/code>&lt;/li>
&lt;li>&lt;code>y&lt;/code>&lt;/li>
&lt;li>&lt;code>enter&lt;/code>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;p>You should now be able to SSH to all of your UniFi Protect devices! The username is ubnt and the password can be set in your UniFi/Protect Console settings.&lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="prepare-audio-file">Prepare audio file&lt;/h2>
&lt;p>Now, you will need to get a working &lt;code>.wav&lt;/code> file to be later uploaded to your doorbell. I would recommend to use a clip that is 10 seconds maximum (though I haven’t tested lengths yet).&lt;/p>
&lt;p>&lt;em>If you’re familiar with how to use Audacity, here are the file specifications you need:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Specs:
&lt;ul>
&lt;li>Mono&lt;/li>
&lt;li>44100Hz&lt;/li>
&lt;li>16 bit&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A good idea to:
&lt;ul>
&lt;li>Normalize the audio&lt;/li>
&lt;li>Apply a limiter, and make sure make-up gain is applied&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;p>First, get your audio file that you would like to trim down.&lt;/p>
&lt;p> &lt;/p>
&lt;p>Now, open the file in Audacity&lt;/p>
&lt;ul>
&lt;li>The audio file will show in the main area, click the down arrow next to the file name
&lt;ul>
&lt;li>Click &amp;ldquo;Split stereo to mono&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Delete the second track&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornDownArrow.png"
width="108"
height="29"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornDownArrow_hu0617b5948a0bcdf8691f18cffbbf2219_532_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornDownArrow_hu0617b5948a0bcdf8691f18cffbbf2219_532_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Down Arrow Image"
class="gallery-image"
data-flex-grow="372"
data-flex-basis="893px"
>&lt;/p>
&lt;ul>
&lt;li>Make sure the track is selected&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornSelect.png"
width="88"
height="23"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornSelect_hu2af23e231cffb0d25523acd4e631daae_440_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornSelect_hu2af23e231cffb0d25523acd4e631daae_440_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Train Horn Select"
class="gallery-image"
data-flex-grow="382"
data-flex-basis="918px"
>&lt;/p>
&lt;ul>
&lt;li>In the toolbar, click &amp;ldquo;Effect&amp;rdquo; &amp;gt; Normalize
&lt;ul>
&lt;li>Leave the default settings&lt;/li>
&lt;li>Click &amp;ldquo;OK&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornNormalize.png"
width="423"
height="177"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornNormalize_huee635ea39d93803df652af3e0f9505ce_7249_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornNormalize_huee635ea39d93803df652af3e0f9505ce_7249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Normalize Window"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="573px"
>&lt;/p>
&lt;ul>
&lt;li>Again in the toolbar, click &amp;ldquo;Effect&amp;rdquo; &amp;gt; Limiter
&lt;ul>
&lt;li>Leave the default settings&lt;/li>
&lt;li>Make sure to &amp;ldquo;Apply Make-up Gain&amp;rdquo; is set to &amp;ldquo;Yes&amp;rdquo;&lt;/li>
&lt;li>Click &amp;ldquo;OK&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornLimiter.png"
width="422"
height="306"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornLimiter_hu6c9512c1761fc979f6f91657ab2ccef2_10541_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornLimiter_hu6c9512c1761fc979f6f91657ab2ccef2_10541_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Limiter Window"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;ul>
&lt;li>Make sure the &amp;ldquo;Project Rate (Hz)&amp;rdquo; at the bottom-left of Audacity is set to &amp;ldquo;44100&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornProjectRate.png"
width="104"
height="49"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornProjectRate_huc836e71a6f29afb8539919d192d0471c_958_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornProjectRate_huc836e71a6f29afb8539919d192d0471c_958_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Project Rate"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;ul>
&lt;li>Click &amp;ldquo;File&amp;rdquo; &amp;gt; &amp;ldquo;Export&amp;rdquo; &amp;gt; &amp;ldquo;Export as WAV&amp;rdquo;
&lt;ul>
&lt;li>Set &amp;ldquo;Encoding&amp;rdquo; to &amp;ldquo;Signed 16-bit PCM&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Save the file to a location you&amp;rsquo;ll remember&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="upload-audio-file">Upload audio file&lt;/h2>
&lt;p>Now we get to upload the audio file to the doorbell!&lt;/p>
&lt;p>To do this, you’ll need to open a terminal of your choice (such as CMD in Windows)&lt;/p>
&lt;p>Navigate to where you saved your WAV file using the cd command.&lt;/p>
&lt;p>Ex:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> C:&lt;span class="se">\U&lt;/span>sers&lt;span class="se">\Q&lt;/span>uib&lt;span class="se">\D&lt;/span>esktop&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, we&amp;rsquo;ll use the &lt;code>SCP&lt;/code> command to copy the file to the doorbell via SSH. General usage of SCP is:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">scp localFile user@remoteHost:/path/to/remoteFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lets put our variables in there. In my case, I will be using a file name &lt;code>trainHorn.wav&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">scp trainHorn.wav ubnt@192.168.10.100:trainHorn.wav
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>NOTE: Make sure you remember this file name for later&lt;/strong>&lt;/p>
&lt;p> &lt;/p>
&lt;p>You may notice t hat I didn&amp;rsquo;t specify a path on the rmoet host, this is because we&amp;rsquo;ll let the file residei n the default directory of &lt;code>/etc/persistent&lt;/code> on the doorbell, and later create a symlink for that file to a different directory.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="create-symlink-of-audio-file">Create symlink of audio file&lt;/h2>
&lt;p>Now, we’ll backup the original chime.wav just so it can easily be reset later if desired, and then create a symlink from our uploaded file to where chime.wav exists.&lt;/p>
&lt;p>The reason this is done is because the doorbell seems to only like reading a symlink instead of a regular file when playing the chime sound.&lt;/p>
&lt;p>**First, lets create the backup:&lt;/p>
&lt;ul>
&lt;li>navigate to the &lt;code>/etc/sounds/&lt;/code> directory and list the files to see what&amp;rsquo;s in there:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /etc/sounds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This should show a list of audio files, one of them being &lt;code>chime.wav&lt;/code>. Lets create a backup of that:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mv chime.wav chime.wav.back
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Now, lets create a symlink of our uploaded file, make sure you replace &lt;code>trainHorn.wav&lt;/code> with the name of the file you uploaded earlier, and list the files in &lt;code>/etc/sounds/&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ln -s /etc/persistent/trainHorn.wav /etc/sounds/chime.wav
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>The &lt;code>ls&lt;/code> command should now show two &lt;code>chime&lt;/code> files:
&lt;ul>
&lt;li>&lt;code>chime.wav&lt;/code>&lt;/li>
&lt;li>&lt;code>chime.wav.bak&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The new &lt;code>chime.wav&lt;/code> file is the symlink you just created, and now the current doorbell chime!&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="finishing-up">Finishing up&lt;/h2>
&lt;p>Now you&amp;rsquo;re all done! You can go ahead and test out the new chime by pressing the ring button on your doorbell, and it should play your uploaded file.&lt;/p></description></item><item><title>Getting Started with Network Automation</title><link>https://thequib.github.io/p/getting-started-with-network-automation/</link><pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-network-automation/</guid><description>&lt;p>Ever though about an easier way to configure tons of network devices easily? Python is definitely the answer to get started, and as long as you have a basic understanding of programming, it&amp;rsquo;s pretty simple, and tons of fun!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Python version 3.9 or higher&lt;/li>
&lt;li>An IDE that supports the Python language&lt;/li>
&lt;li>Some sort of appliance you can connect to via SSH
&lt;ul>
&lt;li>I will be using a Cisco IOS appliance here running in GNS3&lt;/li>
&lt;li>A Linux VM will also work&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In this post, I&amp;rsquo;ll be using Visual Studio Code as my IDE, you can download that &lt;a class="link" href="https://code.visualstudio.com/download" target="_blank" rel="noopener"
>here&lt;/a> if you are interested.&lt;/p>
&lt;p>You can find all of my &lt;a class="link" href="https://github.com/TheQuib/python-network-automation" target="_blank" rel="noopener"
>scripts&lt;/a>, and other projects on my &lt;a class="link" href="https://github.com/TheQuib" target="_blank" rel="noopener"
>GitHub page&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="before-you-start">Before you Start&lt;/h2>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>This is only if you are using Visual Studio Code as your IDE&lt;/em>&lt;/p>
&lt;p>VS Code gets a little funky when it comes to installed python libraries. First, make sure you install the latest version of Python from the Microsoft Store&amp;hellip; Code will look to the installation path of this by default.&lt;/p>
&lt;p>After installation:&lt;/p>
&lt;ol>
&lt;li>Open VS Code&lt;/li>
&lt;li>Open or create a Python file (use the extension &lt;em>.py&lt;/em> to tell Code to use Python)&lt;/li>
&lt;li>On the bottom-left of the window, click the Python version number, this should open a box at the top of the screen&lt;/li>
&lt;li>Select &amp;ldquo;&lt;em>Entire Workspace&lt;/em>&amp;rdquo;&lt;/li>
&lt;li>Choose the following option from the list:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter.png"
width="898"
height="70"
srcset="https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter_hua8be6abbf3a39391b195b18f2b73d718_10706_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter_hua8be6abbf3a39391b195b18f2b73d718_10706_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Select Python Interpreter"
class="gallery-image"
data-flex-grow="1282"
data-flex-basis="3078px"
>&lt;/p>
&lt;p>Now you should be all goood to go!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="installing-netmiko">Installing Netmiko&lt;/h2>
&lt;p>Netmiko is, in my opinion, the best all-in-one network automation tool to use in Python. Netmiko has a multitude of supported devices; including Linux, Cisco (IOS, NX-OS, etc), HP Enterprise, and TONS more.&lt;/p>
&lt;p>To install Netmiko on your computer, open a terminal and type:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python3 -m pip install netmiko
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, open your IDE and create a new Python file, enter the following code and run it to test installation:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you run this, and it doesn&amp;rsquo;t do anything, that&amp;rsquo;s good! This just means that the library imported with no problems.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="setting-up-netmiko">Setting up Netmiko&lt;/h2>
&lt;p>Network automation is all about doing the similar tasks on tons of devices from a single place. That doesn&amp;rsquo;t mean you have to have a hundred devices to do some automation work.&lt;/p>
&lt;p>In my case, I will be using the Cisco Modeling Labs IOSv router image (in GNS3), so my commands will be IOS specific. I&amp;rsquo;ll have some information down below so you can set up a Linux machine if you want as well :)&lt;/p>
&lt;p>First, we&amp;rsquo;ll need to import the ConnectHandler module from Netmiko:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># NEtwork automation module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then let&amp;rsquo;s get some username and password information from the user:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Module used to hide passwords in the console&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for username&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a username to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for password using getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a password to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for secret password&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">secret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a secret password to enable with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now we&amp;rsquo;ll want to set up information that Netmiko will use for the actual connection. Type the following code and note the comments:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;ip address&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This code creates a Python dictionary that contains the items &lt;em>device_type&lt;/em>, &lt;em>host&lt;/em>, &lt;em>password&lt;/em>, &lt;em>secret&lt;/em>, and &lt;em>use_keys&lt;/em>, and then sets a variable to the string &lt;em>&amp;lsquo;ip address&amp;rsquo;&lt;/em>.&lt;/p>
&lt;p>Most of these are pretty self explanatory, &lt;em>use_keys&lt;/em> will bypass the prompt SSH gives back when connecting to an unknown device for the first time.&lt;/p>
&lt;p>If you wanted to try this on multiple devices, tweak your code to use a list for hosts and a for loop as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hosts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;4.3.2.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="ow">in&lt;/span>  &lt;span class="n">hosts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;sh run&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="sending-your-first-command">Sending your first command&lt;/h2>
&lt;p>Now we&amp;rsquo;re ready to send a command to your device / devices! Let&amp;rsquo;s get started by creating a Netmiko &lt;code>ConnectHandler&lt;/code> variable by adding this line:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">hostConfig&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, we can act on the variable &lt;em>ssh&lt;/em> to send commands to our device. Using &lt;em>send_command&lt;/em>, which is used specifically for sending a single command via Netmiko (this will utilize the &lt;em>command&lt;/em> variable we set in the previous step):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now go ahead and run your program! If you put everything in correctly, you should see the output of the Linux command &lt;code>ip addr&lt;/code> in your terminal.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="sending-multiple-commands">Sending multiple commands&lt;/h2>
&lt;p>Automation isn&amp;rsquo;t just about sending a single command to devices. While this can be pretty useful, especially for gathering some information (like switch configs), sending multiple commands can prove to be extremely useful and time-saving, especially when you&amp;rsquo;re configuring tons of devices.&lt;/p>
&lt;p>In the previous step, we used the function &lt;strong>send_command()&lt;/strong>, which only sends one command. For multiple configuration commands, there is a function called &lt;strong>send_config_set()&lt;/strong>, which accepts a list in its parameters.&lt;/p>
&lt;p>So first, let&amp;rsquo;s create a list:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;int gi0/1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ip address 172.16.0.1 255.255.0.0&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, instead of &lt;em>send_command()&lt;/em>, we can use the following to send our &lt;em>config&lt;/em> variable instead:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_config_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>