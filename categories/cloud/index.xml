<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud on QuibTech</title><link>https://thequib.github.io/categories/cloud/</link><description>Recent content in Cloud on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 30 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/categories/cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>Backup Linux Directories to Backblaze B2</title><link>https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/</link><pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/</guid><description>&lt;img src="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/featuredImage.png" alt="Featured image of post Backup Linux Directories to Backblaze B2" />&lt;p>I recently set off to find a cheap (and hopefully free) cloud backup solution for some crucial files in my home infrastructure. I stumbled upon Backblaze&amp;rsquo;s B2 object storage solution (similar to Amazon S3 or Azure Blob). Backblaze is pretty awesome, and provides up to 10GB free storage across multiple buckets to try it out!&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A Linux machine (virtual, container, or bare metal)&lt;/li>
&lt;li>Super sudoer powers&lt;/li>
&lt;li>A Backblaze account&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-linux">🐧 Prepare Linux&lt;/h2>
&lt;h3 id="-make-sure-you-have-the-latest-updates">⬆️ Make sure you have the latest updates&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="-install-curl-if-not-already">✨ Install &lt;code>curl&lt;/code> (if not already)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install curl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="-install-rclone">✨ Install &lt;code>Rclone&lt;/code>&lt;/h3>
&lt;p>Rclone is a tool written in Go that allows the movement of files between local and remote directories. It can be installed by following the tutorial on &lt;a class="link" href="https://rclone.org/install/" target="_blank" rel="noopener"
>their docs&lt;/a>.&lt;/p>
&lt;p>To check if &lt;code>Rclone&lt;/code> is installed properly, just type &lt;code>rclone&lt;/code> in your CLI. As long as you don&amp;rsquo;t get the &amp;ldquo;Unrecognized command&amp;rdquo; error, you&amp;rsquo;re good!&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-backblaze">🔥 Prepare Backblaze&lt;/h2>
&lt;p>Make sure you have a Backblaze account created, and log in.&lt;/p>
&lt;h3 id="-create-a-bucket">🪣 Create a Bucket&lt;/h3>
&lt;ul>
&lt;li>Make sure you are in your buckets list&lt;/li>
&lt;li>Create a bucket
&lt;ul>
&lt;li>Give it a unique name&lt;/li>
&lt;li>Private&lt;/li>
&lt;li>Encryption disabled&lt;/li>
&lt;li>Object lock disabled&lt;/li>
&lt;li>Click create&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="-create-app-key">🔑 Create App key&lt;/h3>
&lt;ul>
&lt;li>Click &lt;code>App keys&lt;/code> on the left&lt;/li>
&lt;li>Scroll down, click &lt;code>Add a New Application Key&lt;/code>
&lt;ul>
&lt;li>Give it a friendly name&lt;/li>
&lt;li>If you want to restrict the key to a specific bucket, choose it from the dropdown&lt;/li>
&lt;li>Keep it set to read/write&lt;/li>
&lt;li>Click create&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Make sure to save the &lt;code>keyID&lt;/code> and &lt;code>applicationKey&lt;/code> for later&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-set-up-rclone">🎚️ Set up Rclone&lt;/h2>
&lt;p>In Linux, enter the command &lt;code>rclone config&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Type &lt;code>n&lt;/code> for a new remote&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Give it a name (such as backblaze-bucketname)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This will list a bunch of supported remotes, find &lt;code>Backblaze B2&lt;/code> in the list, and enter the corresponding number into the prompt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>Account&lt;/code>, use the &lt;code>keyID&lt;/code> received from generating the App key&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>Key&lt;/code>, use the `applicationKey1 received from generating the App key&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set the following values as you see fit. The defaults should be good for most cases.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the list of current remotes shows, you can quit the config CLI with &lt;code>q&lt;/code>
&lt;img src="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-remoteComplete.png"
width="441"
height="415"
srcset="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-remoteComplete_hue41f00ea6755fe8e9d18e69fd85ef5db_8255_480x0_resize_box_3.png 480w, https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-remoteComplete_hue41f00ea6755fe8e9d18e69fd85ef5db_8255_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remotes can be checked by using &lt;code>rclone listremotes&lt;/code>&lt;/p>
&lt;ul>
&lt;li>This will return a list of all of your remotes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-copy-a-file-or-directory-to-your-b2-bucket">📃 Copy a file (or directory) to your B2 bucket&lt;/h2>
&lt;p>The proper syntax to copy a file is&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rclone copy &lt;span class="o">[&lt;/span>directoryOrFileName&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>nameOfRemote&lt;span class="o">]&lt;/span>:&lt;span class="o">[&lt;/span>bucket&lt;span class="o">]&lt;/span>/&lt;span class="o">[&lt;/span>directoryOrFileToCopyTo&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>cd&lt;/code> into a directory that contains the file you want to copy up. Let&amp;rsquo;s say this file is named &lt;code>file.txt&lt;/code>&lt;/li>
&lt;li>Use &lt;code>rclone copy&lt;/code> to copy up the file
&lt;ul>
&lt;li>Keep in mind, my remote&amp;rsquo;s name is &lt;code>backblaze-testing&lt;/code> and my bucket&amp;rsquo;s name is &lt;code>quib-testing&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rclone copy file.txt backblaze-testing:quib-testing/file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-copyFile.png"
width="1206"
height="118"
srcset="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-copyFile_hu1f57d3b8cec23c8c6968f5d3746ab669_8608_480x0_resize_box_3.png 480w, https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-copyFile_hu1f57d3b8cec23c8c6968f5d3746ab669_8608_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1022"
data-flex-basis="2452px"
>&lt;/p>
&lt;ul>
&lt;li>For a directory, this is very similar. Let&amp;rsquo;s say this directory is named &lt;code>directory/&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rclone copy directory backblaze-testing:quib-testing/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If this was successful, nothing is returned.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="-check-if-your-file-is-uploaded">✅ Check if your file is uploaded&lt;/h2>
&lt;p>Back in Backblaze, click &lt;code>Browse Files&lt;/code>, and select the bucket you would like to browse.&lt;/p>
&lt;p>If the file uploaded properly, it should show up there!&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="-automate-it">♾️ Automate it&lt;/h2>
&lt;p>Now, you&amp;rsquo;re probably here because you want to automate this. To do so, you&amp;rsquo;ll need to create a cron job for each backup interval you want.&lt;/p>
&lt;p>To edit cron tasks:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo crontab -e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>And select your desired text editor&lt;/li>
&lt;li>Cron jobs are formatted by the desired time interval, followed by the command to run&lt;/li>
&lt;li>Ex. &lt;code>* * * * * /home/user/script.sh&lt;/code> will run the file &lt;code>/home/user/script.sh&lt;/code> every minute
&lt;ul>
&lt;li>You can generate times to your liking easily with &lt;a class="link" href="https://crontab.guru/#*_*_*_*_*" target="_blank" rel="noopener"
>this website&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Example cron job:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run Backblaze automation every day at 12:00 AM&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> &lt;span class="m">12&lt;/span> * * * /home/user/backblaze-backup.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Host your website on Cloudflare</title><link>https://thequib.github.io/p/host-your-website-on-cloudflare/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/host-your-website-on-cloudflare/</guid><description>&lt;img src="https://thequib.github.io/p/host-your-website-on-cloudflare/featuredImage.png" alt="Featured image of post Host your website on Cloudflare" />&lt;h2 id="what-is-this">What is this?&lt;/h2>
&lt;p>&lt;a class="link" href="https://pages.cloudflare.com/" target="_blank" rel="noopener"
>Cloudflare pages&lt;/a> is a web app hosting platform that hosts websites for free. It&amp;rsquo;s free to anyone with a Cloudflare account, and super easy to set up!&lt;/p>
&lt;p>I&amp;rsquo;ll be using the Hugo static site generator. I have a full tutorial on how to get this set up and working in your own environment &lt;a class="link" href="https://quibtech.com/p/create-a-static-website/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h2 id="-requirements">📝 Requirements&lt;/h2>
&lt;ul>
&lt;li>A Cloudflare account&lt;/li>
&lt;li>A GitHub account&lt;/li>
&lt;li>GitHub desktop&lt;/li>
&lt;li>An IDE to work in (such as Visual Studio Code)&lt;/li>
&lt;li>Your static site files
&lt;ul>
&lt;li>Don&amp;rsquo;t know where to get started? &lt;a class="link" href="https://quibtech.com/p/create-a-static-website/" target="_blank" rel="noopener"
>I have a post on this&lt;/a>!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-github">🔍 Prepare GitHub&lt;/h2>
&lt;h3 id="-create-a-repository">🚩 Create a repository&lt;/h3>
&lt;p>First, let&amp;rsquo;s get started by creating the site&amp;rsquo;s repository. This can be named whatever you want:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>An example for me would be: &lt;code>my-website&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make sure this is set to &lt;code>public&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can initalize a README if you would like&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you&amp;rsquo;re using &lt;em>Jekyll&lt;/em>, it may be a good idea to initalize with a &lt;code>.gitignore&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="-clone-the-repository">🔽 Clone the repository&lt;/h2>
&lt;p>Now, we&amp;rsquo;ll get the repository down to the local machine to work on it. You can either do this in a GUI with &lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> or by using the &lt;a class="link" href="https://git-scm.com/" target="_blank" rel="noopener"
>Git CLI&lt;/a> with the following command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> directory/to/clone/to/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUsername/yourRepository
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="add-necessary-files">Add necessary files&lt;/h2>
&lt;h3 id="-open-in-your-ide">🔼 Open in your IDE&lt;/h3>
&lt;ul>
&lt;li>It&amp;rsquo;s super easy to work with a git repository in an IDE, such as Visual Studio code. But your favorite IDE should work anyways.&lt;/li>
&lt;li>Open up the directory you cloned your repository to&lt;/li>
&lt;/ul>
&lt;h3 id="-add-site-files">➕ Add site files&lt;/h3>
&lt;p>Get your hugo project files into this repository&amp;rsquo;s directory (if you are using Hugo). Or again, other site generators will do just fine.&lt;/p>
&lt;h2 id="-commit">✅ Commit&lt;/h2>
&lt;p>Now, let&amp;rsquo;s get everything commited to GitHub.&lt;/p>
&lt;ul>
&lt;li>In &lt;em>GitHub Desktop&lt;/em>, enter a message and click &lt;code>Commit&lt;/code> on the bottom-left of the application&lt;/li>
&lt;li>In &lt;em>Git CLI&lt;/em>, cd into your cloned directory and enter the following commands, substituting your own message if you would like:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;Add site files&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="-get-cloudflare-set-up">🔍 Get cloudflare set up&lt;/h2>
&lt;ul>
&lt;li>Log into the cloudflare dashboard, and head over to the &lt;code>Pages&lt;/code> tab:&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="pagesButton.png" >&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Click &lt;code>Create a Project&lt;/code> &amp;gt; &lt;code>Connect to Git&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="createButton.png" >&lt;/a>&lt;/p>
&lt;h3 id="-link-github">🔗 Link GitHub&lt;/h3>
&lt;ul>
&lt;li>Click &lt;code>Add account&lt;/code> to link your GitHub account&lt;/li>
&lt;li>Once linked, click the account dropdown, and select your account&lt;/li>
&lt;li>Select the repository you created from the list that shows&lt;/li>
&lt;li>Click &lt;code>Begin setup&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="-project-settings">⚙️ Project Settings&lt;/h3>
&lt;p>If you would like, go ahead and make a few tweaks:&lt;/p>
&lt;ul>
&lt;li>Name the project whatever you would like
&lt;ul>
&lt;li>Such as &amp;ldquo;My website&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Make sure &amp;ldquo;master&amp;rdquo; is set as the &lt;em>Production branch&lt;/em>&lt;/li>
&lt;li>Leave &lt;em>Framework preset&lt;/em> set as none
&lt;ul>
&lt;li>If you are using anything other than Hugo, check out the dropdown to see if your framework is there!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Enter &lt;code>hugo --minify&lt;/code> as the build command&lt;/li>
&lt;li>Enter &lt;code>public&lt;/code> as the &lt;em>Build output directory&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="-environment-variables">👨‍💻 Environment variables&lt;/h3>
&lt;p>In order to specify a Hugo version, we will need to configure an environment variable&lt;/p>
&lt;p>You can find the latest Hugo version &lt;a class="link" href="https://gohugo.io/categories/releases" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Click the &lt;code>Environment variables&lt;/code> link&lt;/li>
&lt;li>Click the &lt;code>Add variable&lt;/code> button&lt;/li>
&lt;li>Use the following in the text boxes:
&lt;ul>
&lt;li>&lt;em>Variable name&lt;/em>: &lt;code>HUGO_VERSION&lt;/code>&lt;/li>
&lt;li>&lt;em>Value&lt;/em>: &lt;code>0.98.0&lt;/code>
&lt;ul>
&lt;li>This is as of July 13, 2022. The latest version may be different for you&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click &lt;code>Save and Deploy&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="-watch-the-magic-happen">✅ Watch the magic happen!&lt;/h2>
&lt;p>Now, you will see a terminal output, giving you the status of the deployment.&lt;/p>
&lt;p>If it worked, it will present you with a URL for you to go to with your website!&lt;/p>
&lt;h2 id="a-few-references">A few references&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener"
>Deploying Hugo with GitHub actions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/actions" target="_blank" rel="noopener"
>GitHub actions documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/TheQuib/thequib.github.io" target="_blank" rel="noopener"
>This website&amp;rsquo;s repository!&lt;/a>
&lt;ul>
&lt;li>As I use hugo, this contains the necessary actions workflow file and directory structure for Hugo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Host your website on GitHub</title><link>https://thequib.github.io/p/host-your-website-on-github/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/host-your-website-on-github/</guid><description>&lt;img src="https://thequib.github.io/p/host-your-website-on-github/featuredImage.png" alt="Featured image of post Host your website on GitHub" />&lt;h2 id="what-is-this">What is this?&lt;/h2>
&lt;p>GitHub pages is a static site hosting platform that hosts websites for free. It is available for free to anyone with a GitHub account, organization, and / or project.&lt;/p>
&lt;p>With a little bit of static site generation using your favorite generator, and GitHub actions, your website will be up and running live on the internet in no time!&lt;/p>
&lt;p>I will be using &lt;code>Hugo&lt;/code> in this post, but it can be tweaked to accomodate for other site generators.&lt;/p>
&lt;h2 id="-requirements">📝 Requirements&lt;/h2>
&lt;ul>
&lt;li>A GitHub account&lt;/li>
&lt;li>GitHub desktop&lt;/li>
&lt;li>An IDE to work in (such as Visual Studio Code)&lt;/li>
&lt;li>A generated static site
&lt;ul>
&lt;li>Don&amp;rsquo;t know where to get started? &lt;a class="link" href="https://quibtech.com/p/create-a-static-website/" target="_blank" rel="noopener"
>I have a post on this&lt;/a>!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-github">🔍 Prepare GitHub&lt;/h2>
&lt;h3 id="-create-a-repository">🚩 Create a repository&lt;/h3>
&lt;p>First, let&amp;rsquo;s get started by creating the site&amp;rsquo;s repository. There are a few requirements for this:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Must be your &lt;code>username&lt;/code>, &lt;code>organization&lt;/code> or &lt;code>project&lt;/code> title and end with &lt;code>.github.io&lt;/code>&lt;/p>
&lt;ul>
&lt;li>An example for me would be: &lt;code>thequib.github.io&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Make sure this is set to &lt;code>public&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can initalize a README if you would like&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you&amp;rsquo;re using &lt;em>Jekyll&lt;/em>, it may be a good idea to initalize with a &lt;code>.gitignore&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="-add-gh-pages-branch">➕ Add gh-pages branch&lt;/h4>
&lt;p>Now, in your repository:&lt;/p>
&lt;ul>
&lt;li>Click on the link titled &lt;code>1 branch&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/host-your-website-on-github/branchButton.png"
width="86"
height="37"
srcset="https://thequib.github.io/p/host-your-website-on-github/branchButton_hu4f28305167a0905e9a2a4a4332b28f01_1105_480x0_resize_box_3.png 480w, https://thequib.github.io/p/host-your-website-on-github/branchButton_hu4f28305167a0905e9a2a4a4332b28f01_1105_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="557px"
>&lt;/p>
&lt;ul>
&lt;li>At the top right of the list, click &lt;code>New Branch&lt;/code>&lt;/li>
&lt;li>Name this branch &lt;code>gh-pages&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Create Branch&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="change-repository-settings">Change repository settings&lt;/h3>
&lt;p>Under the name of your repository:&lt;/p>
&lt;ul>
&lt;li>Click the &lt;code>Settings&lt;/code> tab&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/host-your-website-on-github/settingsButton.png"
width="86"
height="35"
srcset="https://thequib.github.io/p/host-your-website-on-github/settingsButton_hu2fe49c549b79b34262c504ecf73c155f_1320_480x0_resize_box_3.png 480w, https://thequib.github.io/p/host-your-website-on-github/settingsButton_hu2fe49c549b79b34262c504ecf73c155f_1320_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/p>
&lt;ul>
&lt;li>On the left sidebar, click &lt;code>Pages&lt;/code>&lt;/li>
&lt;li>Click the &lt;code>Branch&lt;/code> dropdown, and select your newly-created branch, &lt;em>gh-pages&lt;/em>&lt;/li>
&lt;li>Click &lt;code>Save&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="-clone-the-repository">🔽 Clone the repository&lt;/h2>
&lt;p>Now, we&amp;rsquo;ll get the repository down to the local machine to work on it. You can either do this in a GUI with &lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> or by using the &lt;a class="link" href="https://git-scm.com/" target="_blank" rel="noopener"
>Git CLI&lt;/a> with the following command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> directory/to/clone/to/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUsername/yourRepository
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="add-necessary-files">Add necessary files&lt;/h2>
&lt;h3 id="-open-in-your-ide">🔼 Open in your IDE&lt;/h3>
&lt;ul>
&lt;li>It&amp;rsquo;s super easy to work with a git repository in an IDE, such as Visual Studio code. But your favorite IDE should work anyways.&lt;/li>
&lt;li>Open up the directory you cloned your repository to&lt;/li>
&lt;/ul>
&lt;h3 id="-add-site-files">➕ Add site files&lt;/h3>
&lt;p>It would be beneficial to add your hugo project files into this repository (if you are using Hugo). Again, other site generators are similar in workflows.&lt;/p>
&lt;h3 id="-create-your-actions-workflow">➕ Create your Actions workflow&lt;/h3>
&lt;p>A workflow in GitHub is an automation process defined by a &lt;code>yaml&lt;/code> file. These can be anything from super simple, to extremely complex.&lt;/p>
&lt;p>For GitHub Pages, it&amp;rsquo;s pretty simple.&lt;/p>
&lt;ol>
&lt;li>First, create a directory in the root of the repository titled &lt;code>.github&lt;/code>&lt;/li>
&lt;li>In this directory, create another directory titled &lt;code>workflows&lt;/code>&lt;/li>
&lt;li>In &lt;em>this&lt;/em> directory, create a file titled &lt;code>deploy-site.yml&lt;/code>&lt;/li>
&lt;li>This &lt;code>yaml&lt;/code> file will contain all of the instructions GitHub will use to deploy the site
&lt;ul>
&lt;li>An example of this file can be found below:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">pull_request&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-20.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">extended&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">github_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./public&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>But, you can find tons of examples online if this doesn&amp;rsquo;t suit your needs (such as with a different static site generator like Jekyll).&lt;/p>
&lt;h4 id="-what-will-this-action-do">❓ What will this action do?&lt;/h4>
&lt;ol>
&lt;li>In an Ubuntu 20.04 image&lt;/li>
&lt;li>The repository will be checked out&lt;/li>
&lt;li>Hugo will be set up, using the &lt;code>extended&lt;/code> version in case needed&lt;/li>
&lt;li>Site will be built using the command &lt;code>hugo --minify&lt;/code>&lt;/li>
&lt;li>Site will deploy to the repository, using the contents of the &lt;code>./public&lt;/code> directory created from the previous command
&lt;ul>
&lt;li>In essence, the contents of &lt;code>./public&lt;/code> are committed to the &lt;code>gh-pages&lt;/code> branch&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>This will run a deployment action automatically that makes the site live&lt;/li>
&lt;/ol>
&lt;h2 id="-commit">✅ Commit!&lt;/h2>
&lt;p>Now, let&amp;rsquo;s get everything commited to GitHub, and your site should deploy!&lt;/p>
&lt;h2 id="a-few-references">A few references&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener"
>Deploying Hugo with GitHub actions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/actions" target="_blank" rel="noopener"
>GitHub actions documentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/TheQuib/thequib.github.io" target="_blank" rel="noopener"
>This website&amp;rsquo;s repository!&lt;/a>
&lt;ul>
&lt;li>As I use hugo, this contains the necessary actions workflow file and directory structure for Hugo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Manage infrastructure with Terraform Cloud</title><link>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</guid><description>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/featuredImage.png" alt="Featured image of post Manage infrastructure with Terraform Cloud" />&lt;p>Yeah, Terraform is cool and all. But that&amp;rsquo;s typically done locally. The cloud is even better, and free.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="why-would-i-do-this">Why would I do this?&lt;/h2>
&lt;p>There are tons of reasons you may want to deploy with Terraform in the cloud. A few of my personal favorite highlights are&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Less load put on local hardware&lt;/li>
&lt;li>It&amp;rsquo;s still as simple as running locally&lt;/li>
&lt;li>It can be easily automated, especially if &lt;code>git&lt;/code> is used
&lt;ul>
&lt;li>Runs can occur on a push&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>It&amp;rsquo;s &lt;strong>free&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Knowledge with getting Terraform working locally&lt;/li>
&lt;li>An existing and &lt;em>working&lt;/em> Terraform project&lt;/li>
&lt;li>&lt;strong>FREE&lt;/strong> Terraform Cloud Account
&lt;ul>
&lt;li>&lt;a class="link" href="https://app.terraform.io/signup/account" target="_blank" rel="noopener"
>Get this here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="deployment-methods">Deployment Methods&lt;/h2>
&lt;p>As of May 2022, there are 3 methods to deploy code with Terraform Cloud:&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="#-method-1-version-control-workflow" >Version control workflow&lt;/a>
- Store your Terraform configuration in a git repository, and trigger runs based on pull requests and merges&lt;/li>
&lt;li>&lt;a class="link" href="#-method-2-cli-driven-workflow" >CLI-driven workflow&lt;/a>
- Trigger remote Terraform runs from your local command line&lt;/li>
&lt;li>API-driven workflow
- A more advanced option. Integrate Terraform into a larger pipeline using the Terraform API&lt;/li>
&lt;/ol>
&lt;p>For the purposes of this post, we will only be going over the first two: Version control and CLI-driven workflows.&lt;/p>
&lt;p>The reason? They are the most common, especially if you&amp;rsquo;re just getting started with Terraform. Most don&amp;rsquo;t have a need to run API-driven workflows.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-1-version-control-workflow">📕 &lt;strong>Method 1: Version control workflow&lt;/strong>&lt;/h2>
&lt;p>In this post, I will be using GitHub to keep my repositories. Any git provider will work, as long as it is internet-accesible. If you are new to git, this is typically a good place to start.&lt;/p>
&lt;p>This method is best used if you want to automate your workflows, as this can be done via updates to the repository.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="extra-requirements">Extra requirements&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> is a super useful tool for pushing changes to a GitHub repo without the command line.&lt;/li>
&lt;li>If you don&amp;rsquo;t want to use this, and know how to use gitbash, that is perfectly fine too!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>NOTE&lt;/strong>&lt;/em>: If you structure your Terraform projects as I do, your repository created &lt;a class="link" href="#clone-repository-locally" >below&lt;/a>, you will need to update your &lt;code>.gitignore&lt;/code> file to include &lt;code>*.auto.tfvars&lt;/code> so that your credentials are not stored for just anyone to see (such as API tokens)&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="create-a-git-repository">Create a Git repository&lt;/h3>
&lt;p>Login into &lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>GitHub&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a new repository with the &amp;ldquo;New&amp;rdquo; button &lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton.png"
width="105"
height="42"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="New Button"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/li>
&lt;li>Make sure this is set as &lt;code>Public&lt;/code> to make things a bit easier
&lt;ul>
&lt;li>Setting this as private would require setting up SSH keys for Terraform Cloud to read the repo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Give this repository a name, and initialize it with a &lt;code>README&lt;/code> file and choose the &lt;code>Terraform&lt;/code> &lt;code>.gitignore&lt;/code> template.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="clone-repository-locally">Clone repository locally&lt;/h3>
&lt;p>In GitHub desktop, login to your account, and add a new repository by searching for the one you just created.&lt;/p>
&lt;ul>
&lt;li>You&amp;rsquo;ll have to choose a location to store this, it would be best to keep this somewhere simple (such as a shorter path)&lt;/li>
&lt;/ul>
&lt;p>You can also clone the repository via the command line with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /path/to/directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUserName/YourRepositoryName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>Version Control Workflow&lt;/code>&lt;/li>
&lt;li>Get connected to your git provider&lt;/li>
&lt;li>This will open a new window, asking you to sign into your provider&lt;/li>
&lt;li>In the list that shows, select the repository you will be using&lt;/li>
&lt;li>By default, the workspace name will auto-populate with the repo name, probably best to keep this for readability&amp;rsquo;s sake&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="add-variables-to-your-workspace">Add variables to your workspace&lt;/h3>
&lt;p>The best and safest way to store variables for Terraform is to actually use Terraform Cloud. To create variables to use for your project, click on the &lt;code>Variables&lt;/code> tab, and create each variable you have in your local project.&lt;/p>
&lt;p>Now Terraform Cloud is ready!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="add-terraform-configurations-to-repo">Add Terraform configurations to repo&lt;/h3>
&lt;p>Now, find your working terraform project, and copy &lt;em>ALL&lt;/em> of the files from there into your local repository location.&lt;/p>
&lt;p>Once they are copied in, bring GitHub Desktop back up, enter a &amp;ldquo;Commit Summary&amp;rdquo; on the bottom-left:  &lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message.png"
width="314"
height="281"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>And then at the top, push your changes to GitHub:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button.png"
width="340"
height="71"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="478"
data-flex-basis="1149px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="stage-changes-in-terraform-cloud">Stage changes in Terraform Cloud&lt;/h3>
&lt;p>Back in Terraform Cloud, click the &lt;code>Overview&lt;/code> tab, and then &lt;code>Start new plan&lt;/code>&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>Once the plan is complete, it will show you the changes it will make!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="run-plan">Run plan!&lt;/h3>
&lt;p>To run the latest plan, scroll to the bottom of the page and click &lt;code>Confirm and Apply&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan -auto-approve&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Now&amp;hellip; Watch the magic happen.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>If your plan had &lt;code>Outputs&lt;/code>, you can see those values by droping down the &amp;ldquo;Outputs&amp;rdquo; section:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs.png"
width="339"
height="161"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="destroy-infrastructure">Destroy infrastructure&lt;/h3>
&lt;p>To destroy the newly-created infrastructure, scroll back up to the top of the page, click &lt;code>Settings&lt;/code> &amp;gt; &lt;code>Destruction and Deletion&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enter your workspace name to confirm&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the plan finishes, click &lt;code>Confirm and apply&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is the equivalent to running &lt;code>terraform destroy -auto-approve&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-2-cli-driven-workflow">⌨️ &lt;strong>Method 2: CLI-driven workflow&lt;/strong>&lt;/h2>
&lt;p>This method uses the local command-line to trigger workflows in Terraform Cloud. A command that is run locally will actually perform in the cloud, showing a &amp;ldquo;remote window&amp;rdquo; of the remote CLI locally. You&amp;rsquo;ll see what I mean shortly&amp;hellip;&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-ready">Get Ready&lt;/h3>
&lt;p>As always for Terraform, &lt;code>cd&lt;/code> into your project directory.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-authenticated">Get authenticated&lt;/h3>
&lt;p>So first, once you have your &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud&lt;/a> account, we&amp;rsquo;ll need to log into to the terraform CLI.&lt;/p>
&lt;p>To do this, run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will prompt you to type &lt;code>yes&lt;/code> and automatically open a web browser to the page to create an access token.&lt;/p>
&lt;ul>
&lt;li>On this page, give the token a name, and hit create&lt;/li>
&lt;li>Then copy the token and paste it into your terminal session
&lt;ul>
&lt;li>&lt;em>Note&lt;/em>: This is the only time the token will show&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then you&amp;rsquo;re logged in!&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud-1">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>CLI-driven workflow&lt;/code>&lt;/li>
&lt;li>Name your workspace &lt;code>Terraform-CLI-Test&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;li>Take note of the &lt;code>Example code&lt;/code> for CLI-driven runs&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="create-terraform-cloud-file">Create Terraform Cloud file&lt;/h3>
&lt;p>Now, we need a way to tell our local Terraform installation run the configurations in the cloud.&lt;/p>
&lt;p>To do this, create a file called &lt;code>TerraformCloud.tf&lt;/code>, and add the example code from &lt;a class="link" href="#set-up-terraform-cloud-1" >earlier&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cloud&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">organization&lt;/span> = &lt;span class="s2">&amp;#34;YourOrganization&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">workspaces&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="s2">&amp;#34;Terraform-CLI-Test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>Note&lt;/em>: If using the above example, make sure to change the organization name to your own&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="test-er-out">Test &amp;rsquo;er out&lt;/h3>
&lt;p>Now, this should be pretty much it. Assuming your project works correctly, you can now run all of the regular Terraform CLI commands locally, and they will execute in the cloud.&lt;/p>
&lt;p>To test this out, try running &lt;code>terraform plan&lt;/code> and check the web interface to see the plan in action.&lt;/p>
&lt;p>Once that is all good to go, run &lt;code>terraform apply -auto-approve&lt;/code> and watch the magic happen!&lt;/p>
&lt;p> &lt;/p>
&lt;p>If that is all good, and you want to destroy it, just run &lt;code>terraform destroy -auto-approve&lt;/code>.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Doing jobs with Terraform in the cloud is pretty cool. It takes the load off of local hardware, and allows the automation of workflows to be performed, and is just plain fun to use.&lt;/p>
&lt;p>Hopefully this helped at least get your foot in the door for the wonders of Terraform Cloud, and feel free to comment if you have any questions!&lt;/p></description></item></channel></rss>