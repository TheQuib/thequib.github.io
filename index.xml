<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>QuibTech</title><link>https://thequib.github.io/</link><description>Recent content on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>100 Days of Homelab</title><link>https://thequib.github.io/p/100-days-of-homelab/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/100-days-of-homelab/</guid><description>&lt;img src="https://thequib.github.io/p/100-days-of-homelab/featuredImage.png" alt="Featured image of post 100 Days of Homelab" />&lt;h2 id="-the-challenge">📆 The challenge!&lt;/h2>
&lt;p>If my calculations are correct, this extends out to September 20, 2022.&lt;/p>
&lt;p>This challenge calls for 100 days of homelabbing from everyone! Dedicating at least 1 hour a day to learning something new, adding something, figuring something out&amp;hellip; anything!&lt;/p>
&lt;p>The official website can be found &lt;a class="link" href="https://100daysofhomelab.com" target="_blank" rel="noopener"
>here&lt;/a>!&lt;/p>
&lt;h2 id="-keeping-track-">📝 Keeping track 📱&lt;/h2>
&lt;ul>
&lt;li>This post is meant to keep track of my plans for the next 100 days. I will be adding and changing the different things I will be doing as I go, with a few starters for now.&lt;/li>
&lt;li>I will also be posting to social media with all of my accomplishments for the day&lt;/li>
&lt;/ul>
&lt;h2 id="-roadmap">🛣️ Roadmap&lt;/h2>
&lt;p>With no particular dates or order, here&amp;rsquo;s what I&amp;rsquo;m planning on accomplishing:&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> The constant improvement and documentation on this website (completed projects)
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Fix Favicon not showing on every page except home&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A self-hosted GitHub runner for pushing out this site&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> &amp;ldquo;Production&amp;rdquo; Kubernetes cluster (k3s)
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> With running services&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Custom Linux images on Proxmox with &lt;a class="link" href="https://www.packer.io/" target="_blank" rel="noopener"
>Packer&lt;/a>&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> &lt;a class="link" href="https://www.hashicorp.com/products/terraform" target="_blank" rel="noopener"
>Terraform&lt;/a> projects that create virtual machines from the previous Packer image&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Getting to know the Cloudflare platform (and it&amp;rsquo;s dashboard) a little better, and taking advantage of their free products&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Making a good [and secure] mix between local and cloud-hosted services by use of cloudflare DNS under a single domain&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> SSH Key &lt;em>everything&lt;/em>&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Set up IPMI port on Proxmox host&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Run updates on all servers&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Take a dive into Jekyll and other static site generators (as I primarily use Hugo)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> SnipeIT for inventory of all the things&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Automate Cloudflare DNS records using host data from Traefik&amp;rsquo;s API&lt;/li>
&lt;/ul></description></item><item><title>Manage infrastructure with Terraform Cloud</title><link>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</guid><description>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/featuredImage.png" alt="Featured image of post Manage infrastructure with Terraform Cloud" />&lt;p>Yeah, Terraform is cool and all. But that&amp;rsquo;s typically done locally. The cloud is even better, and free.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="why-would-i-do-this">Why would I do this?&lt;/h2>
&lt;p>There are tons of reasons you may want to deploy with Terraform in the cloud. A few of my personal favorite highlights are&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Less load put on local hardware&lt;/li>
&lt;li>It&amp;rsquo;s still as simple as running locally&lt;/li>
&lt;li>It can be easily automated, especially if &lt;code>git&lt;/code> is used
&lt;ul>
&lt;li>Runs can occur on a push&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>It&amp;rsquo;s &lt;strong>free&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Knowledge with getting Terraform working locally&lt;/li>
&lt;li>An existing and &lt;em>working&lt;/em> Terraform project&lt;/li>
&lt;li>&lt;strong>FREE&lt;/strong> Terraform Cloud Account
&lt;ul>
&lt;li>&lt;a class="link" href="https://app.terraform.io/signup/account" target="_blank" rel="noopener"
>Get this here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="deployment-methods">Deployment Methods&lt;/h2>
&lt;p>As of May 2022, there are 3 methods to deploy code with Terraform Cloud:&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="#-method-1-version-control-workflow" >Version control workflow&lt;/a>
- Store your Terraform configuration in a git repository, and trigger runs based on pull requests and merges&lt;/li>
&lt;li>&lt;a class="link" href="#-method-2-cli-driven-workflow" >CLI-driven workflow&lt;/a>
- Trigger remote Terraform runs from your local command line&lt;/li>
&lt;li>API-driven workflow
- A more advanced option. Integrate Terraform into a larger pipeline using the Terraform API&lt;/li>
&lt;/ol>
&lt;p>For the purposes of this post, we will only be going over the first two: Version control and CLI-driven workflows.&lt;/p>
&lt;p>The reason? They are the most common, especially if you&amp;rsquo;re just getting started with Terraform. Most don&amp;rsquo;t have a need to run API-driven workflows.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-1-version-control-workflow">📕 &lt;strong>Method 1: Version control workflow&lt;/strong>&lt;/h2>
&lt;p>In this post, I will be using GitHub to keep my repositories. Any git provider will work, as long as it is internet-accesible. If you are new to git, this is typically a good place to start.&lt;/p>
&lt;p>This method is best used if you want to automate your workflows, as this can be done via updates to the repository.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="extra-requirements">Extra requirements&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> is a super useful tool for pushing changes to a GitHub repo without the command line.&lt;/li>
&lt;li>If you don&amp;rsquo;t want to use this, and know how to use gitbash, that is perfectly fine too!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>NOTE&lt;/strong>&lt;/em>: If you structure your Terraform projects as I do, your repository created &lt;a class="link" href="#clone-repository-locally" >below&lt;/a>, you will need to update your &lt;code>.gitignore&lt;/code> file to include &lt;code>*.auto.tfvars&lt;/code> so that your credentials are not stored for just anyone to see (such as API tokens)&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="create-a-git-repository">Create a Git repository&lt;/h3>
&lt;p>Login into &lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>GitHub&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a new repository with the &amp;ldquo;New&amp;rdquo; button &lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton.png"
width="105"
height="42"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="New Button"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/li>
&lt;li>Make sure this is set as &lt;code>Public&lt;/code> to make things a bit easier
&lt;ul>
&lt;li>Setting this as private would require setting up SSH keys for Terraform Cloud to read the repo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Give this repository a name, and initialize it with a &lt;code>README&lt;/code> file and choose the &lt;code>Terraform&lt;/code> &lt;code>.gitignore&lt;/code> template.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="clone-repository-locally">Clone repository locally&lt;/h3>
&lt;p>In GitHub desktop, login to your account, and add a new repository by searching for the one you just created.&lt;/p>
&lt;ul>
&lt;li>You&amp;rsquo;ll have to choose a location to store this, it would be best to keep this somewhere simple (such as a shorter path)&lt;/li>
&lt;/ul>
&lt;p>You can also clone the repository via the command line with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /path/to/directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUserName/YourRepositoryName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>Version Control Workflow&lt;/code>&lt;/li>
&lt;li>Get connected to your git provider&lt;/li>
&lt;li>This will open a new window, asking you to sign into your provider&lt;/li>
&lt;li>In the list that shows, select the repository you will be using&lt;/li>
&lt;li>By default, the workspace name will auto-populate with the repo name, probably best to keep this for readability&amp;rsquo;s sake&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="add-variables-to-your-workspace">Add variables to your workspace&lt;/h3>
&lt;p>The best and safest way to store variables for Terraform is to actually use Terraform Cloud. To create variables to use for your project, click on the &lt;code>Variables&lt;/code> tab, and create each variable you have in your local project.&lt;/p>
&lt;p>Now Terraform Cloud is ready!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="add-terraform-configurations-to-repo">Add Terraform configurations to repo&lt;/h3>
&lt;p>Now, find your working terraform project, and copy &lt;em>ALL&lt;/em> of the files from there into your local repository location.&lt;/p>
&lt;p>Once they are copied in, bring GitHub Desktop back up, enter a &amp;ldquo;Commit Summary&amp;rdquo; on the bottom-left:  &lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message.png"
width="314"
height="281"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>And then at the top, push your changes to GitHub:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button.png"
width="340"
height="71"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="478"
data-flex-basis="1149px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="stage-changes-in-terraform-cloud">Stage changes in Terraform Cloud&lt;/h3>
&lt;p>Back in Terraform Cloud, click the &lt;code>Overview&lt;/code> tab, and then &lt;code>Start new plan&lt;/code>&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>Once the plan is complete, it will show you the changes it will make!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="run-plan">Run plan!&lt;/h3>
&lt;p>To run the latest plan, scroll to the bottom of the page and click &lt;code>Confirm and Apply&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan -auto-approve&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Now&amp;hellip; Watch the magic happen.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>If your plan had &lt;code>Outputs&lt;/code>, you can see those values by droping down the &amp;ldquo;Outputs&amp;rdquo; section:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs.png"
width="339"
height="161"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="destroy-infrastructure">Destroy infrastructure&lt;/h3>
&lt;p>To destroy the newly-created infrastructure, scroll back up to the top of the page, click &lt;code>Settings&lt;/code> &amp;gt; &lt;code>Destruction and Deletion&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enter your workspace name to confirm&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the plan finishes, click &lt;code>Confirm and apply&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is the equivalent to running &lt;code>terraform destroy -auto-approve&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-2-cli-driven-workflow">⌨️ &lt;strong>Method 2: CLI-driven workflow&lt;/strong>&lt;/h2>
&lt;p>This method uses the local command-line to trigger workflows in Terraform Cloud. A command that is run locally will actually perform in the cloud, showing a &amp;ldquo;remote window&amp;rdquo; of the remote CLI locally. You&amp;rsquo;ll see what I mean shortly&amp;hellip;&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-ready">Get Ready&lt;/h3>
&lt;p>As always for Terraform, &lt;code>cd&lt;/code> into your project directory.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-authenticated">Get authenticated&lt;/h3>
&lt;p>So first, once you have your &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud&lt;/a> account, we&amp;rsquo;ll need to log into to the terraform CLI.&lt;/p>
&lt;p>To do this, run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will prompt you to type &lt;code>yes&lt;/code> and automatically open a web browser to the page to create an access token.&lt;/p>
&lt;ul>
&lt;li>On this page, give the token a name, and hit create&lt;/li>
&lt;li>Then copy the token and paste it into your terminal session
&lt;ul>
&lt;li>&lt;em>Note&lt;/em>: This is the only time the token will show&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then you&amp;rsquo;re logged in!&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud-1">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>CLI-driven workflow&lt;/code>&lt;/li>
&lt;li>Name your workspace &lt;code>Terraform-CLI-Test&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;li>Take note of the &lt;code>Example code&lt;/code> for CLI-driven runs&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="create-terraform-cloud-file">Create Terraform Cloud file&lt;/h3>
&lt;p>Now, we need a way to tell our local Terraform installation run the configurations in the cloud.&lt;/p>
&lt;p>To do this, create a file called &lt;code>TerraformCloud.tf&lt;/code>, and add the example code from &lt;a class="link" href="#set-up-terraform-cloud-1" >earlier&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cloud&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">organization&lt;/span> = &lt;span class="s2">&amp;#34;YourOrganization&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">workspaces&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="s2">&amp;#34;Terraform-CLI-Test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>Note&lt;/em>: If using the above example, make sure to change the organization name to your own&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="test-er-out">Test &amp;rsquo;er out&lt;/h3>
&lt;p>Now, this should be pretty much it. Assuming your project works correctly, you can now run all of the regular Terraform CLI commands locally, and they will execute in the cloud.&lt;/p>
&lt;p>To test this out, try running &lt;code>terraform plan&lt;/code> and check the web interface to see the plan in action.&lt;/p>
&lt;p>Once that is all good to go, run &lt;code>terraform apply -auto-approve&lt;/code> and watch the magic happen!&lt;/p>
&lt;p> &lt;/p>
&lt;p>If that is all good, and you want to destroy it, just run &lt;code>terraform destroy -auto-approve&lt;/code>.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Doing jobs with Terraform in the cloud is pretty cool. It takes the load off of local hardware, and allows the automation of workflows to be performed, and is just plain fun to use.&lt;/p>
&lt;p>Hopefully this helped at least get your foot in the door for the wonders of Terraform Cloud, and feel free to comment if you have any questions!&lt;/p></description></item><item><title>Automate server deployment in Linode</title><link>https://thequib.github.io/p/automate-server-deployment-in-linode/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/automate-server-deployment-in-linode/</guid><description>&lt;img src="https://thequib.github.io/p/automate-server-deployment-in-linode/featuredImage.png" alt="Featured image of post Automate server deployment in Linode" />&lt;p>In case you&amp;rsquo;re not aware, Terraform is pretty cool. It is super powerful, providing the ability to provision infrastructure in seconds using code. Linode and it&amp;rsquo;s Terraform provider are no exception to this ability. Let&amp;rsquo;s dive into that&amp;hellip;&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A machine with Terraform installed&lt;/li>
&lt;li>A Linode account
&lt;ul>
&lt;li>With an API token, &lt;a class="link" href="https://www.linode.com/docs/products/tools/linode-api/guides/get-access-token/" target="_blank" rel="noopener"
>here&amp;rsquo;s how you can get this&lt;/a>
&lt;ul>
&lt;li>This will need at least &lt;code>Read/Write&lt;/code> access to &lt;code>Linodes&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>With the ability to create nodes (such as with free credits, or with an added bank account)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>If you do need to add your bank account, don&amp;rsquo;t worry! Because of the awesomeness of Terraform, &lt;em>this will only cost a few cents&lt;/em> as long as you &lt;a class="link" href="#destroy-infrastructure" >destroy the infrastructure&lt;/a> when it&amp;rsquo;s all said and done.&lt;/p>
&lt;hr>
&lt;h2 id="github-repo">GitHub Repo&lt;/h2>
&lt;p>All configuration files and example files can be found on my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture&lt;/a> repo, under &lt;a class="link" href="https://github.com/TheQuib/overture/tree/master/Terraform/Compute/Linode/SimpleLinode" target="_blank" rel="noopener"
>Terraform/Compute/Linode/SimpleLinode&lt;/a>.&lt;/p>
&lt;h2 id="create-some-terraform-files">Create some Terraform files&lt;/h2>
&lt;p>First thing&amp;rsquo;s first, let&amp;rsquo;s create the Terraform files that will define this project.&lt;/p>
&lt;ul>
&lt;li>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>You&amp;rsquo;ll want to make sure you&amp;rsquo;re in an empty directory&lt;/em>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="providertf">&lt;code>provider.tf&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>Defines the necessary provider to use: &lt;a class="link" href="https://registry.terraform.io/providers/linode/linode/latest" target="_blank" rel="noopener"
>linode/linode&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">required_version&lt;/span> = &lt;span class="s2">&amp;#34;&amp;gt;= 0.13&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">required_providers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">linode&lt;/span> = &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">source&lt;/span> = &lt;span class="s2">&amp;#34;linode/linode&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">version&lt;/span> = &lt;span class="s2">&amp;#34;1.27.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Configure the Linode Provider
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">provider&lt;/span> &lt;span class="s2">&amp;#34;linode&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">token&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="variablestf">&lt;code>variables.tf&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>Defines the variables Terraform will use&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="nx">linode_token&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;API token created in linode with access to desired resources&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Instance Settings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">variable&lt;/span> &lt;span class="nx">linode_instance_label&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Label for the Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="nx">linode_instance_image&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Image for the Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_region&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Region to place the Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_type&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Type of Linode instance to create&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_ssh_keys&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> =&lt;span class="nb"> list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;List of authorized SSH keys to install on the instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;linode_instance_root_pass&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">description&lt;/span> = &lt;span class="s2">&amp;#34;Root password for Linode instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="credentialsautotfvars">&lt;code>credentials.auto.tfvars&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>Places values on the variables
&lt;ul>
&lt;li>You will need to fill in these values as you see fit, make sure to provide &lt;strong>your&lt;/strong> &lt;a class="link" href="https://www.linode.com/docs/products/tools/linode-api/guides/get-access-token/" target="_blank" rel="noopener"
>Linode token&lt;/a>&lt;/li>
&lt;li>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>This should not be a tracked file for anyone to see, it contains sensitive information&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="na">linode_token&lt;/span> = &lt;span class="s2">&amp;#34;yourLinodeToken&amp;#34;&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Instance settings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_label&lt;/span> = &lt;span class="s2">&amp;#34;terraformInstance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">linode_instance_image&lt;/span> = &lt;span class="s2">&amp;#34;linode/ubuntu22.04&amp;#34;&lt;/span>&lt;span class="c1"> # https://api.linode.com/v4/images
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_region&lt;/span> = &lt;span class="s2">&amp;#34;us-east&amp;#34;&lt;/span>&lt;span class="c1"> # https://api.linode.com/v4/regions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_type&lt;/span> = &lt;span class="s2">&amp;#34;g6-nanode-1&amp;#34;&lt;/span>&lt;span class="c1"> # https://api.linode.com/v4/linode/types
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">linode_instance_ssh_keys&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ssh-rsa Key1AAAA...Gw== user@example.local&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;ssh-rsa Key2BBBB...Gw== user2@example.local&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">linode_instance_root_pass&lt;/span> = &lt;span class="s2">&amp;#34;yourRootPassHere&amp;#34;&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Minecraft settings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="na">minecraft_server_url&lt;/span> = &lt;span class="s2">&amp;#34;https://launcher.mojang.com/v1/objects/c8f83c5655308435b3dcf03c06d9fe8740a77469/server.jar&amp;#34;&lt;/span>&lt;span class="c1"> # From https://www.minecraft.net/en-us/download/server
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="define-the-linode_instance">Define the linode_instance&lt;/h2>
&lt;p>Now, the big (yet small) file that will do the cool stuff:&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="createsimpleinstancetf">&lt;code>createSimpleInstance.tf&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;linode_instance&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;web&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">label&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">image&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">region&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_region&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_type&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #authorized_keys = [&amp;#34;ssh-rsa AAAA...Gw== user@example.local&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="na">root_pass&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">linode_instance_root_pass&lt;/span>&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #group = &amp;#34;foo&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #tags = [ &amp;#34;foo&amp;#34; ]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #swap_size = 256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"> #private_ip = true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>Note that there are a few commented lines in case you would like to use them.&lt;/em>&lt;/p>
&lt;p>This file will take the values of the variables set in &lt;a class="link" href="#credentialsautotfvars" >credentials.auto.tfvars&lt;/a> and create a linode instance based on those values.&lt;/p>
&lt;h2 id="apply-configuration">Apply configuration&lt;/h2>
&lt;p>Now, you&amp;rsquo;re ready to apply!&lt;/p>
&lt;p>Go ahead and run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform plan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To see what Terraform will do&lt;/p>
&lt;p>And run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform apply -auto-approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To actually make the changes in Linode&lt;/p>
&lt;h2 id="check-your-work">Check your work&lt;/h2>
&lt;p>Now, log into the Linode console, and watch the magic happen! You should see a new Linode create with the settings you have in the &lt;a class="link" href="#credentialsautotfvars" >credentials.auto.tfvars&lt;/a> file.&lt;/p>
&lt;h2 id="destroy-infrastructure">Destroy Infrastructure&lt;/h2>
&lt;p>If you&amp;rsquo;re like me, you may be paying for this to be up and running. And unless you want to use this server you just created for something, you&amp;rsquo;ll want to destroy it so no extra charges come into your account.&lt;/p>
&lt;p>To destroy your infrastructure with Terraform, run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform destroy -auto-approve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And you can watch it magically disappear!&lt;/p>
&lt;p> &lt;/p></description></item><item><title>Stop using weird ports for your Minecraft Servers</title><link>https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/</link><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/</guid><description>&lt;img src="https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/featuredImage.png" alt="Featured image of post Stop using weird ports for your Minecraft Servers" />&lt;h1 id="the-scoop">The scoop&lt;/h1>
&lt;p>When I host Minecraft servers for my friends, I seriously hate having to tell them to connect to &lt;code>example.com:25567&lt;/code> or &lt;code>example.com:25568&lt;/code>.&lt;/p>
&lt;p>Luckily, there is an amazing solution for this: &lt;em>Reverse Proxies&lt;/em>&lt;/p>
&lt;p> &lt;/p>
&lt;p>I tried doing this with &lt;a class="link" href="https://traefik.io/" target="_blank" rel="noopener"
>Traefik&lt;/a> at first (which is my preferred &lt;code>http&lt;/code> reverse proxy), but I had zero luck, even after hours of scouring the internet for help.&lt;/p>
&lt;p>So as an alternative, I found &lt;a class="link" href="https://github.com/haveachin/infrared" target="_blank" rel="noopener"
>infrared&lt;/a>, a reverse proxy for Minecraft by &lt;a class="link" href="https://github.com/haveachin" target="_blank" rel="noopener"
>Hendrik Schlehlein&lt;/a>, built with &lt;a class="link" href="https://go.dev/" target="_blank" rel="noopener"
>Go&lt;/a>.&lt;/p>
&lt;h1 id="what-will-we-be-doing">What will we be doing?&lt;/h1>
&lt;p>By the end of this, we will have a working reverse proxy running in a docker container, and two minecraft servers sitting behind &lt;code>mc-server1.example.com&lt;/code> and &lt;code>mc-server2.example.com&lt;/code>. Both of these will be accessed using the default minecraft port of &lt;code>25565&lt;/code>.&lt;/p>
&lt;h1 id="example-files">Example files&lt;/h1>
&lt;p>If you want to just view some example files, check out my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture&lt;/a> repository, under the &lt;code>Docker/Infrared&lt;/code> directory.&lt;/p>
&lt;hr>
&lt;h1 id="before-you-start">Before You Start&lt;/h1>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A virtual machine with Ubuntu 22.04 or later
&lt;ul>
&lt;li>Or bare metal, I won&amp;rsquo;t judge&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A bit of knowledge in the ways of &lt;code>Docker&lt;/code>
&lt;ul>
&lt;li>i.e. you will need &lt;code>Docker&lt;/code> installed on your server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>At least 2 working Minecraft servers&lt;/li>
&lt;li>Ability to edit DNS records&lt;/li>
&lt;/ul>
&lt;h2 id="optional">Optional&lt;/h2>
&lt;ul>
&lt;li>Ability to port forward on your router (if you want to access outside of your network)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="set-up-proxy-server">Set up Proxy Server&lt;/h1>
&lt;h2 id="create-proxy-server">Create Proxy Server&lt;/h2>
&lt;p>To get it all started, we&amp;rsquo;ll need a server that will act as a proxy.&lt;/p>
&lt;ul>
&lt;li>This can be a new virtual machine, or existing. It just needs to have &lt;code>Docker&lt;/code> installed&lt;/li>
&lt;li>Make sure you take note of its IP Address
&lt;ul>
&lt;li>For this example, we&amp;rsquo;ll use &lt;code>192.168.1.10&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="create-necessary-files-and-directories">Create necessary files and directories&lt;/h2>
&lt;p>&lt;code>cd&lt;/code> to a directory that you want to store your files in, your current user&amp;rsquo;s &lt;code>home&lt;/code> directory is probably best&lt;/p>
&lt;p>Create the necessary directories and files:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir infrared
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch docker-compose.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir configs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> configs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch mc-server1.example.com.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch mc-server2.example.com.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ../../
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-these-commands-do">What these commands do&lt;/h3>
&lt;ul>
&lt;li>Create a project folder&lt;/li>
&lt;li>Create &lt;code>docker-compose&lt;/code> file to deploy from&lt;/li>
&lt;li>Creates a &lt;code>data/configs&lt;/code> directory to store configurations&lt;/li>
&lt;li>Creates two configuration files, one for each server name listed under &lt;a class="link" href="#what-will-we-be-doing" >What will we be doing?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="edit-docker-composeyml">Edit docker-compose.yml&lt;/h2>
&lt;p>Now, you&amp;rsquo;ll want to edit the &lt;code>docker-compose.yml&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nano docker-compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And paste in the following text:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">infrared&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ghcr.io/haveachin/infrared:1.3.3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">infrared&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">unless-stopped&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stdin_open&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tty&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;25565:25565/tcp&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;./data/configs:/configs&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">expose&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;25565&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">INFRARED_CONFIG_PATH&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/configs&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-this-bit-of-yaml-does">What this bit of Yaml does&lt;/h3>
&lt;ul>
&lt;li>Uses docker-compose version 3&lt;/li>
&lt;li>Creates a service called &lt;code>infrared&lt;/code>
&lt;ul>
&lt;li>With the image &lt;code>ghcr.io/haveachin/infrared:1.3.3&lt;/code>&lt;/li>
&lt;li>With a name of &lt;code>infrared&lt;/code>&lt;/li>
&lt;li>Don&amp;rsquo;t restart the container unless we (the admin) stops it&lt;/li>
&lt;li>Open up a port&lt;/li>
&lt;li>Define a location for configurations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="edit-configurations">Edit configurations&lt;/h2>
&lt;p>Now, go into the configurations directory&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /data/configs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You may want to change the names of the created files to match the &lt;code>FQDN&lt;/code>&amp;rsquo;s of your actual servers.&lt;/p>
&lt;p>I will continue to use the names &lt;code>mc-server1.example.com&lt;/code> and &lt;code>mc-server2.example.com&lt;/code> for this tutorial, however.&lt;/p>
&lt;p>Edit each file and include the following contents:&lt;/p>
&lt;h3 id="mc-serverexamplecomjson">&lt;code>mc-server.example.com.json&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domainName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mc-server1.example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;proxyTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.0.11:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listenTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;disconnectMessage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Goodbye&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;offlineStatus&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;motd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Server is currently offline :(&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mc-server2examplecomjson">&lt;code>mc-server2.example.com.json&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domainName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mc-server2.example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;proxyTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.0.12:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listenTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;disconnectMessage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Goodbye&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;offlineStatus&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;motd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Server is currently offline :(&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="configuration-note">Configuration note&lt;/h3>
&lt;p>Make sure that you change &lt;code>domainName&lt;/code> to your server&amp;rsquo;s &lt;code>FQDN&lt;/code> and the &lt;code>proxyTo&lt;/code> address and port to match your Minecraft server.&lt;/p>
&lt;hr>
&lt;h1 id="set-up-dns">Set up DNS&lt;/h1>
&lt;p>Reverse Proxies rely on DNS to route the incoming connection to the intended server.&lt;/p>
&lt;p>Let&amp;rsquo;s say, for this example we are going to proxy 2 servers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>mc-server1.example.com&lt;/code>&lt;/li>
&lt;li>&lt;code>mc-server2.example.com&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>On your DNS server, create an A record for each of the servers, pointed at your proxy server. For eaxmple:&lt;/p>
&lt;ul>
&lt;li>&lt;code>A&lt;/code>: &lt;code>mc-server1.example.com&lt;/code> &amp;gt; &lt;code>192.168.1.10&lt;/code>&lt;/li>
&lt;li>&lt;code>A&lt;/code>: &lt;code>mc-server2.example.com&lt;/code> &amp;gt; &lt;code>192.168.1.10&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="test-er-out">Test &amp;rsquo;er out&lt;/h1>
&lt;h2 id="spin-up-your-container">Spin up your container&lt;/h2>
&lt;p>Now you&amp;rsquo;re ready to spin up your container!&lt;/p>
&lt;p>Make sure you&amp;rsquo;re in the same directory as your &lt;code>docker-compose.yml&lt;/code> file, and run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="launch-minecraft-and-check-your-work">Launch Minecraft, and check your work&lt;/h2>
&lt;p>Now, launch Minecraft, head over to the multiplayer menu, and add servers that point to the &lt;code>FQDN&lt;/code>s for your A records created in &lt;a class="link" href="#set-up-dns" >Set up DNS&lt;/a>.&lt;/p>
&lt;p>If you did everything correctly, these should be showing as online! (If not make sure they&amp;rsquo;re running first 😉)&lt;/p></description></item><item><title>About</title><link>https://thequib.github.io/about/</link><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/about/</guid><description>&lt;img src="https://thequib.github.io/about/featuredImage.png" alt="Featured image of post About" />&lt;h2 id="-hi-my-name-is-quinn">👋 Hi, my name is Quinn.&lt;/h2>
&lt;p>I&amp;rsquo;m a network administrator at a public school district, where I provide user support and systems administration of both Linux and Windows systems. I also dabble in all sorts of IT related fields and an avid proponent of open source.&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener"
>&lt;img src="https://github-readme-stats.vercel.app/api?username=TheQuib&amp;amp;show_icons=true&amp;amp;theme=radical"
loading="lazy"
alt="Quinn&amp;rsquo;s GitHub stats"
>&lt;/a>&lt;/p>
&lt;h3 id="here-youll-find">Here, you&amp;rsquo;ll find&amp;hellip;&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="#-interests" >My Interests&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#-currently-working-on" >Current Projects&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#-currently-learning" >Current Learning Adventures&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#-experience" >My Work Experience&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#-education" >My Education&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#-attributions" >Some Attributions&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-interests">😎 Interests&lt;/h2>
&lt;ul>
&lt;li>Homelabbing
&lt;ul>
&lt;li>Primarily running Proxmox&lt;/li>
&lt;li>Dabbling in Kubernetes&lt;/li>
&lt;li>Love for self-hosted projects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Networking
&lt;ul>
&lt;li>I mean, this is in my current job title&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Web Design
&lt;ul>
&lt;li>More of a side thing, I definitely find it fun&lt;/li>
&lt;li>Exceptional in WordPress and Hugo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Drone Flying
&lt;ul>
&lt;li>With my DJI Mini 2, I have a great love for recreational flying&lt;/li>
&lt;li>With hopes of getting the FAA Part 107 License&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="-currently-working-on">🔭 Currently Working On&lt;/h2>
&lt;ul>
&lt;li>Finalizing my &lt;a class="link" href="https:/quibtech.com" target="_blank" rel="noopener"
>website&lt;/a>!&lt;/li>
&lt;li>Finishing out my college degree from &lt;a class="link" href="https://pct.edu" target="_blank" rel="noopener"
>Pennsylvania College of Technology&lt;/a>
&lt;ul>
&lt;li>Majoring in &lt;a class="link" href="https://www.pct.edu/academics/et/information-technology/network-administration-engineering-technology" target="_blank" rel="noopener"
>Network Administration and Engineering Technology&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="-currently-learning">🌱 Currently learning&lt;/h2>
&lt;ul>
&lt;li>Kubernetes&lt;/li>
&lt;li>Grafana&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-experience">📜 Experience&lt;/h2>
&lt;h3 id="jersey-shore-area-school-district">Jersey Shore Area School District&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.jsasd.org" target="_blank" rel="noopener"
>jsasd.org&lt;/a>&lt;/p>
&lt;p>&lt;strong>Network Technician&lt;/strong>&lt;/p>
&lt;p>&lt;em>2020 - Present&lt;/em>&lt;/p>
&lt;p>&lt;strong>Information Technology Intern&lt;/strong>&lt;/p>
&lt;p>&lt;em>2018 - 2020&lt;/em>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="west-branch-arts-consortium">West Branch Arts Consortium&lt;/h3>
&lt;p>&lt;a class="link" href="http://westbrancharts.org" target="_blank" rel="noopener"
>westbrancharts.org&lt;/a>&lt;/p>
&lt;p>&lt;strong>Website Designer&lt;/strong>&lt;/p>
&lt;p>&lt;em>2019 - Present&lt;/em>&lt;/p>
&lt;hr>
&lt;h2 id="-education">🎓 Education&lt;/h2>
&lt;h3 id="pennsylvania-college-of-technology">Pennsylvania College of Technology&lt;/h3>
&lt;p>&lt;em>&lt;strong>Bachelor&amp;rsquo;s Degree, Network Administration and Engineering Technology&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;em>2019 - Present&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Associates Degree, Computer and Information Sciences&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;em>2019-2021&lt;/em>&lt;/p>
&lt;hr>
&lt;h2 id="-attributions">🤝 Attributions&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener"
>GitHub Stats&lt;/a> from &lt;a class="link" href="#hi-there-my-name-is-quinn" >above&lt;/a>.&lt;/p></description></item><item><title>Manage Discord Servers with Terraform</title><link>https://thequib.github.io/p/manage-discord-servers-with-terraform/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-discord-servers-with-terraform/</guid><description>&lt;img src="https://thequib.github.io/p/manage-discord-servers-with-terraform/featuredImage.png" alt="Featured image of post Manage Discord Servers with Terraform" />&lt;p>Something everyone is dying to do&amp;hellip; Code-driven Discord server management.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="requirements">Requirements&lt;/h1>
&lt;ul>
&lt;li>Discord API Token
&lt;ul>
&lt;li>&lt;a class="link" href="#obtain-discord-api-token" >Learn how to get this&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Some knowledge with Terraform (to understand what is going on)&lt;/li>
&lt;li>Terraform 0.13 and up&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="source-code">Source Code&lt;/h1>
&lt;p>All of my code and related files can be found in my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture Repo&lt;/a>.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="obtain-discord-api-token">Obtain Discord API Token&lt;/h1>
&lt;ul>
&lt;li>Head over to the &lt;a class="link" href="https://discord.com/developers/" target="_blank" rel="noopener"
>Discord Developer Portal&lt;/a>&lt;/li>
&lt;li>Get logged in&lt;/li>
&lt;li>Create a new application&lt;/li>
&lt;li>Name this whatever you want
&lt;ul>
&lt;li>Ex: &amp;ldquo;Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Once in your new application, head over to the &amp;ldquo;Bot&amp;rdquo; section&lt;/li>
&lt;li>Click &amp;ldquo;Add Bot&amp;rdquo;&lt;/li>
&lt;li>Give the bot a name (or leave the default name)
&lt;ul>
&lt;li>Ex: &amp;ldquo;Mr. Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click the &amp;ldquo;Reset Token&amp;rdquo; button
&lt;ul>
&lt;li>This will give you your token, and is the only time it will be displayed&lt;/li>
&lt;li>Make sure you keep this in a safe place, and treat it like a password&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use this token in your &lt;a class="link" href="credentials.auto.tfvars.example" >credentials.auto.tfvars&lt;/a> file&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="terraform-provider-information">Terraform Provider Information&lt;/h1>
&lt;p>The provider used here is &lt;a class="link" href="https://registry.terraform.io/providers/Chaotic-Logic/discord/latest" target="_blank" rel="noopener"
>discord&lt;/a> by &lt;a class="link" href="https://registry.terraform.io/namespaces/Chaotic-Logic" target="_blank" rel="noopener"
>Chaotic Logic&lt;/a> (&lt;a class="link" href="https://github.com/Chaotic-Logic/terraform-provider-discord" target="_blank" rel="noopener"
>Source&lt;/a>).&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="get-started">Get started&lt;/h1>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>Make sure you have your Discord API token ready&lt;/em>&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="prepare-terraform">Prepare Terraform&lt;/h2>
&lt;p>To get Terraform ready, create a file in the same directory called &lt;code>provider.tf&lt;/code>, and paste the following information into it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">required_version&lt;/span> = &lt;span class="s2">&amp;#34;&amp;gt;= 0.13.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">required_providers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">discord&lt;/span> = &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">source&lt;/span> = &lt;span class="s2">&amp;#34;Chaotic-Logic/discord&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">version&lt;/span> = &lt;span class="s2">&amp;#34;0.0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">provider&lt;/span> &lt;span class="s2">&amp;#34;discord&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">token&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, get the required provider downloaded (&lt;code>cd&lt;/code> into your Terraform directory first):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">terraform init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-credentials-file">Create credentials file&lt;/h2>
&lt;p>Create a new directory, and &lt;code>cd&lt;/code> into it. Then create a file in there called &lt;code>credentials.auto.tfvars&lt;/code>.&lt;/p>
&lt;p>Paste the following information in:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">discord_token = &amp;#34;YourDiscordApiToken&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_name = &amp;#34;NewServerName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_region = &amp;#34;us-east&amp;#34; # Region to host in (Brazil | Europe | Hong Kong | India | Rapan | Russia | Singapore | South Africa | Sydney | US (Central | East | South | West))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">category_name = &amp;#34;NewCategoryName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">text_channel_name = &amp;#34;NewTextChannelName&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You&amp;rsquo;ll want to edit the values (in quotations) as needed, filling in &lt;code>discord_token&lt;/code> with &lt;em>your&lt;/em> API token received from &lt;a class="link" href="#obtain-discord-api-token" >here&lt;/a>, it would be best to choose a region closest to you.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="create-variables-file">Create variables file&lt;/h2>
&lt;p>While the &lt;code>credentials.auto.tfvars&lt;/code> assigns values to variables, the variables still need to be defined within Terraform. Create a file called &lt;code>variables.tf&lt;/code> to store these, paste the following contents (one per assigned variable from &lt;a class="link" href="#create-credentials-file" >above&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;discord_token&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_region&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;category_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;text_channel_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-a-server">Create a server&lt;/h2>
&lt;p>In the same directory as your &lt;code>provider.tf&lt;/code> file, create a file called &lt;code>createServer.tf&lt;/code>.&lt;/p>
&lt;p>Paste the following information:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Create a server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resource &amp;#34;discord_server&amp;#34; &amp;#34;my_server&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = var.server_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> region = var.server_region
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default_message_notifications = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Get newly created server&amp;#39;s ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data &amp;#34;discord_server&amp;#34; &amp;#34;createdServerInfo&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_id = resource.discord_server.my_server.id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_server.my_server&lt;/code> creates a Discord server with a given name and region assigned from the &lt;code>credentials.auto.tfvars&lt;/code> file.&lt;/li>
&lt;li>Then saves the &lt;code>id&lt;/code> of the server in &lt;code>data.discord_server.createdServerInfo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-a-text-channel">Create a text channel&lt;/h2>
&lt;p>Now, we need to add a general channel for the server!&lt;/p>
&lt;p>I found the provider requires a category channel needs created, and channels be placed under that category&amp;hellip; so we can do this in one shot:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_category_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">category_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_text_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">lower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text_channel_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">category&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-1">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_category_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; category, which also depends on &lt;code>data.discords_server.createdServerInfo&lt;/code> to contain information (ensuring the server is created before the category is)
&lt;ul>
&lt;li>This places the category in the server that we created by supplying its &lt;code>id&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The block &lt;code>discord_text_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; text channel, which falls under the &amp;ldquo;general&amp;rdquo; category. Just like the category depends on the server to exist, this text channel depends on the category to exist.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-an-invite">Create an invite&lt;/h2>
&lt;p>Now, we need a way to actually see all of the work Terraform will perform. Since a &lt;a class="link" href="https://discord.com/developers/docs/intro#bots-and-apps" target="_blank" rel="noopener"
>Bot&lt;/a> is what created the server and everything in it, we need an invite so our own user can join the server and interact with it.&lt;/p>
&lt;p>So, create yet &lt;strong>another&lt;/strong> file, call this one &lt;code>createServerInvite.tf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_invite&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;inviteMe&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">channel_id&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_text_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">max_age&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">output&lt;/span> &lt;span class="s2">&amp;#34;invite_info&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">value&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_invite&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inviteMe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-2">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The &lt;code>discord_invite.inviteMe&lt;/code> block will create a non-expiring invite code that we can use to join the server, placing the invite under the channel we created earlier (by &lt;code>id&lt;/code>)&lt;/li>
&lt;li>The &lt;code>output.invite_info&lt;/code> block will print the invite code as a string to the terminal in a cleaner, more easily-found fashion.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="let-terraform-do-the-work-and-join-your-server">Let Terraform do the work, and join your server!&lt;/h2>
&lt;p>Now, open a terminal session, &lt;code>cd&lt;/code> into your Terraform files directory and run &lt;code>terraform plan&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This will show you what Terraform will do
&lt;ul>
&lt;li>You may have to correct some errors before you can proceed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Then, just run &lt;code>terraform apply -auto-approve&lt;/code> to create the server.&lt;/p>
&lt;p> &lt;/p>
&lt;p>In the terminal, something like this will show:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Outputs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">invite_info = &amp;#34;kvdyTVBuUs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>This &lt;code>invite_info&lt;/code> is what you need to join the server. To do this:&lt;/p>
&lt;ul>
&lt;li>Open your Discord client&lt;/li>
&lt;li>Click the &amp;ldquo;+&amp;rdquo; button under the list of joined servers to &amp;ldquo;Add a Server&amp;rdquo;&lt;/li>
&lt;li>Under &amp;ldquo;Have an invite already?&amp;rdquo;, click the &amp;ldquo;Join Server&amp;rdquo; button&lt;/li>
&lt;li>Enter the code given by the terminal (you don&amp;rsquo;t need a URL, just the code), and click &amp;ldquo;Join Server&amp;rdquo;!&lt;/li>
&lt;/ul>
&lt;p>You should now be a member of the new server, and you should also see a shiny new text channel titled &lt;code>general&lt;/code>.&lt;/p></description></item><item><title>Create a Static Website</title><link>https://thequib.github.io/p/create-a-static-website/</link><pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/create-a-static-website/</guid><description>&lt;img src="https://thequib.github.io/p/create-a-static-website/featuredImage.png" alt="Featured image of post Create a Static Website" />&lt;p>A static website is a plain and simple site with some HTML and CSS, without the need for a database or a beefy server.&lt;/p>
&lt;p>Hugo is one of many different static site generators. The most popular is called &lt;a class="link" href="https://jekyllrb.com/" target="_blank" rel="noopener"
>Jekyll&lt;/a>, and is a bit simpler to use than Hugo. It&amp;rsquo;s mostly personal preference, but here we&amp;rsquo;ll be going through setup for Hugo.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A computer running Windows / Mac / Linux / OpenBSD / FreeBSD&lt;/li>
&lt;li>IDE that supports YAML and Markdown&lt;/li>
&lt;li>Basic command line knowledge&lt;/li>
&lt;li>Basic understanding of websites (HTML, CSS)&lt;/li>
&lt;/ul>
&lt;p>In this post, I&amp;rsquo;ll be using Visual Studio Code as my IDE, you can download that &lt;a class="link" href="https://code.visualstudio.com/download" target="_blank" rel="noopener"
>here&lt;/a> if you are interested.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="install-hugo">Install Hugo&lt;/h1>
&lt;p>Firstly, you&amp;rsquo;ll have to install Hugo. This differs between operating systems&amp;hellip; But the official instructions can be found &lt;a class="link" href="https://gohugo.io/getting-started/installing/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>Below, you can find instructions for Windows and Linux systems.&lt;/p>
&lt;h2 id="install-on-windows">Install on Windows&lt;/h2>
&lt;p>The best way to install on Windows is to use the &lt;a class="link" href="https://chocolatey.org/" target="_blank" rel="noopener"
>chocolatey&lt;/a> method. You can find installation instructions for that &lt;a class="link" href="https://chocolatey.org/install#individual" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p>
&lt;p>Once that is installed, run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ps" data-lang="ps">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">choco&lt;/span> &lt;span class="nf">install&lt;/span> &lt;span class="nf">hugo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="install-on-linux">Install on Linux&lt;/h2>
&lt;p>If you want to use Linux, I found it&amp;rsquo;s best to get the latest version from Hugo&amp;rsquo;s GitHub repo &lt;a class="link" href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener"
>releases&lt;/a> page. If you try to install using apt, it will install an older version.&lt;/p>
&lt;p>Download the latest release to a directory of your choosing&lt;/p>
&lt;p>Ex:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget https://github.com/gohugoio/hugo/releases/hugo_0.96.0_Linux-64it.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo dpkg -i hugo_0.96.0_Linux-64it.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="confirm-installation">Confirm installation&lt;/h2>
&lt;p>To confirm you&amp;rsquo;ve installed Hugo, just run &lt;code>hugo --version&lt;/code> in your command line&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="generate-hugo-site-files">Generate Hugo site files&lt;/h1>
&lt;p>To get started, will need to generate site files that you can edit&lt;/p>
&lt;ol>
&lt;li>Open a terminal / command prompt&lt;/li>
&lt;li>&lt;code>cd&lt;/code> into an empty directory on your machine&lt;/li>
&lt;li>Run &lt;code>hugo new site sitename&lt;/code>&lt;/li>
&lt;li>Run &lt;code>ls&lt;/code> to view all of the new files&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="add-theme-to-site">Add theme to site&lt;/h1>
&lt;p>First thing you will need to do after creating a site is to add a theme to it. You can find a whole big list of themes directly from Hugo&amp;rsquo;s website &lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>There are two methods to add a theme to a site&amp;hellip; Via a git submodule or just copying all theme files into your site.&lt;/p>
&lt;p>In this example, I will be using the &lt;a class="link" href="https://github.com/adityatelange/hugo-PaperMod" target="_blank" rel="noopener"
>PaperMod&lt;/a>.&lt;/p>
&lt;h2 id="git-submodule-method">Git Submodule Method&lt;/h2>
&lt;p>The benefit to cloning a submodule from git is you can quickly update the theme without having to re-copy all files manually. Git will take care of this for you :)&lt;/p>
&lt;ol>
&lt;li>Find the theme you want, and go to its GitHub repository.&lt;/li>
&lt;li>Copy the URL of the repository&lt;/li>
&lt;li>Open a terminal session, &lt;code>cd&lt;/code> in to your new site directory&lt;/li>
&lt;li>Run: &lt;code>git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod&lt;/code> &lt;em>(substituting the URL of your chosen theme)&lt;/em>&lt;/li>
&lt;li>To update the submodule, run &lt;code>git submodule update --remote --merge&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;em>Note: If your site is in a git repository, you must run &lt;code>git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod&lt;/code> to pull the submodule, as this is not done by default&lt;/em>&lt;/p>
&lt;h2 id="copy-method">Copy Method&lt;/h2>
&lt;p>You can also just copy the contents of the repository by clicking the &amp;ldquo;Code&amp;rdquo; button on the GitHub repo, extract the files from the downloaded &lt;code>zip&lt;/code> file, and place those in your &lt;code>themes&lt;/code> folder.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/create-a-static-website/gitHubCodeButton.png"
width="453"
height="96"
srcset="https://thequib.github.io/p/create-a-static-website/gitHubCodeButton_hua3f975403333f98f5c4d3faae3fdabb2_5989_480x0_resize_box_3.png 480w, https://thequib.github.io/p/create-a-static-website/gitHubCodeButton_hua3f975403333f98f5c4d3faae3fdabb2_5989_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GitHub Code Button"
class="gallery-image"
data-flex-grow="471"
data-flex-basis="1132px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="file-structure">File structure&lt;/h1>
&lt;p>As you may have noticed, Hugo created a bunch of directories for you, including the &lt;code>themes&lt;/code> directory from the last section.&lt;/p>
&lt;p>The most notable and important directories are:&lt;/p>
&lt;ul>
&lt;li>content
&lt;ul>
&lt;li>Storage for Markdown files that will be used to generate pages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>layouts
&lt;ul>
&lt;li>Storage for HTML files that are used as templates to place markdown data into&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>static
&lt;ul>
&lt;li>Storage for all static files the website will use, such as CSS and image files&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>themes
&lt;ul>
&lt;li>Stores the theme you are using for your site&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="site-configuration">Site configuration&lt;/h1>
&lt;p>Each site contains a configuration file, this can be either &lt;code>toml&lt;/code> or &lt;code>yaml&lt;/code> file types, and using one over another is dependent first on what your theme supports, and personal preference.&lt;/p>
&lt;p>Typically, it is best to reference your chosen theme&amp;rsquo;s documentation to get base configuration to get started.&lt;/p>
&lt;p>The default &lt;code>config.yml&lt;/code> file for PaperMod can be found &lt;a class="link" href="https://github.com/adityatelange/hugo-PaperMod/blob/exampleSite/config.yml" target="_blank" rel="noopener"
>here&lt;/a>. Feel free to make changes as you see fit.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="create-your-first-page">Create your first page&lt;/h1>
&lt;p>Now it is time to create your first page!&lt;/p>
&lt;p>First create a file named &lt;code>about.md&lt;/code> under the &lt;code>content&lt;/code> directory.&lt;/p>
&lt;p>Now, paste in the following lines:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Markdown" data-lang="Markdown">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title: &amp;#34;About&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description: &amp;#34;Description of page.&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">aliases: [&amp;#34;contact&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">author: &amp;#34;Your Name&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Make sure to save the file.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="view-your-configured-site">View your configured site&lt;/h1>
&lt;p>To spin up a quick webserver on your local machine, run the command &lt;code>hugo server&lt;/code> in the directory containing your site files.&lt;/p>
&lt;p>This will generate the website files, and serve an HTTP server locally on your machine (the output of the command will give you the url).&lt;/p>
&lt;p>By default, Hugo will server on port &lt;code>1313&lt;/code>, so you can open a web browser and go to http://localhost:1313&lt;/p>
&lt;p> &lt;/p>
&lt;p>Once you&amp;rsquo;ve done this, there is your new site! If you want to check out the &lt;code>about.md&lt;/code> page we created above, you can navigate to http://localhost:1313/about.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="extra-note">Extra note&lt;/h1>
&lt;p>If you want to generate all HTML files for this site, run the command &lt;code>hugo -v&lt;/code>, this will create a directory named &lt;code>public&lt;/code> and you can copy the files there to your webserver of choice.&lt;/p></description></item><item><title>Welcome to the site</title><link>https://thequib.github.io/p/welcome-to-the-site/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/welcome-to-the-site/</guid><description>&lt;img src="https://thequib.github.io/p/welcome-to-the-site/featuredImage.png" alt="Featured image of post Welcome to the site" />&lt;p>Welcome! My name is Quinn. I currently work as a Network Specialist at public school district part-time and attend Pennsylvania College of Technology as a full-time student, majoring in Network Administration and Engineering.&lt;/p>
&lt;p>On this site, I post projects I work on both at home and at school. For the most part, I will include items from working in my home lab.&lt;/p>
&lt;p>This site, built using the &lt;a class="link" href="https://gohugo.io" target="_blank" rel="noopener"
>Hugo Static Site Generator&lt;/a>, is a fun little project I also took on as a part of my homelab, hosted on GitHub.&lt;/p>
&lt;p> &lt;/p>
&lt;p>Please feel free to check out my socials, and to share the content!&lt;/p></description></item><item><title>UniFi Doorbell G4 Custom Chime</title><link>https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/</guid><description>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/featuredImage.png" alt="Featured image of post UniFi Doorbell G4 Custom Chime" />&lt;p>So, I just got my new UniFi G4 Doorbell installed. Out of the box, it’s great! I can view live video, past video, and spy on my dog when she’s in my front yard… All with my data being stored on my local network with no subscription fee.&lt;/p>
&lt;p>While the out of box experience is great, I couldn’t help myself but look up how I can get my own ring (or &amp;ldquo;chime&amp;rdquo; as Ubiquiti calls it) uploaded to my doorbell. This requires a bit of work using some SSH, but it’s extremely fun to play around with.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="the-scoop">The scoop&lt;/h2>
&lt;p>While you can do this all manually, the doorbell sadly resets back to it’s default chime when restarted. So as an example, if you loose power, your doorbell will have it’s original chime again.&lt;/p>
&lt;p>This is no fun, so I made a script for you to use! You can find it on my personal GitHub page at &lt;a class="link" href="https://github.com/TheQuib/G4-Doorbell-Custom-Chime" target="_blank" rel="noopener"
>https://github.com/TheQuib/G4-Doorbell-Custom-Chime&lt;/a>&lt;/p>
&lt;ul>
&lt;li>You will need to enable SSH on your doorbell before use, please refer to this section of this post to do so&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>If you want to learn how to do this yourself, please continue on!&lt;/strong>&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="enable-ssh-on-doorbell">Enable SSH on Doorbell&lt;/h2>
&lt;p>This process is kinda hard to find, but enabling SSH on your UniFi Protect console (whether that be a Dream Machine, Cloud Key Gen 2+, or UniFi NVR) is pretty simple, and a quick google search away… so that won’t be covered here.&lt;/p>
&lt;p>&lt;strong>So first off, you will need to SSH into your UniFi Protect Console&lt;/strong>&lt;/p>
&lt;p>&lt;em>Dream Machine Only:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">unifi-os shell
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>&lt;em>Dream Mahcine + All Other Devices:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Edit the file &lt;code>/etc/unifi-protect/config.json&lt;/code>
&lt;ul>
&lt;li>If this file does not exist already, don&amp;rsquo;t worry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nano /etc/unifi-protect/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>Enter the following configuration to the end of the file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;enableSsh&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>Save the file with the following commands:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl+X&lt;/code>&lt;/li>
&lt;li>&lt;code>y&lt;/code>&lt;/li>
&lt;li>&lt;code>enter&lt;/code>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;p>You should now be able to SSH to all of your UniFi Protect devices! The username is ubnt and the password can be set in your UniFi/Protect Console settings.&lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="prepare-audio-file">Prepare audio file&lt;/h2>
&lt;p>Now, you will need to get a working &lt;code>.wav&lt;/code> file to be later uploaded to your doorbell. I would recommend to use a clip that is 10 seconds maximum (though I haven’t tested lengths yet).&lt;/p>
&lt;p>&lt;em>If you’re familiar with how to use Audacity, here are the file specifications you need:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Specs:
&lt;ul>
&lt;li>Mono&lt;/li>
&lt;li>44100Hz&lt;/li>
&lt;li>16 bit&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A good idea to:
&lt;ul>
&lt;li>Normalize the audio&lt;/li>
&lt;li>Apply a limiter, and make sure make-up gain is applied&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;p>First, get your audio file that you would like to trim down.&lt;/p>
&lt;p> &lt;/p>
&lt;p>Now, open the file in Audacity&lt;/p>
&lt;ul>
&lt;li>The audio file will show in the main area, click the down arrow next to the file name
&lt;ul>
&lt;li>Click &amp;ldquo;Split stereo to mono&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Delete the second track&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornDownArrow.png"
width="108"
height="29"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornDownArrow_hu0617b5948a0bcdf8691f18cffbbf2219_532_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornDownArrow_hu0617b5948a0bcdf8691f18cffbbf2219_532_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Down Arrow Image"
class="gallery-image"
data-flex-grow="372"
data-flex-basis="893px"
>&lt;/p>
&lt;ul>
&lt;li>Make sure the track is selected&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornSelect.png"
width="88"
height="23"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornSelect_hu2af23e231cffb0d25523acd4e631daae_440_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornSelect_hu2af23e231cffb0d25523acd4e631daae_440_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Train Horn Select"
class="gallery-image"
data-flex-grow="382"
data-flex-basis="918px"
>&lt;/p>
&lt;ul>
&lt;li>In the toolbar, click &amp;ldquo;Effect&amp;rdquo; &amp;gt; Normalize
&lt;ul>
&lt;li>Leave the default settings&lt;/li>
&lt;li>Click &amp;ldquo;OK&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornNormalize.png"
width="423"
height="177"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornNormalize_huee635ea39d93803df652af3e0f9505ce_7249_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornNormalize_huee635ea39d93803df652af3e0f9505ce_7249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Normalize Window"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="573px"
>&lt;/p>
&lt;ul>
&lt;li>Again in the toolbar, click &amp;ldquo;Effect&amp;rdquo; &amp;gt; Limiter
&lt;ul>
&lt;li>Leave the default settings&lt;/li>
&lt;li>Make sure to &amp;ldquo;Apply Make-up Gain&amp;rdquo; is set to &amp;ldquo;Yes&amp;rdquo;&lt;/li>
&lt;li>Click &amp;ldquo;OK&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornLimiter.png"
width="422"
height="306"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornLimiter_hu6c9512c1761fc979f6f91657ab2ccef2_10541_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornLimiter_hu6c9512c1761fc979f6f91657ab2ccef2_10541_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Limiter Window"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;ul>
&lt;li>Make sure the &amp;ldquo;Project Rate (Hz)&amp;rdquo; at the bottom-left of Audacity is set to &amp;ldquo;44100&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornProjectRate.png"
width="104"
height="49"
srcset="https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornProjectRate_huc836e71a6f29afb8539919d192d0471c_958_480x0_resize_box_3.png 480w, https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/trainHornProjectRate_huc836e71a6f29afb8539919d192d0471c_958_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Project Rate"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;ul>
&lt;li>Click &amp;ldquo;File&amp;rdquo; &amp;gt; &amp;ldquo;Export&amp;rdquo; &amp;gt; &amp;ldquo;Export as WAV&amp;rdquo;
&lt;ul>
&lt;li>Set &amp;ldquo;Encoding&amp;rdquo; to &amp;ldquo;Signed 16-bit PCM&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Save the file to a location you&amp;rsquo;ll remember&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="upload-audio-file">Upload audio file&lt;/h2>
&lt;p>Now we get to upload the audio file to the doorbell!&lt;/p>
&lt;p>To do this, you’ll need to open a terminal of your choice (such as CMD in Windows)&lt;/p>
&lt;p>Navigate to where you saved your WAV file using the cd command.&lt;/p>
&lt;p>Ex:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> C:&lt;span class="se">\U&lt;/span>sers&lt;span class="se">\Q&lt;/span>uib&lt;span class="se">\D&lt;/span>esktop&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, we&amp;rsquo;ll use the &lt;code>SCP&lt;/code> command to copy the file to the doorbell via SSH. General usage of SCP is:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">scp localFile user@remoteHost:/path/to/remoteFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lets put our variables in there. In my case, I will be using a file name &lt;code>trainHorn.wav&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">scp trainHorn.wav ubnt@192.168.10.100:trainHorn.wav
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>NOTE: Make sure you remember this file name for later&lt;/strong>&lt;/p>
&lt;p> &lt;/p>
&lt;p>You may notice t hat I didn&amp;rsquo;t specify a path on the rmoet host, this is because we&amp;rsquo;ll let the file residei n the default directory of &lt;code>/etc/persistent&lt;/code> on the doorbell, and later create a symlink for that file to a different directory.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="create-symlink-of-audio-file">Create symlink of audio file&lt;/h2>
&lt;p>Now, we’ll backup the original chime.wav just so it can easily be reset later if desired, and then create a symlink from our uploaded file to where chime.wav exists.&lt;/p>
&lt;p>The reason this is done is because the doorbell seems to only like reading a symlink instead of a regular file when playing the chime sound.&lt;/p>
&lt;p>**First, lets create the backup:&lt;/p>
&lt;ul>
&lt;li>navigate to the &lt;code>/etc/sounds/&lt;/code> directory and list the files to see what&amp;rsquo;s in there:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /etc/sounds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This should show a list of audio files, one of them being &lt;code>chime.wav&lt;/code>. Lets create a backup of that:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mv chime.wav chime.wav.back
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Now, lets create a symlink of our uploaded file, make sure you replace &lt;code>trainHorn.wav&lt;/code> with the name of the file you uploaded earlier, and list the files in &lt;code>/etc/sounds/&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ln -s /etc/persistent/trainHorn.wav /etc/sounds/chime.wav
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>The &lt;code>ls&lt;/code> command should now show two &lt;code>chime&lt;/code> files:
&lt;ul>
&lt;li>&lt;code>chime.wav&lt;/code>&lt;/li>
&lt;li>&lt;code>chime.wav.bak&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The new &lt;code>chime.wav&lt;/code> file is the symlink you just created, and now the current doorbell chime!&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="finishing-up">Finishing up&lt;/h2>
&lt;p>Now you&amp;rsquo;re all done! You can go ahead and test out the new chime by pressing the ring button on your doorbell, and it should play your uploaded file.&lt;/p></description></item><item><title>Getting Started with Network Automation</title><link>https://thequib.github.io/p/getting-started-with-network-automation/</link><pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-network-automation/</guid><description>&lt;p>Ever though about an easier way to configure tons of network devices easily? Python is definitely the answer to get started, and as long as you have a basic understanding of programming, it&amp;rsquo;s pretty simple, and tons of fun!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Python version 3.9 or higher&lt;/li>
&lt;li>An IDE that supports the Python language&lt;/li>
&lt;li>Some sort of appliance you can connect to via SSH
&lt;ul>
&lt;li>I will be using a Cisco IOS appliance here running in GNS3&lt;/li>
&lt;li>A Linux VM will also work&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In this post, I&amp;rsquo;ll be using Visual Studio Code as my IDE, you can download that &lt;a class="link" href="https://code.visualstudio.com/download" target="_blank" rel="noopener"
>here&lt;/a> if you are interested.&lt;/p>
&lt;p>You can find all of my &lt;a class="link" href="https://github.com/TheQuib/python-network-automation" target="_blank" rel="noopener"
>scripts&lt;/a>, and other projects on my &lt;a class="link" href="https://github.com/TheQuib" target="_blank" rel="noopener"
>GitHub page&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="before-you-start">Before you Start&lt;/h2>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>This is only if you are using Visual Studio Code as your IDE&lt;/em>&lt;/p>
&lt;p>VS Code gets a little funky when it comes to installed python libraries. First, make sure you install the latest version of Python from the Microsoft Store&amp;hellip; Code will look to the installation path of this by default.&lt;/p>
&lt;p>After installation:&lt;/p>
&lt;ol>
&lt;li>Open VS Code&lt;/li>
&lt;li>Open or create a Python file (use the extension &lt;em>.py&lt;/em> to tell Code to use Python)&lt;/li>
&lt;li>On the bottom-left of the window, click the Python version number, this should open a box at the top of the screen&lt;/li>
&lt;li>Select &amp;ldquo;&lt;em>Entire Workspace&lt;/em>&amp;rdquo;&lt;/li>
&lt;li>Choose the following option from the list:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter.png"
width="898"
height="70"
srcset="https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter_hua8be6abbf3a39391b195b18f2b73d718_10706_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter_hua8be6abbf3a39391b195b18f2b73d718_10706_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Select Python Interpreter"
class="gallery-image"
data-flex-grow="1282"
data-flex-basis="3078px"
>&lt;/p>
&lt;p>Now you should be all goood to go!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="installing-netmiko">Installing Netmiko&lt;/h2>
&lt;p>Netmiko is, in my opinion, the best all-in-one network automation tool to use in Python. Netmiko has a multitude of supported devices; including Linux, Cisco (IOS, NX-OS, etc), HP Enterprise, and TONS more.&lt;/p>
&lt;p>To install Netmiko on your computer, open a terminal and type:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python3 -m pip install netmiko
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, open your IDE and create a new Python file, enter the following code and run it to test installation:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you run this, and it doesn&amp;rsquo;t do anything, that&amp;rsquo;s good! This just means that the library imported with no problems.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="setting-up-netmiko">Setting up Netmiko&lt;/h2>
&lt;p>Network automation is all about doing the similar tasks on tons of devices from a single place. That doesn&amp;rsquo;t mean you have to have a hundred devices to do some automation work.&lt;/p>
&lt;p>In my case, I will be using the Cisco Modeling Labs IOSv router image (in GNS3), so my commands will be IOS specific. I&amp;rsquo;ll have some information down below so you can set up a Linux machine if you want as well :)&lt;/p>
&lt;p>First, we&amp;rsquo;ll need to import the ConnectHandler module from Netmiko:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># NEtwork automation module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then let&amp;rsquo;s get some username and password information from the user:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Module used to hide passwords in the console&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for username&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a username to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for password using getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a password to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for secret password&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">secret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a secret password to enable with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now we&amp;rsquo;ll want to set up information that Netmiko will use for the actual connection. Type the following code and note the comments:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;ip address&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This code creates a Python dictionary that contains the items &lt;em>device_type&lt;/em>, &lt;em>host&lt;/em>, &lt;em>password&lt;/em>, &lt;em>secret&lt;/em>, and &lt;em>use_keys&lt;/em>, and then sets a variable to the string &lt;em>&amp;lsquo;ip address&amp;rsquo;&lt;/em>.&lt;/p>
&lt;p>Most of these are pretty self explanatory, &lt;em>use_keys&lt;/em> will bypass the prompt SSH gives back when connecting to an unknown device for the first time.&lt;/p>
&lt;p>If you wanted to try this on multiple devices, tweak your code to use a list for hosts and a for loop as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hosts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;4.3.2.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="ow">in&lt;/span>  &lt;span class="n">hosts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;sh run&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="sending-your-first-command">Sending your first command&lt;/h2>
&lt;p>Now we&amp;rsquo;re ready to send a command to your device / devices! Let&amp;rsquo;s get started by creating a Netmiko &lt;code>ConnectHandler&lt;/code> variable by adding this line:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">hostConfig&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, we can act on the variable &lt;em>ssh&lt;/em> to send commands to our device. Using &lt;em>send_command&lt;/em>, which is used specifically for sending a single command via Netmiko (this will utilize the &lt;em>command&lt;/em> variable we set in the previous step):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now go ahead and run your program! If you put everything in correctly, you should see the output of the Linux command &lt;code>ip addr&lt;/code> in your terminal.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="sending-multiple-commands">Sending multiple commands&lt;/h2>
&lt;p>Automation isn&amp;rsquo;t just about sending a single command to devices. While this can be pretty useful, especially for gathering some information (like switch configs), sending multiple commands can prove to be extremely useful and time-saving, especially when you&amp;rsquo;re configuring tons of devices.&lt;/p>
&lt;p>In the previous step, we used the function &lt;strong>send_command()&lt;/strong>, which only sends one command. For multiple configuration commands, there is a function called &lt;strong>send_config_set()&lt;/strong>, which accepts a list in its parameters.&lt;/p>
&lt;p>So first, let&amp;rsquo;s create a list:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;int gi0/1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ip address 172.16.0.1 255.255.0.0&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, instead of &lt;em>send_command()&lt;/em>, we can use the following to send our &lt;em>config&lt;/em> variable instead:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_config_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Getting Started with GNS3</title><link>https://thequib.github.io/p/getting-started-with-gns3/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-gns3/</guid><description>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/featuredImage.png" alt="Featured image of post Getting Started with GNS3" />&lt;p>When diving into learning networking, GNS3 is a great tool to get started. GNS3 allows you to build out and design networks without having to buy all of the expensive hardware to do so.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A GNS3 VM server, or server running on your local machine
&lt;ul>
&lt;li>Check out &lt;a class="link" href="https://thequib.github.io/gns3-vm-in-proxmox-ve" >GNS3 in Proxmox VE&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GNS3 client on your local computer
&lt;ul>
&lt;li>Download the GNS3 Client from the &lt;a class="link" href="https://www.gns3.com/software/download" target="_blank" rel="noopener"
>official website&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="optional">Optional&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://learningnetworkstore.cisco.com/cisco-modeling-labs-personal/cisco-cml-personal" target="_blank" rel="noopener"
>Cisco Modeling Labs IOSv router/switch images&lt;/a>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="loading-gns3">Loading GNS3&lt;/h2>
&lt;p>Start by opening your GNS3 client. Here, a dialog shows to create a new project.&lt;/p>
&lt;ul>
&lt;li>If you are running the GNS3 server on your local machine, go ahead and create a new project, name it whatever you want&lt;/li>
&lt;li>If you are running the GNS3 server on a remote machine
&lt;ul>
&lt;li>Go to Edit &amp;gt; Preferences &amp;gt; Server&lt;/li>
&lt;li>Change &amp;lsquo;Host&amp;rsquo; to the IP address of your server&lt;/li>
&lt;li>Change the port to &amp;lsquo;80 TCP&amp;rsquo; (Or the port you have it set to if you&amp;rsquo;ve changed it)&lt;/li>
&lt;li>Fill out the &amp;lsquo;user&amp;rsquo; and &amp;lsquo;password&amp;rsquo; fields (Default user is &amp;lsquo;gns3&amp;rsquo; and password is &amp;lsquo;password&amp;rsquo;)&lt;/li>
&lt;li>Click &amp;lsquo;Apply&amp;rsquo; and close the preferences window&lt;/li>
&lt;li>Go to File &amp;gt; New blank project, name the new project whatever you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="installing-an-appliance">Installing an appliance&lt;/h2>
&lt;p>On the left hand side of the window, you will find a toolbar with the following icons:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems.png"
width="410"
height="60"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Sidebar Items"
class="gallery-image"
data-flex-grow="683"
data-flex-basis="1640px"
>&lt;/p>
&lt;p>From top to bottom, these items are &lt;em>Routers&lt;/em>, &lt;em>Switches&lt;/em>, &lt;em>End Devices&lt;/em>, &lt;em>Security Devices&lt;/em>, &lt;em>All Devices&lt;/em>, and &lt;em>Add a link&lt;/em>. These buttons contain what are called templates, templates are virtual devices that can be manipulated just as if they were the real deal.&lt;/p>
&lt;p>All of these are relatively self explanatory, the last &lt;em>&amp;ldquo;Add a link&amp;rdquo;&lt;/em> is for connecting devices together using a virtual network cable.&lt;/p>
&lt;p>To get started and testing things, go to &lt;em>End Devices&lt;/em> and click &amp;ldquo;+ New template&amp;rdquo;. You will want to install an appliance from the server, so click &amp;ldquo;Next &amp;gt;&amp;rdquo;, expand &amp;ldquo;Guests&amp;rdquo;, and scroll to find an appliance that interests you. I&amp;rsquo;ll be choosing the &amp;ldquo;Ubuntu Docker Guest&amp;rdquo; as docker containers start up in just a few seconds.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection.png"
width="855"
height="259"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Selection"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="792px"
>&lt;/p>
&lt;p>Once you have found the device you want, click &amp;ldquo;Install&amp;rdquo;, then &amp;ldquo;Next&amp;rdquo; to install on the main server, then &amp;ldquo;Finish&amp;rdquo;. Now, the appliance should be installed!&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="adding-devices-to-a-project">Adding devices to a project&lt;/h2>
&lt;p>Now, the newly installed appliance should show up under &lt;em>End Devices&lt;/em>. Click this, and drag the device into the blank space of the project. This will do some downloading work if you have just installed it, then add itself into the project.&lt;/p>
&lt;p>To use the device, you can either click the green play button at the top of the window (this would start all devices in the project), or you can right click an individual device, and click &amp;ldquo;Start&amp;rdquo;.&lt;/p>
&lt;p>You can confirm that the device has started by looking at the &amp;ldquo;Topology Summary&amp;rdquo; on the top right of the window. A green circle indicates that a device is online.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline.png"
width="395"
height="85"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Online"
class="gallery-image"
data-flex-grow="464"
data-flex-basis="1115px"
>&lt;/p>
&lt;p>To get console access to this docker guest, you can double click on the node, or right click and hit &amp;ldquo;console&amp;rdquo;. This, by default, will open the Solarwinds Solar-PuTTY application on your computer. You can interact with the device just as if it were a physical one.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>Keep in mind, each devices has its own configuration settings that you can mess with, as well as console types depending on if the device has a GUI or not (Such as between the Ubuntu Docker and Ubuntu Desktop guests). Some of these settings include amount of CPU cores, RAM, and type of console access you have to the device.&lt;/p>
&lt;p>Feel free to play around with these and figure some stuff out! The beauty of GNS3 is that you can do anything you want, and not have to worry about breaking anything of importance :)&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>And there you have it! Go ahead and play with the different end devices, as well as switching/routing appliances that exist. If you have the Cisco Modeling labs subscription, you are also able to import the IOSv images into GNS3, which will allow you to interact and play with Cisco IOS devices.&lt;/p></description></item><item><title>GNS3 VM in Proxmox VE</title><link>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</guid><description>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/featuredImage.png" alt="Featured image of post GNS3 VM in Proxmox VE" />&lt;p>Do you use Proxmox VE as your main homelab hypervisor, and want to run the GNS3 VM on it? You&amp;rsquo;re in luck, below you can find steps on how to do just that as long as you meet a few server requirements.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Proxmox VE with 3-4&lt;/li>
&lt;li>A VM storage device that supports .qcow2 files&lt;/li>
&lt;li>Location of VM disks on your Proxmox Server&lt;/li>
&lt;li>FTP and Shell access to your Proxmox Server&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="download-the-ova-file">Download the .ova file&lt;/h2>
&lt;p>Head over to the GNS3 website and download the ESXi VM &lt;a class="link" href="https://gns3.com/software/download-vm" target="_blank" rel="noopener"
>https://gns3.com/software/download-vm&lt;/a>&lt;/p>
&lt;p>Keep in mind, this will ask you to create an account before you can download.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="upload-the-ova-file-to-your-server">Upload the .ova file to your server&lt;/h2>
&lt;p>Now you will need to get the downloaded file onto your Proxmox server&lt;/p>
&lt;ul>
&lt;li>Open your favorite FTP client on your computer. In my case, I&amp;rsquo;m using WinSCP to do this&lt;/li>
&lt;li>Connect to your Proxmox server using either its IP address or hostname&lt;/li>
&lt;li>On the left pane (your local machine), navigate to where the &lt;code>.ova&lt;/code> file is&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile.png"
width="488"
height="85"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile_hu52dbf2389f55907a4797863c40ffd1b2_4546_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile_hu52dbf2389f55907a4797863c40ffd1b2_4546_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Local OVA"
class="gallery-image"
data-flex-grow="574"
data-flex-basis="1377px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>On the right pane (the server), create a new directory, naming whatever you want&lt;/li>
&lt;li>I&amp;rsquo;ll be putting mine underthe &lt;code>/root&lt;/code> directory&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir.png"
width="522"
height="72"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir_hu2df7b9856d778360d197c4fec2391e01_4079_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir_hu2df7b9856d778360d197c4fec2391e01_4079_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Remote Directory"
class="gallery-image"
data-flex-grow="725"
data-flex-basis="1740px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Now, drag the &lt;code>.ova&lt;/code> file from the left side to the right side, and you will see the upload begin&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload.png"
width="357"
height="201"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload_hud8dcb7040d4e35f6ee477344c55964e0_9760_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload_hud8dcb7040d4e35f6ee477344c55964e0_9760_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="File Upload"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="create-a-vm-in-proxmox">Create a VM in Proxmox&lt;/h2>
&lt;p>Now we&amp;rsquo;re going to want to create a VM in Proxmox that we will be adding hard disk to&lt;/p>
&lt;ul>
&lt;li>Create a VM by clicking &amp;ldquo;Create VM&amp;rdquo; on the top right&lt;/li>
&lt;li>Under &amp;ldquo;General&amp;rdquo;, you can use any ID starting from 100 that you like, take note of this. Name it whatever you would like&lt;/li>
&lt;li>Under &amp;ldquo;OS&amp;rdquo;, select the radio button to not use any media&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media.png"
width="331"
height="265"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media_hu22615d4374964dd954a424ec944c1a50_11932_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media_hu22615d4374964dd954a424ec944c1a50_11932_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - Media"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;System&amp;rdquo;, select your preferred graphics card (I will be using the VirtIO option), and make sure &amp;ldquo;SeaBIOS&amp;rdquo; is selected&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system.png"
width="370"
height="203"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system_hu144e48e87e7615a05aa0bed7ee4c5ef0_9687_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system_hu144e48e87e7615a05aa0bed7ee4c5ef0_9687_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - System"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Storage&amp;rdquo;, make sure SCSI is selected, and a qcow2 compatible storage device is selected&lt;/li>
&lt;li>Under CPU, give it at least 3 cores to run with, and make sure to select &amp;lsquo;host&amp;rsquo; for the type&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu.png"
width="700"
height="231"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu_hud110e020dfeeb55b5cb563aee5f24613_16409_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu_hud110e020dfeeb55b5cb563aee5f24613_16409_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - CPU"
class="gallery-image"
data-flex-grow="303"
data-flex-basis="727px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Memory&amp;rdquo;, give it at least 4096MB of RAM&lt;/li>
&lt;li>Set your preferred settings under &amp;ldquo;Network&amp;rdquo;, the default model will work just fine and should have the best performance&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="create-secondary-hard-disk">Create secondary hard disk&lt;/h2>
&lt;ul>
&lt;li>Navigate to the newly created VM&lt;/li>
&lt;li>Go to the &amp;ldquo;Hardware&amp;rdquo; tab&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add.png"
width="222"
height="142"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add_hu5728a90c7b8a6edcc3c64c33f0836e44_7121_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add_hu5728a90c7b8a6edcc3c64c33f0836e44_7121_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="VM - Add Hardware"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;ul>
&lt;li>Select the same storage device that you chose when creating the VM&lt;/li>
&lt;li>Change the size to whatever you would like to make it&lt;/li>
&lt;li>Click the &amp;lsquo;Add&amp;rsquo; button at the bottom&lt;/li>
&lt;li>You should now have 2 hard disks in the machine, &amp;lsquo;scsi0&amp;rsquo; and &amp;lsquo;scsi1&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="extract-files-from-the-ova-file">Extract files from the .ova file&lt;/h2>
&lt;p>We will need to grab files that are packaged into the file downloaded from the GNS3 website. .ova files typically contain 2 main parts: VM Configuration settings (we just did this), and virtual hard disks (In the .vmdk format)&lt;/p>
&lt;ul>
&lt;li>First access the shell of the Proxmox server, this can be either over SSH, or using the shell tab in Proxmox&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell.png"
width="338"
height="131"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell_hu4ca0cf01b7ef3c90e0e860582e6030be_9278_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell_hu4ca0cf01b7ef3c90e0e860582e6030be_9278_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Proxmox Shell"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="619px"
>&lt;/p>
&lt;ul>
&lt;li>Change your current directory to where you stored the .ova file earlier using the &amp;lsquo;cd&amp;rsquo; command. In my case, that would be:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /root/GNS2.2.20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Now, to extract the files using tar to the current directory, and list the new files&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tar -xvf *.ova
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will show the new files in the current directory, these should be:
&lt;ul>
&lt;li>&lt;code>GNS3 VM-disk001.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM-disk002.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM.ovf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The 2 &lt;code>.vmdk&lt;/code> files are the virtual hard disks, and the &lt;code>.ovf&lt;/code> file is the VM configuration file&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="convert-vmdk-files-to-qcow2-qemu-files">Convert .vmdk files to .qcow2 qemu files&lt;/h2>
&lt;p>In order for Proxmox to properly use the hard disks we just snatched, we need to convert them to .qcow2 (qemu) hard disks&lt;/p>
&lt;ul>
&lt;li>Get that VM ID you set earlier when creating the VM, I used 501 in my case&lt;/li>
&lt;li>Convert each file, replacing vmid with your VM ID:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="copy-the-newly-converted-qcow2-files">Copy the newly converted .qcow2 files&lt;/h2>
&lt;p>Now we can copy the files to the VM folder!&lt;/p>
&lt;ul>
&lt;li>Make sure you&amp;rsquo;re still in the same directory as the .qcow2 files&lt;/li>
&lt;li>Find the directory of the VM you will be copying the files to
&lt;ul>
&lt;li>In my case, my GNS3 VM is located at /mnt/pve/Proxmox-1-VM/images/501&lt;/li>
&lt;li>501 in this directory is my VM ID&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use the &lt;code>cp&lt;/code> command to copy the files to the vm directory&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-0.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-1.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-501-disk-0.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-501-disk-1.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="start-the-vm">Start the VM&lt;/h2>
&lt;p>Now you should be good to go! Try and start the VM, and head to the console tab. GNS3 should start to load, and you can begin creating your virtual networks!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="optional---install-qemu-guest-agent-on-gns3">Optional - Install qemu-guest-agent on GNS3&lt;/h2>
&lt;p>I know that when I have a VM in Proxmox, I like to get some quick information sometimes straight from the GUI&amp;hellip; such as the VM&amp;rsquo;s IP address. This is only possible if the qemu guest agent installed on the machine.&lt;/p>
&lt;p>Lucky for us, the GNS3 VM runs on Ubuntu, so this is pretty easy!&lt;/p>
&lt;ul>
&lt;li>Once GNS3 is loaded, go to the console tab, and press enter in the window to hit OK&lt;/li>
&lt;li>Arrow-down to the option &amp;ldquo;Shell&amp;rdquo; and hit enter&lt;/li>
&lt;li>In the shell, type the following commands:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install qemu-guest-agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start qemu-guest-agent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will update the repository, install the guest agent, and start the guest agent service&lt;/li>
&lt;li>Now, click the &amp;ldquo;Summary&amp;rdquo; tab of the VM in Proxmox, more information (such as the VM&amp;rsquo;s IP address) will now show right there!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Note: If the guest agent information doesn&amp;rsquo;t show, try reloading the web page&lt;/em>&lt;/p></description></item><item><title>Archives</title><link>https://thequib.github.io/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://thequib.github.io/archives/</guid><description/></item><item><title>Friends</title><link>https://thequib.github.io/friends/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thequib.github.io/friends/</guid><description>&lt;h1 id="a-quick-shout-out-to-these-guys-check-them-out">A quick shout-out to these guys, check them out!&lt;/h1>
&lt;p> &lt;/p>
&lt;hr>
&lt;h2 id="austin-barnes">Austin Barnes&lt;/h2>
&lt;figure>&lt;img src="https://www.cinderblook.com/Portrait_Austin.jpg" width="150"/>&lt;figcaption>
&lt;h4>Austin Barnes&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Website: &lt;a class="link" href="https://cinderblook.com" target="_blank" rel="noopener"
>cinderblook.com&lt;/a>&lt;/p>
&lt;p>GitHub: &lt;a class="link" href="https://github.com/Cinderblook" target="_blank" rel="noopener"
>Cinderblook&lt;/a>&lt;/p>
&lt;p>LinkedIn: &lt;a class="link" href="https://www.linkedin.com/in/austin-barnes-03869218a/" target="_blank" rel="noopener"
>Austin Barnes&lt;/a>&lt;/p>
&lt;p>Instagram: &lt;a class="link" href="https://www.instagram.com/austin_barnesz/" target="_blank" rel="noopener"
>Austin Barnes&lt;/a>&lt;/p>
&lt;p>BuyMeACoffee: &lt;a class="link" href="https://www.buymeacoffee/Cinderblook" target="_blank" rel="noopener"
>Cinderblook&lt;/a>&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;h2 id="tate-naugle">Tate Naugle&lt;/h2>
&lt;figure>&lt;img src="https://scontent.fagc1-2.fna.fbcdn.net/v/t39.30808-1/274083657_1633811710350952_1764325339258279629_n.jpg?stp=dst-jpg_p200x200&amp;amp;_nc_cat=108&amp;amp;ccb=1-5&amp;amp;_nc_sid=7206a8&amp;amp;_nc_ohc=vAvP__gxjEEAX_teLsR&amp;amp;_nc_ht=scontent.fagc1-2.fna&amp;amp;oh=00_AT-fHlJJGkwARzyqqWKBVDxsS-uceEBXkJvDats8jPsNNQ&amp;amp;oe=624B8231" width="150"/>&lt;figcaption>
&lt;h4>Tate Naugle&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Website: &lt;a class="link" href="https://perceivestudios.com" target="_blank" rel="noopener"
>perceivestudios.com&lt;/a>&lt;/p>
&lt;p>Instagram: &lt;a class="link" href="https://www.instagram.com/tatenaugle/" target="_blank" rel="noopener"
>Tate Naugle&lt;/a>&lt;/p>
&lt;p>Instagram (Business): &lt;a class="link" href="https://www.instagram.com/perceivestudios/" target="_blank" rel="noopener"
>Percieve Studios&lt;/a>&lt;/p></description></item><item><title>Posts</title><link>https://thequib.github.io/post/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thequib.github.io/post/</guid><description/></item><item><title>Projects</title><link>https://thequib.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thequib.github.io/projects/</guid><description>&lt;p>Just a few projects I&amp;rsquo;ve worked on along the way.&lt;/p>
&lt;hr>
&lt;h2 id="projects">Projects&lt;/h2>
&lt;h3 id="enterprise-door-access-system">Enterprise Door Access System&lt;/h3>
&lt;p>Organization and configuration of an enterprise door access system across 6 buildings from &lt;em>Verkada&lt;/em>.&lt;/p>
&lt;p>&lt;em>&lt;strong>2022&lt;/strong>&lt;/em>&lt;/p>
&lt;h3 id="ubiquiti-unifi-network">Ubiquiti UniFi Network&lt;/h3>
&lt;p>Deployment of a managed Ubiquiti UniFi network. Including routing, switching and wireless.&lt;/p>
&lt;p>&lt;em>&lt;strong>2021&lt;/strong>&lt;/em>&lt;/p>
&lt;h3 id="enterprise-wireless-system">Enterprise Wireless System&lt;/h3>
&lt;p>Migration / deployment of existing and new access points in a managed wireless system from &lt;em>Ruckus Wireless&lt;/em>, including API development of wireless automation tasks with &lt;em>Python&lt;/em>.&lt;/p>
&lt;p>&lt;em>&lt;strong>2021&lt;/strong>&lt;/em>&lt;/p>
&lt;h3 id="enterprise-security-camera-system">Enterprise Security Camera System&lt;/h3>
&lt;p>Organization, installation and configuration of an enterprise security camera system across 6 buildings from &lt;em>Verkada&lt;/em>.&lt;/p>
&lt;p>&lt;em>&lt;strong>2020&lt;/strong>&lt;/em>&lt;/p>
&lt;h3 id="help-desk-ticketing-system">Help Desk Ticketing System&lt;/h3>
&lt;p>Design, management and automation of a help desk ticketing system built on the Microsoft Power Platform using Power Apps, Power Automate, and SharePoint.&lt;/p>
&lt;p>&lt;em>&lt;strong>2020&lt;/strong>&lt;/em>&lt;/p></description></item><item><title>Search</title><link>https://thequib.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thequib.github.io/search/</guid><description/></item></channel></rss>