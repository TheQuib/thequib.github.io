<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>QuibTech</title><link>https://thequib.github.io/</link><description>Recent content on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Welcome to the site</title><link>https://thequib.github.io/p/welcome-to-the-site/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/welcome-to-the-site/</guid><description>&lt;p>Welcome! My name is Quinn. I currently work as a Network Specialist at public school district part-time and attend Pennsylvania College of Technology as a full-time student, majoring in Network Administration and Engineering.&lt;/p>
&lt;p>On this site, I post projects I work on both at home and at school. For the most part, I will include items from working in my home lab.&lt;/p>
&lt;p>This site, built using the &lt;a class="link" href="https://gohugo.io" target="_blank" rel="noopener"
>Hugo Static Site Generator&lt;/a>, is a fun little project I also took on as a part of my homelab, hosted on GitHub.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Please feel free to check out my socials, and to share the content!&lt;/p></description></item><item><title>Manage Discord Servers with Terraform</title><link>https://thequib.github.io/p/manage-discord-servers-with-terraform/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-discord-servers-with-terraform/</guid><description>&lt;p>Something everyone is dying to do&amp;hellip; Code-driven Discord server management.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="requirements">Requirements&lt;/h1>
&lt;ul>
&lt;li>Discord API Token
&lt;ul>
&lt;li>&lt;a class="link" href="#obtain-discord-api-token" >Learn how to get this&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Some knowledge with Terraform (to understand what is going on)&lt;/li>
&lt;li>Terraform 0.13 and up&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="source-code">Source Code&lt;/h1>
&lt;p>All of my code and related files can be found in my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture Repo&lt;/a>.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="obtain-discord-api-token">Obtain Discord API Token&lt;/h1>
&lt;ul>
&lt;li>Head over to the &lt;a class="link" href="https://discord.com/developers/" target="_blank" rel="noopener"
>Discord Developer Portal&lt;/a>&lt;/li>
&lt;li>Get logged in&lt;/li>
&lt;li>Create a new application&lt;/li>
&lt;li>Name this whatever you want
&lt;ul>
&lt;li>Ex: &amp;ldquo;Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Once in your new application, head over to the &amp;ldquo;Bot&amp;rdquo; section&lt;/li>
&lt;li>Click &amp;ldquo;Add Bot&amp;rdquo;&lt;/li>
&lt;li>Give the bot a name (or leave the default name)
&lt;ul>
&lt;li>Ex: &amp;ldquo;Mr. Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click the &amp;ldquo;Reset Token&amp;rdquo; button
&lt;ul>
&lt;li>This will give you your token, and is the only time it will be displayed&lt;/li>
&lt;li>Make sure you keep this in a safe place, and treat it like a password&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use this token in your &lt;a class="link" href="credentials.auto.tfvars.example" >credentials.auto.tfvars&lt;/a> file&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="terraform-provider-information">Terraform Provider Information&lt;/h1>
&lt;p>The provider used here is &lt;a class="link" href="https://registry.terraform.io/providers/Chaotic-Logic/discord/latest" target="_blank" rel="noopener"
>discord&lt;/a> by &lt;a class="link" href="https://registry.terraform.io/namespaces/Chaotic-Logic" target="_blank" rel="noopener"
>Chaotic Logic&lt;/a> (&lt;a class="link" href="https://github.com/Chaotic-Logic/terraform-provider-discord" target="_blank" rel="noopener"
>Source&lt;/a>).&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="get-started">Get started&lt;/h1>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>Make sure you have your Discord API token ready&lt;/em>&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="prepare-terraform">Prepare Terraform&lt;/h2>
&lt;p>To get Terraform ready, create a file in the same directory called &lt;code>provider.tf&lt;/code>, and paste the following information into it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">required_version&lt;/span> = &lt;span class="s2">&amp;#34;&amp;gt;= 0.13.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">required_providers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">discord&lt;/span> = &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">source&lt;/span> = &lt;span class="s2">&amp;#34;Chaotic-Logic/discord&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">version&lt;/span> = &lt;span class="s2">&amp;#34;0.0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">provider&lt;/span> &lt;span class="s2">&amp;#34;discord&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">token&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, get the required provider downloaded (&lt;code>cd&lt;/code> into your Terraform directory first):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">terraform init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-credentials-file">Create credentials file&lt;/h2>
&lt;p>Create a new directory, and &lt;code>cd&lt;/code> into it. Then create a file in there called &lt;code>credentials.auto.tfvars&lt;/code>.&lt;/p>
&lt;p>Paste the following information in:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">discord_token = &amp;#34;YourDiscordApiToken&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_name = &amp;#34;NewServerName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_region = &amp;#34;us-east&amp;#34; # Region to host in (Brazil | Europe | Hong Kong | India | Rapan | Russia | Singapore | South Africa | Sydney | US (Central | East | South | West))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">category_name = &amp;#34;NewCategoryName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">text_channel_name = &amp;#34;NewTextChannelName&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You&amp;rsquo;ll want to edit the values (in quotations) as needed, filling in &lt;code>discord_token&lt;/code> with &lt;em>your&lt;/em> API token received from &lt;a class="link" href="#obtain-discord-api-token" >here&lt;/a>, it would be best to choose a region closest to you.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="create-variables-file">Create variables file&lt;/h2>
&lt;p>While the &lt;code>credentials.auto.tfvars&lt;/code> assigns values to variables, the variables still need to be defined within Terraform. Create a file called &lt;code>variables.tf&lt;/code> to store these, paste the following contents (one per assigned variable from &lt;a class="link" href="#create-credentials-file" >above&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;discord_token&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_region&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;category_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;text_channel_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-a-server">Create a server&lt;/h2>
&lt;p>In the same directory as your &lt;code>provider.tf&lt;/code> file, create a file called &lt;code>createServer.tf&lt;/code>.&lt;/p>
&lt;p>Paste the following information:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Create a server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resource &amp;#34;discord_server&amp;#34; &amp;#34;my_server&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = var.server_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> region = var.server_region
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default_message_notifications = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Get newly created server&amp;#39;s ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data &amp;#34;discord_server&amp;#34; &amp;#34;createdServerInfo&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_id = resource.discord_server.my_server.id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_server.my_server&lt;/code> creates a Discord server with a given name and region assigned from the &lt;code>credentials.auto.tfvars&lt;/code> file.&lt;/li>
&lt;li>Then saves the &lt;code>id&lt;/code> of the server in &lt;code>data.discord_server.createdServerInfo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-a-text-channel">Create a text channel&lt;/h2>
&lt;p>Now, we need to add a general channel for the server!&lt;/p>
&lt;p>I found the provider requires a category channel needs created, and channels be placed under that category&amp;hellip; so we can do this in one shot:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_category_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">category_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_text_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">lower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text_channel_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">category&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-1">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_category_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; category, which also depends on &lt;code>data.discords_server.createdServerInfo&lt;/code> to contain information (ensuring the server is created before the category is)
&lt;ul>
&lt;li>This places the category in the server that we created by supplying its &lt;code>id&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The block &lt;code>discord_text_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; text channel, which falls under the &amp;ldquo;general&amp;rdquo; category. Just like the category depends on the server to exist, this text channel depends on the category to exist.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-an-invite">Create an invite&lt;/h2>
&lt;p>Now, we need a way to actually see all of the work Terraform will perform. Since a &lt;a class="link" href="https://discord.com/developers/docs/intro#bots-and-apps" target="_blank" rel="noopener"
>Bot&lt;/a> is what created the server and everything in it, we need an invite so our own user can join the server and interact with it.&lt;/p>
&lt;p>So, create yet &lt;strong>another&lt;/strong> file, call this one &lt;code>createServerInvite.tf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_invite&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;inviteMe&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">channel_id&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_text_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">max_age&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">output&lt;/span> &lt;span class="s2">&amp;#34;invite_info&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">value&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_invite&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inviteMe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-2">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The &lt;code>discord_invite.inviteMe&lt;/code> block will create a non-expiring invite code that we can use to join the server, placing the invite under the channel we created earlier (by &lt;code>id&lt;/code>)&lt;/li>
&lt;li>The &lt;code>output.invite_info&lt;/code> block will print the invite code as a string to the terminal in a cleaner, more easily-found fashion.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="let-terraform-do-the-work-and-join-your-server">Let Terraform do the work, and join your server!&lt;/h2>
&lt;p>Now, open a terminal session, &lt;code>cd&lt;/code> into your Terraform files directory and run &lt;code>terraform plan&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This will show you what Terraform will do
&lt;ul>
&lt;li>You may have to correct some errors before you can proceed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Then, just run &lt;code>terraform apply -auto-approve&lt;/code> to create the server.&lt;/p>
&lt;p> &lt;/p>
&lt;p>In the terminal, something like this will show:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Outputs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">invite_info = &amp;#34;kvdyTVBuUs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>This &lt;code>invite_info&lt;/code> is what you need to join the server. To do this:&lt;/p>
&lt;ul>
&lt;li>Open your Discord client&lt;/li>
&lt;li>Click the &amp;ldquo;+&amp;rdquo; button under the list of joined servers to &amp;ldquo;Add a Server&amp;rdquo;&lt;/li>
&lt;li>Under &amp;ldquo;Have an invite already?&amp;rdquo;, click the &amp;ldquo;Join Server&amp;rdquo; button&lt;/li>
&lt;li>Enter the code given by the terminal (you don&amp;rsquo;t need a URL, just the code), and click &amp;ldquo;Join Server&amp;rdquo;!&lt;/li>
&lt;/ul>
&lt;p>You should now be a member of the new server, and you should also see a shiny new text channel titled &lt;code>general&lt;/code>.&lt;/p></description></item><item><title>Create a Static Website</title><link>https://thequib.github.io/p/create-a-static-website/</link><pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/create-a-static-website/</guid><description>&lt;p>A static website is a plain and simple site with some HTML and CSS, without the need for a database or a beefy server.&lt;/p>
&lt;p>Hugo is one of many different static site generators. The most popular is called &lt;a class="link" href="https://jekyllrb.com/" target="_blank" rel="noopener"
>Jekyll&lt;/a>, and is a bit simpler to use than Hugo. It&amp;rsquo;s mostly personal preference, but here we&amp;rsquo;ll be going through setup for Hugo.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A computer running Windows / Mac / Linux / OpenBSD / FreeBSD&lt;/li>
&lt;li>IDE that supports YAML and Markdown&lt;/li>
&lt;li>Basic command line knowledge&lt;/li>
&lt;li>Basic understanding of websites (HTML, CSS)&lt;/li>
&lt;/ul>
&lt;p>In this post, I&amp;rsquo;ll be using Visual Studio Code as my IDE, you can download that &lt;a class="link" href="https://code.visualstudio.com/download" target="_blank" rel="noopener"
>here&lt;/a> if you are interested.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="install-hugo">Install Hugo&lt;/h1>
&lt;p>Firstly, you&amp;rsquo;ll have to install Hugo. This differs between operating systems&amp;hellip; But the official instructions can be found &lt;a class="link" href="https://gohugo.io/getting-started/installing/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>Below, you can find instructions for Windows and Linux systems.&lt;/p>
&lt;h2 id="install-on-windows">Install on Windows&lt;/h2>
&lt;p>The best way to install on Windows is to use the &lt;a class="link" href="https://chocolatey.org/" target="_blank" rel="noopener"
>chocolatey&lt;/a> method. You can find installation instructions for that &lt;a class="link" href="https://chocolatey.org/install#individual" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p>
&lt;p>Once that is installed, run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ps" data-lang="ps">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">choco&lt;/span> &lt;span class="nf">install&lt;/span> &lt;span class="nf">hugo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="install-on-linux">Install on Linux&lt;/h2>
&lt;p>If you want to use Linux, I found it&amp;rsquo;s best to get the latest version from Hugo&amp;rsquo;s GitHub repo &lt;a class="link" href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener"
>releases&lt;/a> page. If you try to install using apt, it will install an older version.&lt;/p>
&lt;p>Download the latest release to a directory of your choosing&lt;/p>
&lt;p>Ex:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget https://github.com/gohugoio/hugo/releases/hugo_0.96.0_Linux-64it.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo dpkg -i hugo_0.96.0_Linux-64it.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="confirm-installation">Confirm installation&lt;/h2>
&lt;p>To confirm you&amp;rsquo;ve installed Hugo, just run &lt;code>hugo --version&lt;/code> in your command line&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="generate-hugo-site-files">Generate Hugo site files&lt;/h1>
&lt;p>To get started, will need to generate site files that you can edit&lt;/p>
&lt;ol>
&lt;li>Open a terminal / command prompt&lt;/li>
&lt;li>&lt;code>cd&lt;/code> into an empty directory on your machine&lt;/li>
&lt;li>Run &lt;code>hugo new site sitename&lt;/code>&lt;/li>
&lt;li>Run &lt;code>ls&lt;/code> to view all of the new files&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="add-theme-to-site">Add theme to site&lt;/h1>
&lt;p>First thing you will need to do after creating a site is to add a theme to it. You can find a whole big list of themes directly from Hugo&amp;rsquo;s website &lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>There are two methods to add a theme to a site&amp;hellip; Via a git submodule or just copying all theme files into your site.&lt;/p>
&lt;p>In this example, I will be using the &lt;a class="link" href="https://github.com/adityatelange/hugo-PaperMod" target="_blank" rel="noopener"
>PaperMod&lt;/a>.&lt;/p>
&lt;h2 id="git-submodule-method">Git Submodule Method&lt;/h2>
&lt;p>The benefit to cloning a submodule from git is you can quickly update the theme without having to re-copy all files manually. Git will take care of this for you :)&lt;/p>
&lt;ol>
&lt;li>Find the theme you want, and go to its GitHub repository.&lt;/li>
&lt;li>Copy the URL of the repository&lt;/li>
&lt;li>Open a terminal session, &lt;code>cd&lt;/code> in to your new site directory&lt;/li>
&lt;li>Run: &lt;code>git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod&lt;/code> &lt;em>(substituting the URL of your chosen theme)&lt;/em>&lt;/li>
&lt;li>To update the submodule, run &lt;code>git submodule update --remote --merge&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;em>Note: If your site is in a git repository, you must run &lt;code>git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod&lt;/code> to pull the submodule, as this is not done by default&lt;/em>&lt;/p>
&lt;h2 id="copy-method">Copy Method&lt;/h2>
&lt;p>You can also just copy the contents of the repository by clicking the &amp;ldquo;Code&amp;rdquo; button on the GitHub repo, extract the files from the downloaded &lt;code>zip&lt;/code> file, and place those in your &lt;code>themes&lt;/code> folder.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/createastaticwebsite/gitHubCodeButton.png"
loading="lazy"
alt="GitHub Code Button"
>&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="file-structure">File structure&lt;/h1>
&lt;p>As you may have noticed, Hugo created a bunch of directories for you, including the &lt;code>themes&lt;/code> directory from the last section.&lt;/p>
&lt;p>The most notable and important directories are:&lt;/p>
&lt;ul>
&lt;li>content
&lt;ul>
&lt;li>Storage for Markdown files that will be used to generate pages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>layouts
&lt;ul>
&lt;li>Storage for HTML files that are used as templates to place markdown data into&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>static
&lt;ul>
&lt;li>Storage for all static files the website will use, such as CSS and image files&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>themes
&lt;ul>
&lt;li>Stores the theme you are using for your site&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="site-configuration">Site configuration&lt;/h1>
&lt;p>Each site contains a configuration file, this can be either &lt;code>toml&lt;/code> or &lt;code>yaml&lt;/code> file types, and using one over another is dependent first on what your theme supports, and personal preference.&lt;/p>
&lt;p>Typically, it is best to reference your chosen theme&amp;rsquo;s documentation to get base configuration to get started.&lt;/p>
&lt;p>The default &lt;code>config.yml&lt;/code> file for PaperMod can be found &lt;a class="link" href="https://github.com/adityatelange/hugo-PaperMod/blob/exampleSite/config.yml" target="_blank" rel="noopener"
>here&lt;/a>. Feel free to make changes as you see fit.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="create-your-first-page">Create your first page&lt;/h1>
&lt;p>Now it is time to create your first page!&lt;/p>
&lt;p>First create a file named &lt;code>about.md&lt;/code> under the &lt;code>content&lt;/code> directory.&lt;/p>
&lt;p>Now, paste in the following lines:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Markdown" data-lang="Markdown">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title: &amp;#34;About&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description: &amp;#34;Description of page.&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">aliases: [&amp;#34;contact&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">author: &amp;#34;Your Name&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Make sure to save the file.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="view-your-configured-site">View your configured site&lt;/h1>
&lt;p>To spin up a quick webserver on your local machine, run the command &lt;code>hugo server&lt;/code> in the directory containing your site files.&lt;/p>
&lt;p>This will generate the website files, and serve an HTTP server locally on your machine (the output of the command will give you the url).&lt;/p>
&lt;p>By default, Hugo will server on port &lt;code>1313&lt;/code>, so you can open a web browser and go to http://localhost:1313&lt;/p>
&lt;p> &lt;/p>
&lt;p>Once you&amp;rsquo;ve done this, there is your new site! If you want to check out the &lt;code>about.md&lt;/code> page we created above, you can navigate to http://localhost:1313/about.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="extra-note">Extra note&lt;/h1>
&lt;p>If you want to generate all HTML files for this site, run the command &lt;code>hugo -v&lt;/code>, this will create a directory named &lt;code>public&lt;/code> and you can copy the files there to your webserver of choice.&lt;/p></description></item><item><title>UniFi Doorbell G4 Custom Chime</title><link>https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/unifi-doorbell-g4-custom-chime/</guid><description>&lt;p>So, I just got my new UniFi G4 Doorbell installed. Out of the box, it’s great! I can view live video, past video, and spy on my dog when she’s in my front yard… All with my data being stored on my local network with no subscription fee.&lt;/p>
&lt;p>While the out of box experience is great, I couldn’t help myself but look up how I can get my own ring (or &amp;ldquo;chime&amp;rdquo; as Ubiquiti calls it) uploaded to my doorbell. This requires a bit of work using some SSH, but it’s extremely fun to play around with.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h1 id="the-scoop">The scoop&lt;/h1>
&lt;p>While you can do this all manually, the doorbell sadly resets back to it’s default chime when restarted. So as an example, if you loose power, your doorbell will have it’s original chime again.&lt;/p>
&lt;p>This is no fun, so I made a script for you to use! You can find it on my personal GitHub page at &lt;a class="link" href="https://github.com/TheQuib/G4-Doorbell-Custom-Chime" target="_blank" rel="noopener"
>https://github.com/TheQuib/G4-Doorbell-Custom-Chime&lt;/a>&lt;/p>
&lt;ul>
&lt;li>You will need to enable SSH on your doorbell before use, please refer to this section of this post to do so&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>If you want to learn how to do this yourself, please continue on!&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="enable-ssh-on-doorbell">Enable SSH on Doorbell&lt;/h1>
&lt;p>This process is kinda hard to find, but enabling SSH on your UniFi Protect console (whether that be a Dream Machine, Cloud Key Gen 2+, or UniFi NVR) is pretty simple, and a quick google search away… so that won’t be covered here.&lt;/p>
&lt;p>&lt;strong>So first off, you will need to SSH into your UniFi Protect Console&lt;/strong>&lt;/p>
&lt;p>&lt;em>Dream Machine Only:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">unifi-os shell
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>&lt;em>Dream Mahcine + All Other Devices:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Edit the file &lt;code>/etc/unifi-protect/config.json&lt;/code>
&lt;ul>
&lt;li>If this file does not exist already, don&amp;rsquo;t worry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nano /etc/unifi-protect/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>Enter the following configuration to the end of the file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;enableSsh&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>Save the file with the following commands:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl+X&lt;/code>&lt;/li>
&lt;li>&lt;code>y&lt;/code>&lt;/li>
&lt;li>&lt;code>enter&lt;/code>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>You should now be able to SSH to all of your UniFi Protect devices! The username is ubnt and the password can be set in your UniFi/Protect Console settings.&lt;/p>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="prepare-audio-file">Prepare audio file&lt;/h1>
&lt;p>Now, you will need to get a working &lt;code>.wav&lt;/code> file to be later uploaded to your doorbell. I would recommend to use a clip that is 10 seconds maximum (though I haven’t tested lengths yet).&lt;/p>
&lt;p>&lt;em>If you’re familiar with how to use Audacity, here are the file specifications you need:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Specs:
&lt;ul>
&lt;li>Mono&lt;/li>
&lt;li>44100Hz&lt;/li>
&lt;li>16 bit&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A good idea to:
&lt;ul>
&lt;li>Normalize the audio&lt;/li>
&lt;li>Apply a limiter, and make sure make-up gain is applied&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>First, get your audio file that you would like to trim down.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Now, open the file in Audacity&lt;/p>
&lt;ul>
&lt;li>The audio file will show in the main area, click the down arrow next to the file name
&lt;ul>
&lt;li>Click &amp;ldquo;Split stereo to mono&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Delete the second track&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/unificustomchime/trainHornDownArrow.png"
loading="lazy"
alt="Down Arrow Image"
>&lt;/p>
&lt;ul>
&lt;li>Make sure the track is selected&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/unificustomchime/trainHornSelect.png"
loading="lazy"
alt="Train Horn Select"
>&lt;/p>
&lt;ul>
&lt;li>In the toolbar, click &amp;ldquo;Effect&amp;rdquo; &amp;gt; Normalize
&lt;ul>
&lt;li>Leave the default settings&lt;/li>
&lt;li>Click &amp;ldquo;OK&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/unificustomchime/trainHornNormalize.png"
loading="lazy"
alt="Normalize Window"
>&lt;/p>
&lt;ul>
&lt;li>Again in the toolbar, click &amp;ldquo;Effect&amp;rdquo; &amp;gt; Limiter
&lt;ul>
&lt;li>Leave the default settings&lt;/li>
&lt;li>Make sure to &amp;ldquo;Apply Make-up Gain&amp;rdquo; is set to &amp;ldquo;Yes&amp;rdquo;&lt;/li>
&lt;li>Click &amp;ldquo;OK&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/unificustomchime/trainHornLimiter.png"
loading="lazy"
alt="Limiter Window"
>&lt;/p>
&lt;ul>
&lt;li>Make sure the &amp;ldquo;Project Rate (Hz)&amp;rdquo; at the bottom-left of Audacity is set to &amp;ldquo;44100&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/unificustomchime/trainHornProjectRate.png"
loading="lazy"
alt="Project Rate"
>&lt;/p>
&lt;ul>
&lt;li>Click &amp;ldquo;File&amp;rdquo; &amp;gt; &amp;ldquo;Export&amp;rdquo; &amp;gt; &amp;ldquo;Export as WAV&amp;rdquo;
&lt;ul>
&lt;li>Set &amp;ldquo;Encoding&amp;rdquo; to &amp;ldquo;Signed 16-bit PCM&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Save the file to a location you&amp;rsquo;ll remember&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="upload-audio-file">Upload audio file&lt;/h1>
&lt;p>Now we get to upload the audio file to the doorbell!&lt;/p>
&lt;p>To do this, you’ll need to open a terminal of your choice (such as CMD in Windows)&lt;/p>
&lt;p>Navigate to where you saved your WAV file using the cd command.&lt;/p>
&lt;p>Ex:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> C:&lt;span class="se">\U&lt;/span>sers&lt;span class="se">\Q&lt;/span>uib&lt;span class="se">\D&lt;/span>esktop&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, we&amp;rsquo;ll use the &lt;code>SCP&lt;/code> command to copy the file to the doorbell via SSH. General usage of SCP is:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">scp localFile user@remoteHost:/path/to/remoteFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lets put our variables in there. In my case, I will be using a file name &lt;code>trainHorn.wav&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">scp trainHorn.wav ubnt@192.168.10.100:trainHorn.wav
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>NOTE: Make sure you remember this file name for later&lt;/strong>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>You may notice t hat I didn&amp;rsquo;t specify a path on the rmoet host, this is because we&amp;rsquo;ll let the file residei n the default directory of &lt;code>/etc/persistent&lt;/code> on the doorbell, and later create a symlink for that file to a different directory.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="create-symlink-of-audio-file">Create symlink of audio file&lt;/h1>
&lt;p>Now, we’ll backup the original chime.wav just so it can easily be reset later if desired, and then create a symlink from our uploaded file to where chime.wav exists.&lt;/p>
&lt;p>The reason this is done is because the doorbell seems to only like reading a symlink instead of a regular file when playing the chime sound.&lt;/p>
&lt;p>**First, lets create the backup:&lt;/p>
&lt;ul>
&lt;li>navigate to the &lt;code>/etc/sounds/&lt;/code> directory and list the files to see what&amp;rsquo;s in there:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /etc/sounds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This should show a list of audio files, one of them being &lt;code>chime.wav&lt;/code>. Lets create a backup of that:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mv chime.wav chime.wav.back
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Now, lets create a symlink of our uploaded file, make sure you replace &lt;code>trainHorn.wav&lt;/code> with the name of the file you uploaded earlier, and list the files in &lt;code>/etc/sounds/&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ln -s /etc/persistent/trainHorn.wav /etc/sounds/chime.wav
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>The &lt;code>ls&lt;/code> command should now show two &lt;code>chime&lt;/code> files:
&lt;ul>
&lt;li>&lt;code>chime.wav&lt;/code>&lt;/li>
&lt;li>&lt;code>chime.wav.bak&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The new &lt;code>chime.wav&lt;/code> file is the symlink you just created, and now the current doorbell chime!&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="finishing-up">Finishing up&lt;/h1>
&lt;p>Now you&amp;rsquo;re all done! You can go ahead and test out the new chime by pressing the ring button on your doorbell, and it should play your uploaded file.&lt;/p></description></item><item><title>Getting Started with Network Automation</title><link>https://thequib.github.io/p/getting-started-with-network-automation/</link><pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-network-automation/</guid><description>&lt;p>Ever though about an easier way to configure tons of network devices easily? Python is definitely the answer to get started, and as long as you have a basic understanding of programming, it&amp;rsquo;s pretty simple, and tons of fun!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Python version 3.9 or higher&lt;/li>
&lt;li>An IDE that supports the Python language&lt;/li>
&lt;li>Some sort of appliance you can connect to via SSH
&lt;ul>
&lt;li>I will be using a Cisco IOS appliance here running in GNS3&lt;/li>
&lt;li>A Linux VM will also work&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In this post, I&amp;rsquo;ll be using Visual Studio Code as my IDE, you can download that &lt;a class="link" href="https://code.visualstudio.com/download" target="_blank" rel="noopener"
>here&lt;/a> if you are interested.&lt;/p>
&lt;p>You can find all of my &lt;a class="link" href="https://github.com/TheQuib/python-network-automation" target="_blank" rel="noopener"
>scripts&lt;/a>, and other projects on my &lt;a class="link" href="https://github.com/TheQuib" target="_blank" rel="noopener"
>GitHub page&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="before-you-start">Before you Start&lt;/h1>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>This is only if you are using Visual Studio Code as your IDE&lt;/em>&lt;/p>
&lt;p>VS Code gets a little funky when it comes to installed python libraries. First, make sure you install the latest version of Python from the Microsoft Store&amp;hellip; Code will look to the installation path of this by default.&lt;/p>
&lt;p>After installation:&lt;/p>
&lt;ol>
&lt;li>Open VS Code&lt;/li>
&lt;li>Open or create a Python file (use the extension &lt;em>.py&lt;/em> to tell Code to use Python)&lt;/li>
&lt;li>On the bottom-left of the window, click the Python version number, this should open a box at the top of the screen&lt;/li>
&lt;li>Select &amp;ldquo;&lt;em>Entire Workspace&lt;/em>&amp;rdquo;&lt;/li>
&lt;li>Choose the following option from the list:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gettingstartedwithnetworkautomation/selectInterpreter.png"
loading="lazy"
alt="Select Python Interpreter"
>&lt;/p>
&lt;p>Now you should be all goood to go!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="installing-netmiko">Installing Netmiko&lt;/h1>
&lt;p>Netmiko is, in my opinion, the best all-in-one network automation tool to use in Python. Netmiko has a multitude of supported devices; including Linux, Cisco (IOS, NX-OS, etc), HP Enterprise, and TONS more.&lt;/p>
&lt;p>To install Netmiko on your computer, open a terminal and type:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python3 -m pip install netmiko
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, open your IDE and create a new Python file, enter the following code and run it to test installation:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you run this, and it doesn&amp;rsquo;t do anything, that&amp;rsquo;s good! This just means that the library imported with no problems.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="setting-up-netmiko">Setting up Netmiko&lt;/h1>
&lt;p>Network automation is all about doing the similar tasks on tons of devices from a single place. That doesn&amp;rsquo;t mean you have to have a hundred devices to do some automation work.&lt;/p>
&lt;p>In my case, I will be using the Cisco Modeling Labs IOSv router image (in GNS3), so my commands will be IOS specific. I&amp;rsquo;ll have some information down below so you can set up a Linux machine if you want as well :)&lt;/p>
&lt;p>First, we&amp;rsquo;ll need to import the ConnectHandler module from Netmiko:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># NEtwork automation module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then let&amp;rsquo;s get some username and password information from the user:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Module used to hide passwords in the console&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for username&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a username to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for password using getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a password to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for secret password&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">secret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a secret password to enable with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now we&amp;rsquo;ll want to set up information that Netmiko will use for the actual connection. Type the following code and note the comments:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;ip address&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This code creates a Python dictionary that contains the items &lt;em>device_type&lt;/em>, &lt;em>host&lt;/em>, &lt;em>password&lt;/em>, &lt;em>secret&lt;/em>, and &lt;em>use_keys&lt;/em>, and then sets a variable to the string &lt;em>&amp;lsquo;ip address&amp;rsquo;&lt;/em>.&lt;/p>
&lt;p>Most of these are pretty self explanatory, &lt;em>use_keys&lt;/em> will bypass the prompt SSH gives back when connecting to an unknown device for the first time.&lt;/p>
&lt;p>If you wanted to try this on multiple devices, tweak your code to use a list for hosts and a for loop as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hosts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;4.3.2.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="ow">in&lt;/span>  &lt;span class="n">hosts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;sh run&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="sending-your-first-command">Sending your first command&lt;/h1>
&lt;p>Now we&amp;rsquo;re ready to send a command to your device / devices! Let&amp;rsquo;s get started by creating a Netmiko &lt;code>ConnectHandler&lt;/code> variable by adding this line:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">hostConfig&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, we can act on the variable &lt;em>ssh&lt;/em> to send commands to our device. Using &lt;em>send_command&lt;/em>, which is used specifically for sending a single command via Netmiko (this will utilize the &lt;em>command&lt;/em> variable we set in the previous step):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now go ahead and run your program! If you put everything in correctly, you should see the output of the Linux command &lt;code>ip addr&lt;/code> in your terminal.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="sending-multiple-commands">Sending multiple commands&lt;/h1>
&lt;p>Automation isn&amp;rsquo;t just about sending a single command to devices. While this can be pretty useful, especially for gathering some information (like switch configs), sending multiple commands can prove to be extremely useful and time-saving, especially when you&amp;rsquo;re configuring tons of devices.&lt;/p>
&lt;p>In the previous step, we used the function &lt;strong>send_command()&lt;/strong>, which only sends one command. For multiple configuration commands, there is a function called &lt;strong>send_config_set()&lt;/strong>, which accepts a list in its parameters.&lt;/p>
&lt;p>So first, let&amp;rsquo;s create a list:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;int gi0/1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ip address 172.16.0.1 255.255.0.0&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, instead of &lt;em>send_command()&lt;/em>, we can use the following to send our &lt;em>config&lt;/em> variable instead:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_config_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Getting Started with GNS3</title><link>https://thequib.github.io/p/getting-started-with-gns3/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-gns3/</guid><description>&lt;p>When diving into learning networking, GNS3 is a great tool to get started. GNS3 allows you to build out and design networks without having to buy all of the expensive hardware to do so.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A GNS3 VM server, or server running on your local machine
&lt;ul>
&lt;li>Check out &lt;a class="link" href="https://thequib.github.io/gns3-vm-in-proxmox-ve" >GNS3 in Proxmox VE&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GNS3 client on your local computer
&lt;ul>
&lt;li>Download the GNS3 Client from the &lt;a class="link" href="https://www.gns3.com/software/download" target="_blank" rel="noopener"
>official website&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="optional">Optional&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://learningnetworkstore.cisco.com/cisco-modeling-labs-personal/cisco-cml-personal" target="_blank" rel="noopener"
>Cisco Modeling Labs IOSv router/switch images&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="loading-gns3">Loading GNS3&lt;/h1>
&lt;p>Start by opening your GNS3 client. Here, a dialog shows to create a new project.&lt;/p>
&lt;ul>
&lt;li>If you are running the GNS3 server on your local machine, go ahead and create a new project, name it whatever you want&lt;/li>
&lt;li>If you are running the GNS3 server on a remote machine
&lt;ul>
&lt;li>Go to Edit &amp;gt; Preferences &amp;gt; Server&lt;/li>
&lt;li>Change &amp;lsquo;Host&amp;rsquo; to the IP address of your server&lt;/li>
&lt;li>Change the port to &amp;lsquo;80 TCP&amp;rsquo; (Or the port you have it set to if you&amp;rsquo;ve changed it)&lt;/li>
&lt;li>Fill out the &amp;lsquo;user&amp;rsquo; and &amp;lsquo;password&amp;rsquo; fields (Default user is &amp;lsquo;gns3&amp;rsquo; and password is &amp;lsquo;password&amp;rsquo;)&lt;/li>
&lt;li>Click &amp;lsquo;Apply&amp;rsquo; and close the preferences window&lt;/li>
&lt;li>Go to File &amp;gt; New blank project, name the new project whatever you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="installing-an-appliance">Installing an appliance&lt;/h1>
&lt;p>On the left hand side of the window, you will find a toolbar with the following icons:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gettingstartedwithgns3/gns3-sidebarItems.png"
loading="lazy"
alt="GNS3 - Sidebar Items"
>&lt;/p>
&lt;p>From top to bottom, these items are &lt;em>Routers&lt;/em>, &lt;em>Switches&lt;/em>, &lt;em>End Devices&lt;/em>, &lt;em>Security Devices&lt;/em>, &lt;em>All Devices&lt;/em>, and &lt;em>Add a link&lt;/em>. These buttons contain what are called templates, templates are virtual devices that can be manipulated just as if they were the real deal.&lt;/p>
&lt;p>All of these are relatively self explanatory, the last &lt;em>&amp;ldquo;Add a link&amp;rdquo;&lt;/em> is for connecting devices together using a virtual network cable.&lt;/p>
&lt;p>To get started and testing things, go to &lt;em>End Devices&lt;/em> and click &amp;ldquo;+ New template&amp;rdquo;. You will want to install an appliance from the server, so click &amp;ldquo;Next &amp;gt;&amp;rdquo;, expand &amp;ldquo;Guests&amp;rdquo;, and scroll to find an appliance that interests you. I&amp;rsquo;ll be choosing the &amp;ldquo;Ubuntu Docker Guest&amp;rdquo; as docker containers start up in just a few seconds.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gettingstartedwithgns3/gns3-applianceSelection.png"
loading="lazy"
alt="GNS3 - Appliance Selection"
>&lt;/p>
&lt;p>Once you have found the device you want, click &amp;ldquo;Install&amp;rdquo;, then &amp;ldquo;Next&amp;rdquo; to install on the main server, then &amp;ldquo;Finish&amp;rdquo;. Now, the appliance should be installed!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="adding-devices-to-a-project">Adding devices to a project&lt;/h1>
&lt;p>Now, the newly installed appliance should show up under &lt;em>End Devices&lt;/em>. Click this, and drag the device into the blank space of the project. This will do some downloading work if you have just installed it, then add itself into the project.&lt;/p>
&lt;p>To use the device, you can either click the green play button at the top of the window (this would start all devices in the project), or you can right click an individual device, and click &amp;ldquo;Start&amp;rdquo;.&lt;/p>
&lt;p>You can confirm that the device has started by looking at the &amp;ldquo;Topology Summary&amp;rdquo; on the top right of the window. A green circle indicates that a device is online.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gettingstartedwithgns3/gns3-applianceOnline.png"
loading="lazy"
alt="GNS3 - Appliance Online"
>&lt;/p>
&lt;p>To get console access to this docker guest, you can double click on the node, or right click and hit &amp;ldquo;console&amp;rdquo;. This, by default, will open the Solarwinds Solar-PuTTY application on your computer. You can interact with the device just as if it were a physical one.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="final-thoughts">Final thoughts&lt;/h1>
&lt;p>Keep in mind, each devices has its own configuration settings that you can mess with, as well as console types depending on if the device has a GUI or not (Such as between the Ubuntu Docker and Ubuntu Desktop guests). Some of these settings include amount of CPU cores, RAM, and type of console access you have to the device.&lt;/p>
&lt;p>Feel free to play around with these and figure some stuff out! The beauty of GNS3 is that you can do anything you want, and not have to worry about breaking anything of importance :)&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>And there you have it! Go ahead and play with the different end devices, as well as switching/routing appliances that exist. If you have the Cisco Modeling labs subscription, you are also able to import the IOSv images into GNS3, which will allow you to interact and play with Cisco IOS devices.&lt;/p></description></item><item><title>GNS3 VM in Proxmox VE</title><link>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</guid><description>&lt;p>Do you use Proxmox VE as your main homelab hypervisor, and want to run the GNS3 VM on it? You&amp;rsquo;re in luck, below you can find steps on how to do just that as long as you meet a few server requirements.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h1 id="requirements">Requirements&lt;/h1>
&lt;ul>
&lt;li>Proxmox VE with 3-4&lt;/li>
&lt;li>A VM storage device that supports .qcow2 files&lt;/li>
&lt;li>Location of VM disks on your Proxmox Server&lt;/li>
&lt;li>FTP and Shell access to your Proxmox Server&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="download-the-ova-file">Download the .ova file&lt;/h1>
&lt;p>Head over to the GNS3 website and download the ESXi VM &lt;a class="link" href="https://gns3.com/software/download-vm" target="_blank" rel="noopener"
>https://gns3.com/software/download-vm&lt;/a>&lt;/p>
&lt;p>Keep in mind, this will ask you to create an account before you can download.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="upload-the-ova-file-to-your-server">Upload the .ova file to your server&lt;/h1>
&lt;p>Now you will need to get the downloaded file onto your Proxmox server&lt;/p>
&lt;ul>
&lt;li>Open your favorite FTP client on your computer. In my case, I&amp;rsquo;m using WinSCP to do this&lt;/li>
&lt;li>Connect to your Proxmox server using either its IP address or hostname&lt;/li>
&lt;li>On the left pane (your local machine), navigate to where the &lt;code>.ova&lt;/code> file is&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/winScp_localFile.png"
loading="lazy"
alt="Local OVA"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>On the right pane (the server), create a new directory, naming whatever you want&lt;/li>
&lt;li>I&amp;rsquo;ll be putting mine underthe &lt;code>/root&lt;/code> directory&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/winScp_rootDir.png"
loading="lazy"
alt="Remote Directory"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Now, drag the &lt;code>.ova&lt;/code> file from the left side to the right side, and you will see the upload begin&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/winScp_upload.png"
loading="lazy"
alt="File Upload"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="create-a-vm-in-proxmox">Create a VM in Proxmox&lt;/h1>
&lt;p>Now we&amp;rsquo;re going to want to create a VM in Proxmox that we will be adding hard disk to&lt;/p>
&lt;ul>
&lt;li>Create a VM by clicking &amp;ldquo;Create VM&amp;rdquo; on the top right&lt;/li>
&lt;li>Under &amp;ldquo;General&amp;rdquo;, you can use any ID starting from 100 that you like, take note of this. Name it whatever you would like&lt;/li>
&lt;li>Under &amp;ldquo;OS&amp;rdquo;, select the radio button to not use any media&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/createVm_media.png"
loading="lazy"
alt="Create VM - Media"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;System&amp;rdquo;, select your preferred graphics card (I will be using the VirtIO option), and make sure &amp;ldquo;SeaBIOS&amp;rdquo; is selected&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/createVm_system.png"
loading="lazy"
alt="Create VM - System"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Storage&amp;rdquo;, make sure SCSI is selected, and a qcow2 compatible storage device is selected&lt;/li>
&lt;li>Under CPU, give it at least 3 cores to run with, and make sure to select &amp;lsquo;host&amp;rsquo; for the type&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/createVm_cpu.png"
loading="lazy"
alt="Create VM - CPU"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Memory&amp;rdquo;, give it at least 4096MB of RAM&lt;/li>
&lt;li>Set your preferred settings under &amp;ldquo;Network&amp;rdquo;, the default model will work just fine and should have the best performance&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="create-secondary-hard-disk">Create secondary hard disk&lt;/h1>
&lt;ul>
&lt;li>Navigate to the newly created VM&lt;/li>
&lt;li>Go to the &amp;ldquo;Hardware&amp;rdquo; tab&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/hardware_add.png"
loading="lazy"
alt="VM - Add Hardware"
>&lt;/p>
&lt;ul>
&lt;li>Select the same storage device that you chose when creating the VM&lt;/li>
&lt;li>Change the size to whatever you would like to make it&lt;/li>
&lt;li>Click the &amp;lsquo;Add&amp;rsquo; button at the bottom&lt;/li>
&lt;li>You should now have 2 hard disks in the machine, &amp;lsquo;scsi0&amp;rsquo; and &amp;lsquo;scsi1&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="extract-files-from-the-ova-file">Extract files from the .ova file&lt;/h1>
&lt;p>We will need to grab files that are packaged into the file downloaded from the GNS3 website. .ova files typically contain 2 main parts: VM Configuration settings (we just did this), and virtual hard disks (In the .vmdk format)&lt;/p>
&lt;ul>
&lt;li>First access the shell of the Proxmox server, this can be either over SSH, or using the shell tab in Proxmox&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/images/posts/gns3InProxmoxVe/proxmoxHost_shell.png"
loading="lazy"
alt="Proxmox Shell"
>&lt;/p>
&lt;ul>
&lt;li>Change your current directory to where you stored the .ova file earlier using the &amp;lsquo;cd&amp;rsquo; command. In my case, that would be:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /root/GNS2.2.20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Now, to extract the files using tar to the current directory, and list the new files&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tar -xvf *.ova
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will show the new files in the current directory, these should be:
&lt;ul>
&lt;li>&lt;code>GNS3 VM-disk001.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM-disk002.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM.ovf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The 2 &lt;code>.vmdk&lt;/code> files are the virtual hard disks, and the &lt;code>.ovf&lt;/code> file is the VM configuration file&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="convert-vmdk-files-to-qcow2-qemu-files">Convert .vmdk files to .qcow2 qemu files&lt;/h1>
&lt;p>In order for Proxmox to properly use the hard disks we just snatched, we need to convert them to .qcow2 (qemu) hard disks&lt;/p>
&lt;ul>
&lt;li>Get that VM ID you set earlier when creating the VM, I used 501 in my case&lt;/li>
&lt;li>Convert each file, replacing vmid with your VM ID:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="copy-the-newly-converted-qcow2-files">Copy the newly converted .qcow2 files&lt;/h1>
&lt;p>Now we can copy the files to the VM folder!&lt;/p>
&lt;ul>
&lt;li>Make sure you&amp;rsquo;re still in the same directory as the .qcow2 files&lt;/li>
&lt;li>Find the directory of the VM you will be copying the files to
&lt;ul>
&lt;li>In my case, my GNS3 VM is located at /mnt/pve/Proxmox-1-VM/images/501&lt;/li>
&lt;li>501 in this directory is my VM ID&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use the &lt;code>cp&lt;/code> command to copy the files to the vm directory&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-0.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-1.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-501-disk-0.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-501-disk-1.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="start-the-vm">Start the VM&lt;/h1>
&lt;p>Now you should be good to go! Try and start the VM, and head to the console tab. GNS3 should start to load, and you can begin creating your virtual networks!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h1 id="optional---install-qemu-guest-agent-on-gns3">Optional - Install qemu-guest-agent on GNS3&lt;/h1>
&lt;p>I know that when I have a VM in Proxmox, I like to get some quick information sometimes straight from the GUI&amp;hellip; such as the VM&amp;rsquo;s IP address. This is only possible if the qemu guest agent installed on the machine.&lt;/p>
&lt;p>Lucky for us, the GNS3 VM runs on Ubuntu, so this is pretty easy!&lt;/p>
&lt;ul>
&lt;li>Once GNS3 is loaded, go to the console tab, and press enter in the window to hit OK&lt;/li>
&lt;li>Arrow-down to the option &amp;ldquo;Shell&amp;rdquo; and hit enter&lt;/li>
&lt;li>In the shell, type the following commands:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install qemu-guest-agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start qemu-guest-agent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will update the repository, install the guest agent, and start the guest agent service&lt;/li>
&lt;li>Now, click the &amp;ldquo;Summary&amp;rdquo; tab of the VM in Proxmox, more information (such as the VM&amp;rsquo;s IP address) will now show right there!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Note: If the guest agent information doesn&amp;rsquo;t show, try reloading the web page&lt;/em>&lt;/p></description></item></channel></rss>