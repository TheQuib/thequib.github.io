<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IaC on QuibTech</title><link>https://thequib.github.io/tags/iac/</link><description>Recent content in IaC on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 27 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/tags/iac/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage infrastructure with Terraform Cloud</title><link>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/</guid><description>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/featuredImage.png" alt="Featured image of post Manage infrastructure with Terraform Cloud" />&lt;p>Yeah, Terraform is cool and all. But that&amp;rsquo;s typically done locally. The cloud is even better, and free.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="why-would-i-do-this">Why would I do this?&lt;/h2>
&lt;p>There are tons of reasons you may want to deploy with Terraform in the cloud. A few of my personal favorite highlights are&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Less load put on local hardware&lt;/li>
&lt;li>It&amp;rsquo;s still as simple as running locally&lt;/li>
&lt;li>It can be easily automated, especially if &lt;code>git&lt;/code> is used
&lt;ul>
&lt;li>Runs can occur on a push&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>It&amp;rsquo;s &lt;strong>free&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Knowledge with getting Terraform working locally&lt;/li>
&lt;li>An existing and &lt;em>working&lt;/em> Terraform project&lt;/li>
&lt;li>&lt;strong>FREE&lt;/strong> Terraform Cloud Account
&lt;ul>
&lt;li>&lt;a class="link" href="https://app.terraform.io/signup/account" target="_blank" rel="noopener"
>Get this here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="deployment-methods">Deployment Methods&lt;/h2>
&lt;p>As of May 2022, there are 3 methods to deploy code with Terraform Cloud:&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="#-method-1-version-control-workflow" >Version control workflow&lt;/a>
- Store your Terraform configuration in a git repository, and trigger runs based on pull requests and merges&lt;/li>
&lt;li>&lt;a class="link" href="#-method-2-cli-driven-workflow" >CLI-driven workflow&lt;/a>
- Trigger remote Terraform runs from your local command line&lt;/li>
&lt;li>API-driven workflow
- A more advanced option. Integrate Terraform into a larger pipeline using the Terraform API&lt;/li>
&lt;/ol>
&lt;p>For the purposes of this post, we will only be going over the first two: Version control and CLI-driven workflows.&lt;/p>
&lt;p>The reason? They are the most common, especially if you&amp;rsquo;re just getting started with Terraform. Most don&amp;rsquo;t have a need to run API-driven workflows.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-1-version-control-workflow">📕 &lt;strong>Method 1: Version control workflow&lt;/strong>&lt;/h2>
&lt;p>In this post, I will be using GitHub to keep my repositories. Any git provider will work, as long as it is internet-accesible. If you are new to git, this is typically a good place to start.&lt;/p>
&lt;p>This method is best used if you want to automate your workflows, as this can be done via updates to the repository.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="extra-requirements">Extra requirements&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://desktop.github.com/" target="_blank" rel="noopener"
>GitHub Desktop&lt;/a> is a super useful tool for pushing changes to a GitHub repo without the command line.&lt;/li>
&lt;li>If you don&amp;rsquo;t want to use this, and know how to use gitbash, that is perfectly fine too!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>NOTE&lt;/strong>&lt;/em>: If you structure your Terraform projects as I do, your repository created &lt;a class="link" href="#clone-repository-locally" >below&lt;/a>, you will need to update your &lt;code>.gitignore&lt;/code> file to include &lt;code>*.auto.tfvars&lt;/code> so that your credentials are not stored for just anyone to see (such as API tokens)&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="create-a-git-repository">Create a Git repository&lt;/h3>
&lt;p>Login into &lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>GitHub&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a new repository with the &amp;ldquo;New&amp;rdquo; button &lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton.png"
width="105"
height="42"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/github-newButton_hu1340ded5362da2ecf241505dd23953d3_1281_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="New Button"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/li>
&lt;li>Make sure this is set as &lt;code>Public&lt;/code> to make things a bit easier
&lt;ul>
&lt;li>Setting this as private would require setting up SSH keys for Terraform Cloud to read the repo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Give this repository a name, and initialize it with a &lt;code>README&lt;/code> file and choose the &lt;code>Terraform&lt;/code> &lt;code>.gitignore&lt;/code> template.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="clone-repository-locally">Clone repository locally&lt;/h3>
&lt;p>In GitHub desktop, login to your account, and add a new repository by searching for the one you just created.&lt;/p>
&lt;ul>
&lt;li>You&amp;rsquo;ll have to choose a location to store this, it would be best to keep this somewhere simple (such as a shorter path)&lt;/li>
&lt;/ul>
&lt;p>You can also clone the repository via the command line with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /path/to/directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/YourUserName/YourRepositoryName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>Version Control Workflow&lt;/code>&lt;/li>
&lt;li>Get connected to your git provider&lt;/li>
&lt;li>This will open a new window, asking you to sign into your provider&lt;/li>
&lt;li>In the list that shows, select the repository you will be using&lt;/li>
&lt;li>By default, the workspace name will auto-populate with the repo name, probably best to keep this for readability&amp;rsquo;s sake&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="add-variables-to-your-workspace">Add variables to your workspace&lt;/h3>
&lt;p>The best and safest way to store variables for Terraform is to actually use Terraform Cloud. To create variables to use for your project, click on the &lt;code>Variables&lt;/code> tab, and create each variable you have in your local project.&lt;/p>
&lt;p>Now Terraform Cloud is ready!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="add-terraform-configurations-to-repo">Add Terraform configurations to repo&lt;/h3>
&lt;p>Now, find your working terraform project, and copy &lt;em>ALL&lt;/em> of the files from there into your local repository location.&lt;/p>
&lt;p>Once they are copied in, bring GitHub Desktop back up, enter a &amp;ldquo;Commit Summary&amp;rdquo; on the bottom-left:  &lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message.png"
width="314"
height="281"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/commit-message_hu41da6f9157f83e0cd0d449e77449e47c_10754_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>And then at the top, push your changes to GitHub:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button.png"
width="340"
height="71"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/push-button_huabbe41b5e33ec5449aa2e50771782804_4582_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="478"
data-flex-basis="1149px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="stage-changes-in-terraform-cloud">Stage changes in Terraform Cloud&lt;/h3>
&lt;p>Back in Terraform Cloud, click the &lt;code>Overview&lt;/code> tab, and then &lt;code>Start new plan&lt;/code>&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>Once the plan is complete, it will show you the changes it will make!&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="run-plan">Run plan!&lt;/h3>
&lt;p>To run the latest plan, scroll to the bottom of the page and click &lt;code>Confirm and Apply&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This is the equivalent to running &lt;code>terraform plan -auto-approve&lt;/code> in the local CLI&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Now&amp;hellip; Watch the magic happen.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>If your plan had &lt;code>Outputs&lt;/code>, you can see those values by droping down the &amp;ldquo;Outputs&amp;rdquo; section:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs.png"
width="339"
height="161"
srcset="https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_480x0_resize_box_3.png 480w, https://thequib.github.io/p/manage-infrastructure-with-terraform-cloud/terraformCloud-outputs_hu26b0759bf22f0a86a8a6ade19a4f92e3_7650_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="destroy-infrastructure">Destroy infrastructure&lt;/h3>
&lt;p>To destroy the newly-created infrastructure, scroll back up to the top of the page, click &lt;code>Settings&lt;/code> &amp;gt; &lt;code>Destruction and Deletion&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enter your workspace name to confirm&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;code>Queue destroy plan&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the plan finishes, click &lt;code>Confirm and apply&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is the equivalent to running &lt;code>terraform destroy -auto-approve&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-method-2-cli-driven-workflow">⌨️ &lt;strong>Method 2: CLI-driven workflow&lt;/strong>&lt;/h2>
&lt;p>This method uses the local command-line to trigger workflows in Terraform Cloud. A command that is run locally will actually perform in the cloud, showing a &amp;ldquo;remote window&amp;rdquo; of the remote CLI locally. You&amp;rsquo;ll see what I mean shortly&amp;hellip;&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-ready">Get Ready&lt;/h3>
&lt;p>As always for Terraform, &lt;code>cd&lt;/code> into your project directory.&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="get-authenticated">Get authenticated&lt;/h3>
&lt;p>So first, once you have your &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud&lt;/a> account, we&amp;rsquo;ll need to log into to the terraform CLI.&lt;/p>
&lt;p>To do this, run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">terraform login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will prompt you to type &lt;code>yes&lt;/code> and automatically open a web browser to the page to create an access token.&lt;/p>
&lt;ul>
&lt;li>On this page, give the token a name, and hit create&lt;/li>
&lt;li>Then copy the token and paste it into your terminal session
&lt;ul>
&lt;li>&lt;em>Note&lt;/em>: This is the only time the token will show&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then you&amp;rsquo;re logged in!&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h3 id="set-up-terraform-cloud-1">Set up Terraform Cloud&lt;/h3>
&lt;p>Head over to the &lt;a class="link" href="https://app.terraform.io" target="_blank" rel="noopener"
>Terraform Cloud web interface&lt;/a>, and log in.&lt;/p>
&lt;ol>
&lt;li>Create a new &lt;code>Organization&lt;/code>, if needed.&lt;/li>
&lt;li>Create a new &lt;code>Workspace&lt;/code> within the organization&lt;/li>
&lt;li>Here you are presented with 3 options, make sure to select &lt;code>CLI-driven workflow&lt;/code>&lt;/li>
&lt;li>Name your workspace &lt;code>Terraform-CLI-Test&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Create Workspace&lt;/code>&lt;/li>
&lt;li>Take note of the &lt;code>Example code&lt;/code> for CLI-driven runs&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="create-terraform-cloud-file">Create Terraform Cloud file&lt;/h3>
&lt;p>Now, we need a way to tell our local Terraform installation run the configurations in the cloud.&lt;/p>
&lt;p>To do this, create a file called &lt;code>TerraformCloud.tf&lt;/code>, and add the example code from &lt;a class="link" href="#set-up-terraform-cloud-1" >earlier&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cloud&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">organization&lt;/span> = &lt;span class="s2">&amp;#34;YourOrganization&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">workspaces&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="s2">&amp;#34;Terraform-CLI-Test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>Note&lt;/em>: If using the above example, make sure to change the organization name to your own&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="test-er-out">Test &amp;rsquo;er out&lt;/h3>
&lt;p>Now, this should be pretty much it. Assuming your project works correctly, you can now run all of the regular Terraform CLI commands locally, and they will execute in the cloud.&lt;/p>
&lt;p>To test this out, try running &lt;code>terraform plan&lt;/code> and check the web interface to see the plan in action.&lt;/p>
&lt;p>Once that is all good to go, run &lt;code>terraform apply -auto-approve&lt;/code> and watch the magic happen!&lt;/p>
&lt;p> &lt;/p>
&lt;p>If that is all good, and you want to destroy it, just run &lt;code>terraform destroy -auto-approve&lt;/code>.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Doing jobs with Terraform in the cloud is pretty cool. It takes the load off of local hardware, and allows the automation of workflows to be performed, and is just plain fun to use.&lt;/p>
&lt;p>Hopefully this helped at least get your foot in the door for the wonders of Terraform Cloud, and feel free to comment if you have any questions!&lt;/p></description></item><item><title>Manage Discord Servers with Terraform</title><link>https://thequib.github.io/p/manage-discord-servers-with-terraform/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/manage-discord-servers-with-terraform/</guid><description>&lt;img src="https://thequib.github.io/p/manage-discord-servers-with-terraform/featuredImage.png" alt="Featured image of post Manage Discord Servers with Terraform" />&lt;p>Something everyone is dying to do&amp;hellip; Code-driven Discord server management.&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="requirements">Requirements&lt;/h1>
&lt;ul>
&lt;li>Discord API Token
&lt;ul>
&lt;li>&lt;a class="link" href="#obtain-discord-api-token" >Learn how to get this&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Some knowledge with Terraform (to understand what is going on)&lt;/li>
&lt;li>Terraform 0.13 and up&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="source-code">Source Code&lt;/h1>
&lt;p>All of my code and related files can be found in my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture Repo&lt;/a>.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="obtain-discord-api-token">Obtain Discord API Token&lt;/h1>
&lt;ul>
&lt;li>Head over to the &lt;a class="link" href="https://discord.com/developers/" target="_blank" rel="noopener"
>Discord Developer Portal&lt;/a>&lt;/li>
&lt;li>Get logged in&lt;/li>
&lt;li>Create a new application&lt;/li>
&lt;li>Name this whatever you want
&lt;ul>
&lt;li>Ex: &amp;ldquo;Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Once in your new application, head over to the &amp;ldquo;Bot&amp;rdquo; section&lt;/li>
&lt;li>Click &amp;ldquo;Add Bot&amp;rdquo;&lt;/li>
&lt;li>Give the bot a name (or leave the default name)
&lt;ul>
&lt;li>Ex: &amp;ldquo;Mr. Terraform&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click the &amp;ldquo;Reset Token&amp;rdquo; button
&lt;ul>
&lt;li>This will give you your token, and is the only time it will be displayed&lt;/li>
&lt;li>Make sure you keep this in a safe place, and treat it like a password&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use this token in your &lt;a class="link" href="credentials.auto.tfvars.example" >credentials.auto.tfvars&lt;/a> file&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h1 id="terraform-provider-information">Terraform Provider Information&lt;/h1>
&lt;p>The provider used here is &lt;a class="link" href="https://registry.terraform.io/providers/Chaotic-Logic/discord/latest" target="_blank" rel="noopener"
>discord&lt;/a> by &lt;a class="link" href="https://registry.terraform.io/namespaces/Chaotic-Logic" target="_blank" rel="noopener"
>Chaotic Logic&lt;/a> (&lt;a class="link" href="https://github.com/Chaotic-Logic/terraform-provider-discord" target="_blank" rel="noopener"
>Source&lt;/a>).&lt;/p>
&lt;p> &lt;/p>
&lt;h1 id="get-started">Get started&lt;/h1>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>Make sure you have your Discord API token ready&lt;/em>&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="prepare-terraform">Prepare Terraform&lt;/h2>
&lt;p>To get Terraform ready, create a file in the same directory called &lt;code>provider.tf&lt;/code>, and paste the following information into it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">terraform&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">required_version&lt;/span> = &lt;span class="s2">&amp;#34;&amp;gt;= 0.13.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">required_providers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">discord&lt;/span> = &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">source&lt;/span> = &lt;span class="s2">&amp;#34;Chaotic-Logic/discord&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">version&lt;/span> = &lt;span class="s2">&amp;#34;0.0.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">provider&lt;/span> &lt;span class="s2">&amp;#34;discord&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">token&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_token&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, get the required provider downloaded (&lt;code>cd&lt;/code> into your Terraform directory first):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">terraform init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-credentials-file">Create credentials file&lt;/h2>
&lt;p>Create a new directory, and &lt;code>cd&lt;/code> into it. Then create a file in there called &lt;code>credentials.auto.tfvars&lt;/code>.&lt;/p>
&lt;p>Paste the following information in:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">discord_token = &amp;#34;YourDiscordApiToken&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_name = &amp;#34;NewServerName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server_region = &amp;#34;us-east&amp;#34; # Region to host in (Brazil | Europe | Hong Kong | India | Rapan | Russia | Singapore | South Africa | Sydney | US (Central | East | South | West))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">category_name = &amp;#34;NewCategoryName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">text_channel_name = &amp;#34;NewTextChannelName&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You&amp;rsquo;ll want to edit the values (in quotations) as needed, filling in &lt;code>discord_token&lt;/code> with &lt;em>your&lt;/em> API token received from &lt;a class="link" href="#obtain-discord-api-token" >here&lt;/a>, it would be best to choose a region closest to you.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="create-variables-file">Create variables file&lt;/h2>
&lt;p>While the &lt;code>credentials.auto.tfvars&lt;/code> assigns values to variables, the variables still need to be defined within Terraform. Create a file called &lt;code>variables.tf&lt;/code> to store these, paste the following contents (one per assigned variable from &lt;a class="link" href="#create-credentials-file" >above&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;discord_token&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">sensitive&lt;/span> = &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;server_region&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;category_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">variable&lt;/span> &lt;span class="s2">&amp;#34;text_channel_name&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span> = &lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="create-a-server">Create a server&lt;/h2>
&lt;p>In the same directory as your &lt;code>provider.tf&lt;/code> file, create a file called &lt;code>createServer.tf&lt;/code>.&lt;/p>
&lt;p>Paste the following information:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Create a server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resource &amp;#34;discord_server&amp;#34; &amp;#34;my_server&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = var.server_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> region = var.server_region
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> default_message_notifications = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Get newly created server&amp;#39;s ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data &amp;#34;discord_server&amp;#34; &amp;#34;createdServerInfo&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_id = resource.discord_server.my_server.id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_server.my_server&lt;/code> creates a Discord server with a given name and region assigned from the &lt;code>credentials.auto.tfvars&lt;/code> file.&lt;/li>
&lt;li>Then saves the &lt;code>id&lt;/code> of the server in &lt;code>data.discord_server.createdServerInfo&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-a-text-channel">Create a text channel&lt;/h2>
&lt;p>Now, we need to add a general channel for the server!&lt;/p>
&lt;p>I found the provider requires a category channel needs created, and channels be placed under that category&amp;hellip; so we can do this in one shot:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_category_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">category_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_text_channel&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;general&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">depends_on&lt;/span> = &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr"> resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">name&lt;/span> = &lt;span class="nb">lower&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">var&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text_channel_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">position&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">server_id&lt;/span> = &lt;span class="nb">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createdServerInfo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">category&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_category_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-1">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The block &lt;code>discord_category_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; category, which also depends on &lt;code>data.discords_server.createdServerInfo&lt;/code> to contain information (ensuring the server is created before the category is)
&lt;ul>
&lt;li>This places the category in the server that we created by supplying its &lt;code>id&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The block &lt;code>discord_text_channel.general&lt;/code> creates a &amp;ldquo;general&amp;rdquo; text channel, which falls under the &amp;ldquo;general&amp;rdquo; category. Just like the category depends on the server to exist, this text channel depends on the category to exist.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="create-an-invite">Create an invite&lt;/h2>
&lt;p>Now, we need a way to actually see all of the work Terraform will perform. Since a &lt;a class="link" href="https://discord.com/developers/docs/intro#bots-and-apps" target="_blank" rel="noopener"
>Bot&lt;/a> is what created the server and everything in it, we need an invite so our own user can join the server and interact with it.&lt;/p>
&lt;p>So, create yet &lt;strong>another&lt;/strong> file, call this one &lt;code>createServerInvite.tf&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tf" data-lang="tf">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">resource&lt;/span> &lt;span class="s2">&amp;#34;discord_invite&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;inviteMe&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">channel_id&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_text_channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">general&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">max_age&lt;/span> = &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">output&lt;/span> &lt;span class="s2">&amp;#34;invite_info&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">value&lt;/span> = &lt;span class="nx">resource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">discord_invite&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inviteMe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-does-this-do-2">What does this do?&lt;/h3>
&lt;ul>
&lt;li>The &lt;code>discord_invite.inviteMe&lt;/code> block will create a non-expiring invite code that we can use to join the server, placing the invite under the channel we created earlier (by &lt;code>id&lt;/code>)&lt;/li>
&lt;li>The &lt;code>output.invite_info&lt;/code> block will print the invite code as a string to the terminal in a cleaner, more easily-found fashion.&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="let-terraform-do-the-work-and-join-your-server">Let Terraform do the work, and join your server!&lt;/h2>
&lt;p>Now, open a terminal session, &lt;code>cd&lt;/code> into your Terraform files directory and run &lt;code>terraform plan&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>This will show you what Terraform will do
&lt;ul>
&lt;li>You may have to correct some errors before you can proceed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Then, just run &lt;code>terraform apply -auto-approve&lt;/code> to create the server.&lt;/p>
&lt;p> &lt;/p>
&lt;p>In the terminal, something like this will show:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Apply complete! Resources: 3 added, 0 changed, 0 destroyed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Outputs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">invite_info = &amp;#34;kvdyTVBuUs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;/p>
&lt;p>This &lt;code>invite_info&lt;/code> is what you need to join the server. To do this:&lt;/p>
&lt;ul>
&lt;li>Open your Discord client&lt;/li>
&lt;li>Click the &amp;ldquo;+&amp;rdquo; button under the list of joined servers to &amp;ldquo;Add a Server&amp;rdquo;&lt;/li>
&lt;li>Under &amp;ldquo;Have an invite already?&amp;rdquo;, click the &amp;ldquo;Join Server&amp;rdquo; button&lt;/li>
&lt;li>Enter the code given by the terminal (you don&amp;rsquo;t need a URL, just the code), and click &amp;ldquo;Join Server&amp;rdquo;!&lt;/li>
&lt;/ul>
&lt;p>You should now be a member of the new server, and you should also see a shiny new text channel titled &lt;code>general&lt;/code>.&lt;/p></description></item></channel></rss>