<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>virtualization on QuibTech</title><link>https://thequib.github.io/tags/virtualization/</link><description>Recent content in virtualization on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 30 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/tags/virtualization/index.xml" rel="self" type="application/rss+xml"/><item><title>Backup Linux Directories to Backblaze B2</title><link>https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/</link><pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/</guid><description>&lt;img src="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/featuredImage.png" alt="Featured image of post Backup Linux Directories to Backblaze B2" />&lt;p>I recently set off to find a cheap (and hopefully free) cloud backup solution for some crucial files in my home infrastructure. I stumbled upon Backblaze&amp;rsquo;s B2 object storage solution (similar to Amazon S3 or Azure Blob). Backblaze is pretty awesome, and provides up to 10GB free storage across multiple buckets to try it out!&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A Linux machine (virtual, container, or bare metal)&lt;/li>
&lt;li>Super sudoer powers&lt;/li>
&lt;li>A Backblaze account&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-linux">🐧 Prepare Linux&lt;/h2>
&lt;h3 id="-make-sure-you-have-the-latest-updates">⬆️ Make sure you have the latest updates&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="-install-curl-if-not-already">✨ Install &lt;code>curl&lt;/code> (if not already)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install curl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="-install-rclone">✨ Install &lt;code>Rclone&lt;/code>&lt;/h3>
&lt;p>Rclone is a tool written in Go that allows the movement of files between local and remote directories. It can be installed by following the tutorial on &lt;a class="link" href="https://rclone.org/install/" target="_blank" rel="noopener"
>their docs&lt;/a>.&lt;/p>
&lt;p>To check if &lt;code>Rclone&lt;/code> is installed properly, just type &lt;code>rclone&lt;/code> in your CLI. As long as you don&amp;rsquo;t get the &amp;ldquo;Unrecognized command&amp;rdquo; error, you&amp;rsquo;re good!&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="-prepare-backblaze">🔥 Prepare Backblaze&lt;/h2>
&lt;p>Make sure you have a Backblaze account created, and log in.&lt;/p>
&lt;h3 id="-create-a-bucket">🪣 Create a Bucket&lt;/h3>
&lt;ul>
&lt;li>Make sure you are in your buckets list&lt;/li>
&lt;li>Create a bucket
&lt;ul>
&lt;li>Give it a unique name&lt;/li>
&lt;li>Private&lt;/li>
&lt;li>Encryption disabled&lt;/li>
&lt;li>Object lock disabled&lt;/li>
&lt;li>Click create&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="-create-app-key">🔑 Create App key&lt;/h3>
&lt;ul>
&lt;li>Click &lt;code>App keys&lt;/code> on the left&lt;/li>
&lt;li>Scroll down, click &lt;code>Add a New Application Key&lt;/code>
&lt;ul>
&lt;li>Give it a friendly name&lt;/li>
&lt;li>If you want to restrict the key to a specific bucket, choose it from the dropdown&lt;/li>
&lt;li>Keep it set to read/write&lt;/li>
&lt;li>Click create&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Make sure to save the &lt;code>keyID&lt;/code> and &lt;code>applicationKey&lt;/code> for later&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-set-up-rclone">🎚️ Set up Rclone&lt;/h2>
&lt;p>In Linux, enter the command &lt;code>rclone config&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Type &lt;code>n&lt;/code> for a new remote&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Give it a name (such as backblaze-bucketname)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This will list a bunch of supported remotes, find &lt;code>Backblaze B2&lt;/code> in the list, and enter the corresponding number into the prompt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>Account&lt;/code>, use the &lt;code>keyID&lt;/code> received from generating the App key&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;code>Key&lt;/code>, use the `applicationKey1 received from generating the App key&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set the following values as you see fit. The defaults should be good for most cases.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the list of current remotes shows, you can quit the config CLI with &lt;code>q&lt;/code>
&lt;img src="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-remoteComplete.png"
width="441"
height="415"
srcset="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-remoteComplete_hue41f00ea6755fe8e9d18e69fd85ef5db_8255_480x0_resize_box_3.png 480w, https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-remoteComplete_hue41f00ea6755fe8e9d18e69fd85ef5db_8255_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remotes can be checked by using &lt;code>rclone listremotes&lt;/code>&lt;/p>
&lt;ul>
&lt;li>This will return a list of all of your remotes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h2 id="-copy-a-file-or-directory-to-your-b2-bucket">📃 Copy a file (or directory) to your B2 bucket&lt;/h2>
&lt;p>The proper syntax to copy a file is&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rclone copy &lt;span class="o">[&lt;/span>directoryOrFileName&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>nameOfRemote&lt;span class="o">]&lt;/span>:&lt;span class="o">[&lt;/span>bucket&lt;span class="o">]&lt;/span>/&lt;span class="o">[&lt;/span>directoryOrFileToCopyTo&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>cd&lt;/code> into a directory that contains the file you want to copy up. Let&amp;rsquo;s say this file is named &lt;code>file.txt&lt;/code>&lt;/li>
&lt;li>Use &lt;code>rclone copy&lt;/code> to copy up the file
&lt;ul>
&lt;li>Keep in mind, my remote&amp;rsquo;s name is &lt;code>backblaze-testing&lt;/code> and my bucket&amp;rsquo;s name is &lt;code>quib-testing&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rclone copy file.txt backblaze-testing:quib-testing/file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-copyFile.png"
width="1206"
height="118"
srcset="https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-copyFile_hu1f57d3b8cec23c8c6968f5d3746ab669_8608_480x0_resize_box_3.png 480w, https://thequib.github.io/p/backup-linux-directories-to-backblaze-b2/backupLinuxToBackblaze-copyFile_hu1f57d3b8cec23c8c6968f5d3746ab669_8608_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1022"
data-flex-basis="2452px"
>&lt;/p>
&lt;ul>
&lt;li>For a directory, this is very similar. Let&amp;rsquo;s say this directory is named &lt;code>directory/&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rclone copy directory backblaze-testing:quib-testing/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If this was successful, nothing is returned.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="-check-if-your-file-is-uploaded">✅ Check if your file is uploaded&lt;/h2>
&lt;p>Back in Backblaze, click &lt;code>Browse Files&lt;/code>, and select the bucket you would like to browse.&lt;/p>
&lt;p>If the file uploaded properly, it should show up there!&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="-automate-it">♾️ Automate it&lt;/h2>
&lt;p>Now, you&amp;rsquo;re probably here because you want to automate this. To do so, you&amp;rsquo;ll need to create a cron job for each backup interval you want.&lt;/p>
&lt;p>To edit cron tasks:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo crontab -e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>And select your desired text editor&lt;/li>
&lt;li>Cron jobs are formatted by the desired time interval, followed by the command to run&lt;/li>
&lt;li>Ex. &lt;code>* * * * * /home/user/script.sh&lt;/code> will run the file &lt;code>/home/user/script.sh&lt;/code> every minute
&lt;ul>
&lt;li>You can generate times to your liking easily with &lt;a class="link" href="https://crontab.guru/#*_*_*_*_*" target="_blank" rel="noopener"
>this website&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Example cron job:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run Backblaze automation every day at 12:00 AM&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> &lt;span class="m">12&lt;/span> * * * /home/user/backblaze-backup.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Getting Started with GNS3</title><link>https://thequib.github.io/p/getting-started-with-gns3/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-gns3/</guid><description>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/featuredImage.png" alt="Featured image of post Getting Started with GNS3" />&lt;p>When diving into learning networking, GNS3 is a great tool to get started. GNS3 allows you to build out and design networks without having to buy all of the expensive hardware to do so.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A GNS3 VM server, or server running on your local machine
&lt;ul>
&lt;li>Check out &lt;a class="link" href="https://thequib.github.io/gns3-vm-in-proxmox-ve" >GNS3 in Proxmox VE&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GNS3 client on your local computer
&lt;ul>
&lt;li>Download the GNS3 Client from the &lt;a class="link" href="https://www.gns3.com/software/download" target="_blank" rel="noopener"
>official website&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="optional">Optional&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://learningnetworkstore.cisco.com/cisco-modeling-labs-personal/cisco-cml-personal" target="_blank" rel="noopener"
>Cisco Modeling Labs IOSv router/switch images&lt;/a>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="loading-gns3">Loading GNS3&lt;/h2>
&lt;p>Start by opening your GNS3 client. Here, a dialog shows to create a new project.&lt;/p>
&lt;ul>
&lt;li>If you are running the GNS3 server on your local machine, go ahead and create a new project, name it whatever you want&lt;/li>
&lt;li>If you are running the GNS3 server on a remote machine
&lt;ul>
&lt;li>Go to Edit &amp;gt; Preferences &amp;gt; Server&lt;/li>
&lt;li>Change &amp;lsquo;Host&amp;rsquo; to the IP address of your server&lt;/li>
&lt;li>Change the port to &amp;lsquo;80 TCP&amp;rsquo; (Or the port you have it set to if you&amp;rsquo;ve changed it)&lt;/li>
&lt;li>Fill out the &amp;lsquo;user&amp;rsquo; and &amp;lsquo;password&amp;rsquo; fields (Default user is &amp;lsquo;gns3&amp;rsquo; and password is &amp;lsquo;password&amp;rsquo;)&lt;/li>
&lt;li>Click &amp;lsquo;Apply&amp;rsquo; and close the preferences window&lt;/li>
&lt;li>Go to File &amp;gt; New blank project, name the new project whatever you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="installing-an-appliance">Installing an appliance&lt;/h2>
&lt;p>On the left hand side of the window, you will find a toolbar with the following icons:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems.png"
width="410"
height="60"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Sidebar Items"
class="gallery-image"
data-flex-grow="683"
data-flex-basis="1640px"
>&lt;/p>
&lt;p>From top to bottom, these items are &lt;em>Routers&lt;/em>, &lt;em>Switches&lt;/em>, &lt;em>End Devices&lt;/em>, &lt;em>Security Devices&lt;/em>, &lt;em>All Devices&lt;/em>, and &lt;em>Add a link&lt;/em>. These buttons contain what are called templates, templates are virtual devices that can be manipulated just as if they were the real deal.&lt;/p>
&lt;p>All of these are relatively self explanatory, the last &lt;em>&amp;ldquo;Add a link&amp;rdquo;&lt;/em> is for connecting devices together using a virtual network cable.&lt;/p>
&lt;p>To get started and testing things, go to &lt;em>End Devices&lt;/em> and click &amp;ldquo;+ New template&amp;rdquo;. You will want to install an appliance from the server, so click &amp;ldquo;Next &amp;gt;&amp;rdquo;, expand &amp;ldquo;Guests&amp;rdquo;, and scroll to find an appliance that interests you. I&amp;rsquo;ll be choosing the &amp;ldquo;Ubuntu Docker Guest&amp;rdquo; as docker containers start up in just a few seconds.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection.png"
width="855"
height="259"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Selection"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="792px"
>&lt;/p>
&lt;p>Once you have found the device you want, click &amp;ldquo;Install&amp;rdquo;, then &amp;ldquo;Next&amp;rdquo; to install on the main server, then &amp;ldquo;Finish&amp;rdquo;. Now, the appliance should be installed!&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="adding-devices-to-a-project">Adding devices to a project&lt;/h2>
&lt;p>Now, the newly installed appliance should show up under &lt;em>End Devices&lt;/em>. Click this, and drag the device into the blank space of the project. This will do some downloading work if you have just installed it, then add itself into the project.&lt;/p>
&lt;p>To use the device, you can either click the green play button at the top of the window (this would start all devices in the project), or you can right click an individual device, and click &amp;ldquo;Start&amp;rdquo;.&lt;/p>
&lt;p>You can confirm that the device has started by looking at the &amp;ldquo;Topology Summary&amp;rdquo; on the top right of the window. A green circle indicates that a device is online.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline.png"
width="395"
height="85"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Online"
class="gallery-image"
data-flex-grow="464"
data-flex-basis="1115px"
>&lt;/p>
&lt;p>To get console access to this docker guest, you can double click on the node, or right click and hit &amp;ldquo;console&amp;rdquo;. This, by default, will open the Solarwinds Solar-PuTTY application on your computer. You can interact with the device just as if it were a physical one.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>Keep in mind, each devices has its own configuration settings that you can mess with, as well as console types depending on if the device has a GUI or not (Such as between the Ubuntu Docker and Ubuntu Desktop guests). Some of these settings include amount of CPU cores, RAM, and type of console access you have to the device.&lt;/p>
&lt;p>Feel free to play around with these and figure some stuff out! The beauty of GNS3 is that you can do anything you want, and not have to worry about breaking anything of importance :)&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>And there you have it! Go ahead and play with the different end devices, as well as switching/routing appliances that exist. If you have the Cisco Modeling labs subscription, you are also able to import the IOSv images into GNS3, which will allow you to interact and play with Cisco IOS devices.&lt;/p></description></item><item><title>GNS3 VM in Proxmox VE</title><link>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</guid><description>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/featuredImage.png" alt="Featured image of post GNS3 VM in Proxmox VE" />&lt;p>Do you use Proxmox VE as your main homelab hypervisor, and want to run the GNS3 VM on it? You&amp;rsquo;re in luck, below you can find steps on how to do just that as long as you meet a few server requirements.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Proxmox VE with 3-4&lt;/li>
&lt;li>A VM storage device that supports .qcow2 files&lt;/li>
&lt;li>Location of VM disks on your Proxmox Server&lt;/li>
&lt;li>FTP and Shell access to your Proxmox Server&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="download-the-ova-file">Download the .ova file&lt;/h2>
&lt;p>Head over to the GNS3 website and download the ESXi VM &lt;a class="link" href="https://gns3.com/software/download-vm" target="_blank" rel="noopener"
>https://gns3.com/software/download-vm&lt;/a>&lt;/p>
&lt;p>Keep in mind, this will ask you to create an account before you can download.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="upload-the-ova-file-to-your-server">Upload the .ova file to your server&lt;/h2>
&lt;p>Now you will need to get the downloaded file onto your Proxmox server&lt;/p>
&lt;ul>
&lt;li>Open your favorite FTP client on your computer. In my case, I&amp;rsquo;m using WinSCP to do this&lt;/li>
&lt;li>Connect to your Proxmox server using either its IP address or hostname&lt;/li>
&lt;li>On the left pane (your local machine), navigate to where the &lt;code>.ova&lt;/code> file is&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile.png"
width="488"
height="85"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile_hu52dbf2389f55907a4797863c40ffd1b2_4546_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile_hu52dbf2389f55907a4797863c40ffd1b2_4546_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Local OVA"
class="gallery-image"
data-flex-grow="574"
data-flex-basis="1377px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>On the right pane (the server), create a new directory, naming whatever you want&lt;/li>
&lt;li>I&amp;rsquo;ll be putting mine underthe &lt;code>/root&lt;/code> directory&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir.png"
width="522"
height="72"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir_hu2df7b9856d778360d197c4fec2391e01_4079_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir_hu2df7b9856d778360d197c4fec2391e01_4079_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Remote Directory"
class="gallery-image"
data-flex-grow="725"
data-flex-basis="1740px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Now, drag the &lt;code>.ova&lt;/code> file from the left side to the right side, and you will see the upload begin&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload.png"
width="357"
height="201"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload_hud8dcb7040d4e35f6ee477344c55964e0_9760_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload_hud8dcb7040d4e35f6ee477344c55964e0_9760_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="File Upload"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="create-a-vm-in-proxmox">Create a VM in Proxmox&lt;/h2>
&lt;p>Now we&amp;rsquo;re going to want to create a VM in Proxmox that we will be adding hard disk to&lt;/p>
&lt;ul>
&lt;li>Create a VM by clicking &amp;ldquo;Create VM&amp;rdquo; on the top right&lt;/li>
&lt;li>Under &amp;ldquo;General&amp;rdquo;, you can use any ID starting from 100 that you like, take note of this. Name it whatever you would like&lt;/li>
&lt;li>Under &amp;ldquo;OS&amp;rdquo;, select the radio button to not use any media&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media.png"
width="331"
height="265"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media_hu22615d4374964dd954a424ec944c1a50_11932_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media_hu22615d4374964dd954a424ec944c1a50_11932_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - Media"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;System&amp;rdquo;, select your preferred graphics card (I will be using the VirtIO option), and make sure &amp;ldquo;SeaBIOS&amp;rdquo; is selected&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system.png"
width="370"
height="203"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system_hu144e48e87e7615a05aa0bed7ee4c5ef0_9687_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system_hu144e48e87e7615a05aa0bed7ee4c5ef0_9687_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - System"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Storage&amp;rdquo;, make sure SCSI is selected, and a qcow2 compatible storage device is selected&lt;/li>
&lt;li>Under CPU, give it at least 3 cores to run with, and make sure to select &amp;lsquo;host&amp;rsquo; for the type&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu.png"
width="700"
height="231"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu_hud110e020dfeeb55b5cb563aee5f24613_16409_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu_hud110e020dfeeb55b5cb563aee5f24613_16409_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - CPU"
class="gallery-image"
data-flex-grow="303"
data-flex-basis="727px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Memory&amp;rdquo;, give it at least 4096MB of RAM&lt;/li>
&lt;li>Set your preferred settings under &amp;ldquo;Network&amp;rdquo;, the default model will work just fine and should have the best performance&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="create-secondary-hard-disk">Create secondary hard disk&lt;/h2>
&lt;ul>
&lt;li>Navigate to the newly created VM&lt;/li>
&lt;li>Go to the &amp;ldquo;Hardware&amp;rdquo; tab&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add.png"
width="222"
height="142"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add_hu5728a90c7b8a6edcc3c64c33f0836e44_7121_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add_hu5728a90c7b8a6edcc3c64c33f0836e44_7121_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="VM - Add Hardware"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;ul>
&lt;li>Select the same storage device that you chose when creating the VM&lt;/li>
&lt;li>Change the size to whatever you would like to make it&lt;/li>
&lt;li>Click the &amp;lsquo;Add&amp;rsquo; button at the bottom&lt;/li>
&lt;li>You should now have 2 hard disks in the machine, &amp;lsquo;scsi0&amp;rsquo; and &amp;lsquo;scsi1&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="extract-files-from-the-ova-file">Extract files from the .ova file&lt;/h2>
&lt;p>We will need to grab files that are packaged into the file downloaded from the GNS3 website. .ova files typically contain 2 main parts: VM Configuration settings (we just did this), and virtual hard disks (In the .vmdk format)&lt;/p>
&lt;ul>
&lt;li>First access the shell of the Proxmox server, this can be either over SSH, or using the shell tab in Proxmox&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell.png"
width="338"
height="131"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell_hu4ca0cf01b7ef3c90e0e860582e6030be_9278_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell_hu4ca0cf01b7ef3c90e0e860582e6030be_9278_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Proxmox Shell"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="619px"
>&lt;/p>
&lt;ul>
&lt;li>Change your current directory to where you stored the .ova file earlier using the &amp;lsquo;cd&amp;rsquo; command. In my case, that would be:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /root/GNS2.2.20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Now, to extract the files using tar to the current directory, and list the new files&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tar -xvf *.ova
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will show the new files in the current directory, these should be:
&lt;ul>
&lt;li>&lt;code>GNS3 VM-disk001.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM-disk002.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM.ovf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The 2 &lt;code>.vmdk&lt;/code> files are the virtual hard disks, and the &lt;code>.ovf&lt;/code> file is the VM configuration file&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="convert-vmdk-files-to-qcow2-qemu-files">Convert .vmdk files to .qcow2 qemu files&lt;/h2>
&lt;p>In order for Proxmox to properly use the hard disks we just snatched, we need to convert them to .qcow2 (qemu) hard disks&lt;/p>
&lt;ul>
&lt;li>Get that VM ID you set earlier when creating the VM, I used 501 in my case&lt;/li>
&lt;li>Convert each file, replacing vmid with your VM ID:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="copy-the-newly-converted-qcow2-files">Copy the newly converted .qcow2 files&lt;/h2>
&lt;p>Now we can copy the files to the VM folder!&lt;/p>
&lt;ul>
&lt;li>Make sure you&amp;rsquo;re still in the same directory as the .qcow2 files&lt;/li>
&lt;li>Find the directory of the VM you will be copying the files to
&lt;ul>
&lt;li>In my case, my GNS3 VM is located at /mnt/pve/Proxmox-1-VM/images/501&lt;/li>
&lt;li>501 in this directory is my VM ID&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use the &lt;code>cp&lt;/code> command to copy the files to the vm directory&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-0.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-1.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-501-disk-0.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-501-disk-1.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="start-the-vm">Start the VM&lt;/h2>
&lt;p>Now you should be good to go! Try and start the VM, and head to the console tab. GNS3 should start to load, and you can begin creating your virtual networks!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="optional---install-qemu-guest-agent-on-gns3">Optional - Install qemu-guest-agent on GNS3&lt;/h2>
&lt;p>I know that when I have a VM in Proxmox, I like to get some quick information sometimes straight from the GUI&amp;hellip; such as the VM&amp;rsquo;s IP address. This is only possible if the qemu guest agent installed on the machine.&lt;/p>
&lt;p>Lucky for us, the GNS3 VM runs on Ubuntu, so this is pretty easy!&lt;/p>
&lt;ul>
&lt;li>Once GNS3 is loaded, go to the console tab, and press enter in the window to hit OK&lt;/li>
&lt;li>Arrow-down to the option &amp;ldquo;Shell&amp;rdquo; and hit enter&lt;/li>
&lt;li>In the shell, type the following commands:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install qemu-guest-agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start qemu-guest-agent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will update the repository, install the guest agent, and start the guest agent service&lt;/li>
&lt;li>Now, click the &amp;ldquo;Summary&amp;rdquo; tab of the VM in Proxmox, more information (such as the VM&amp;rsquo;s IP address) will now show right there!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Note: If the guest agent information doesn&amp;rsquo;t show, try reloading the web page&lt;/em>&lt;/p></description></item></channel></rss>