<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>containerization on QuibTech</title><link>https://thequib.github.io/tags/containerization/</link><description>Recent content in containerization on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/tags/containerization/index.xml" rel="self" type="application/rss+xml"/><item><title>Dockge - A new stack manager</title><link>https://thequib.github.io/p/dockge-a-new-stack-manager/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/dockge-a-new-stack-manager/</guid><description>&lt;img src="https://thequib.github.io/p/dockge-a-new-stack-manager/featuredImage.png" alt="Featured image of post Dockge - A new stack manager" />&lt;p>A static website is a plain and simple site with some HTML and CSS, without the need for a database or a beefy server.&lt;/p>
&lt;p>Hugo is one of many different static site generators. The most popular is called &lt;a class="link" href="https://jekyllrb.com/" target="_blank" rel="noopener"
>Jekyll&lt;/a>, and is a bit simpler to use than Hugo. It&amp;rsquo;s mostly personal preference, but here we&amp;rsquo;ll be going through setup for Hugo.&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A Linux computer or virtual machine with Docker and the Compose plugin installed
&lt;ul>
&lt;li>You can install Docker using their &lt;a class="link" href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener"
>official documentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="optionals">Optionals&lt;/h2>
&lt;ul>
&lt;li>Traefik reverse proxy to easily secure with TLS&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-create-directories">📁 Create directories&lt;/h2>
&lt;p>Firstly, you&amp;rsquo;ll have to create two directories. One of these will store the &lt;em>Dockge&lt;/em> compose file (&lt;code>/opt/dockge&lt;/code>), the other will store all of your other stacks (&lt;code>/opt/stacks&lt;/code>).&lt;/p>
&lt;ul>
&lt;li>Log into your server&lt;/li>
&lt;li>Run the following to creat the directories:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo mkdir /opt/dockge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo mkdir /opt/stacks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-create-and-spin-up-dockge-container">🐋 Create and spin up &lt;em>Dockge&lt;/em> container&lt;/h2>
&lt;h3 id="-create-project">📋 Create project&lt;/h3>
&lt;ul>
&lt;li>With the directories created, &lt;code>cd&lt;/code> into the &lt;code>/opt/dockge&lt;/code> directory and create the &lt;code>compose.yml&lt;/code> file&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /opt/dockge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo touch compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Edit the file&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo nano compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Add the following contents to the file (the defaults should be fine for getting started quick):
&lt;ul>
&lt;li>This example can also be found on this projects &lt;a class="link" href="https://github.com/louislam/dockge" target="_blank" rel="noopener"
>repository&lt;/a>&lt;/li>
&lt;li>You may notice the tag is &lt;code>1&lt;/code>, this seems to be the tag used for the latest version, you can also get a specific version from the &lt;a class="link" href="https://github.com/louislam/dockge/releases/tag/1.0.3" target="_blank" rel="noopener"
>releases&lt;/a> page of the repository&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3.8&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">dockge&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">louislam/dockge:1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dockge&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">unless-stopped&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">5001&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">5001&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/var/run/docker.sock:/var/run/docker.sock&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./data:/app/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/opt/stacks:/opt/stacks&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DOCKGE_STACKS_DIR=/opt/stacks&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="-spin-up-dockge">✨ Spin up &lt;em>Dockge&lt;/em>&lt;/h3>
&lt;ul>
&lt;li>With the &lt;code>compose&lt;/code> file created, spin it up with &lt;code>docker compose&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will pull the latest version of &lt;em>Dockge&lt;/em> and run it&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-connect-and-perform-first-time-setup">✨ Connect and perform first time setup&lt;/h2>
&lt;ul>
&lt;li>Get the IP address of your machine using the command &lt;code>ip address&lt;/code>
&lt;ul>
&lt;li>This is typically found in &lt;code>eth0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Open a web browser and navigate to &lt;em>&lt;a class="link" href="http://your.ip.address.here:5001" target="_blank" rel="noopener"
>http://your.ip.address.here:5001&lt;/a>&lt;/em>
&lt;ul>
&lt;li>Ex. &lt;code>http://192.168.1.10:5001&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You should be presented with a page to create your admin account:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-setup-screen.png"
width="441"
height="579"
srcset="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-setup-screen_hud9d810c8833c3b8fc4a5b3d2efa2b927_23776_480x0_resize_box_3.png 480w, https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-setup-screen_hud9d810c8833c3b8fc4a5b3d2efa2b927_23776_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Dockge account creation page"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="182px"
>&lt;/p>
&lt;ul>
&lt;li>Fill in the details as you see fit, and click &lt;code>Create&lt;/code>&lt;/li>
&lt;li>This should take you to the Dockge home page&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-using-dockge">✅ Using Dockge&lt;/h2>
&lt;h3 id="-home-page">📃 Home page&lt;/h3>
&lt;p>The home page shows you current managed and non-managed stacks. Managed stacks are in the directory created earlier, &lt;code>/opt/stacks&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>You can create a stack by clicking the &lt;code>+ Compose&lt;/code> button, or by entering a &lt;em>docker run&lt;/em> command to convert it to a compose file&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-home-screen.png"
width="1082"
height="470"
srcset="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-home-screen_hufbbe1ac7de73949ac4a6665d829e16bd_24417_480x0_resize_box_3.png 480w, https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-home-screen_hufbbe1ac7de73949ac4a6665d829e16bd_24417_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Dockge home page"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;h3 id="-compose-page">📃 Compose page&lt;/h3>
&lt;p>Clicking the &lt;code>+ Compose&lt;/code> button or converting a docker run command will take you to the &lt;em>Compose&lt;/em> page.&lt;/p>
&lt;p>Let&amp;rsquo;s say you want to spin up nginx with the command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Entering this to be converted to &lt;em>Compose&lt;/em> will result with the following page:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-compose-screen.png"
width="1420"
height="627"
srcset="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-compose-screen_hu68c426a2474df6bb5ca41edb49ffee42_63305_480x0_resize_box_3.png 480w, https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-compose-screen_hu68c426a2474df6bb5ca41edb49ffee42_63305_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Dockge compose screen"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>\&lt;/p>
&lt;p>You can managed more container settings by clicking the &lt;code>Edit&lt;/code> button under &lt;code>Containers&lt;/code>.&lt;/p>
&lt;h4 id="-starting-a-container">⬆️ Starting a container&lt;/h4>
&lt;p>Once you&amp;rsquo;re satisfied with the container, click &lt;code>Deploy&lt;/code> and watch the magic happen!&lt;/p>
&lt;p>Dockge will do the rest of the work, and provide a realtime terminal output of the progress, and present with the result:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-container-progress.png"
width="940"
height="211"
srcset="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-container-progress_hua40ecc6f74ca11a212f476464c7114c5_18318_480x0_resize_box_3.png 480w, https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-container-progress_hua40ecc6f74ca11a212f476464c7114c5_18318_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Dockge container progress output"
class="gallery-image"
data-flex-grow="445"
data-flex-basis="1069px"
>&lt;/p>
&lt;h4 id="-container-controls">🕹️ Container controls&lt;/h4>
&lt;p>Once the container is running, it will show with an &lt;code>active&lt;/code> badge next to it, and present you with a few options to manage it. All of which are pretty self-explanatory:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-container-settings.png"
width="561"
height="115"
srcset="https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-container-settings_hue978cb37985138d03ac9798c35f439e9_9799_480x0_resize_box_3.png 480w, https://thequib.github.io/p/dockge-a-new-stack-manager/dockge-container-settings_hue978cb37985138d03ac9798c35f439e9_9799_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Dockge container settings"
class="gallery-image"
data-flex-grow="487"
data-flex-basis="1170px"
>&lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="-using-with-traefik">✈️ Using with &lt;em>Traefik&lt;/em>&lt;/h2>
&lt;p>To proxy Dockge through traefik, there are two options: If Dockge is running on the same local server as the Traefik container, or on a remote server. This will go over the labels for running on the same server as &lt;em>Traefik&lt;/em>.&lt;/p>
&lt;h3 id="-on-same-server-as-traefik-container">✅ On same server as &lt;em>Traefik&lt;/em> container&lt;/h3>
&lt;ul>
&lt;li>Edit your &lt;em>Dockge&lt;/em> &lt;code>compose.yml&lt;/code> file:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo nano /opt/dockge/compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Add the following labels as such:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Traefik labels&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.enable=true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.routers.dockge.entrypoints=http&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.routers.dockge.rule=Host(`dockge.example.com`)&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Replace with your subdomain&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.middlewares.dockge-https-redirect.redirectscheme.scheme=https&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.routers.dockge.middlewares=dockge-https-redirect&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.routers.dockge-secure.entrypoints=https&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.routers.dockge-secure.rule=Host(`dockge.example.com`)&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Replace with your subdomain&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.routers.dockge-secure.tls=true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.routers.dockge-secure.service=dockge&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.http.services.dockge.loadbalancer.server.port=5001&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># This should match the container port (to the right of the &amp;#34;:&amp;#34;)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;traefik.docker.network=proxy&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Make sure to include your Traefik network, mine is named &amp;#34;proxy&amp;#34;, this should match the value of traefik.docker.network&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">proxy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">external&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>After updating, recreate the container:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker compose up -d --force-recreate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As long as your &lt;em>Traefik&lt;/em> instance is working, and all labels match your instance settings (you may need to change some things based on how you have &lt;em>Traefik&lt;/em> set up), you should be able to navigate to your subdomain name!&lt;/p>
&lt;h2 id="-updating-dockge">⬆️ Updating Dockge&lt;/h2>
&lt;p>To update Dockge, run the following commands:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /opt/dockge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker pull louislam/dockge:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>These command will:&lt;/p>
&lt;ul>
&lt;li>Change your directory to the where the &lt;em>Dockge&lt;/em> &lt;code>compose.yml&lt;/code> file is&lt;/li>
&lt;li>Pull the latest version of &lt;em>Dockge&lt;/em> (&lt;code>louislam/dockge:1&lt;/code>)&lt;/li>
&lt;li>Recreate the container with the latest pulled image&lt;/li>
&lt;/ul></description></item><item><title>Run Docker Containers in Proxmox LXC</title><link>https://thequib.github.io/p/run-docker-containers-in-proxmox-lxc/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/run-docker-containers-in-proxmox-lxc/</guid><description>&lt;img src="https://thequib.github.io/p/run-docker-containers-in-proxmox-lxc/featuredImage.png" alt="Featured image of post Run Docker Containers in Proxmox LXC" />&lt;h2 id="-why-would-i-do-this">🙋 Why would I do this?&lt;/h2>
&lt;p>One awesome feature in Proxmox VE is to run an LXC (Linux Container) directly from the web interface. A quick machine can be spun up that works and acts just like a regular full-blown Linux Virtual machine.&lt;/p>
&lt;p>The downside to this is we are limited to what resources you provide the VM, not the resources that are given to an LXC (which is essentially the maximum of the host system).&lt;/p>
&lt;h2 id="-side-note">➡️ Side Note&lt;/h2>
&lt;p>This requires running an LXC as &lt;code>Unprivileged&lt;/code>. To learn more about what this means, please refer to the &lt;a class="link" href="https://pve.proxmox.com/wiki/Unprivileged_LXC_containers" target="_blank" rel="noopener"
>Proxmox documentation&lt;/a> on this.&lt;/p>
&lt;h2 id="-preparing-proxmox">⌨️ Preparing Proxmox&lt;/h2>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>This will need to be done on each Proxmox host you have, so each command will need to be done for how ever many hosts you have&lt;/em>&lt;/p>
&lt;h3 id="enable-kernel-modules">Enable Kernel Modules&lt;/h3>
&lt;p>The &lt;code>overlay&lt;/code> and &lt;code>aufs&lt;/code> kernel modules need to be enabled to support running containers:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;overlay\naufs&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/modules-load.d/modules.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Please note that the &lt;code>aufs&lt;/code> module is deprecated as of Proxmox VE 7.0
&lt;ul>
&lt;li>This CAN be explicitly enabled, but it won&amp;rsquo;t do anything&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="reboot-host">Reboot host&lt;/h3>
&lt;p>For the changes to take effect, reboot the host&lt;/p>
&lt;h3 id="check-changes">Check changes&lt;/h3>
&lt;p>Upon starting back up, run the follwing:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lsmod &lt;span class="p">|&lt;/span> grep -E &lt;span class="s1">&amp;#39;overlay|aufs&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This should return something like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">overlay &lt;span class="m">131072&lt;/span> &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="create-an-unprivileged-container">Create an unprivileged container&lt;/h2>
&lt;p>The creation process is pretty standard, and what you&amp;rsquo;re used to. But there are a few changes you will need to make along the way:&lt;/p>
&lt;ul>
&lt;li>On the Proxmox GUI, click the &lt;code>Create CT&lt;/code> button&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/run-docker-containers-in-proxmox-lxc/createCTButton.png"
width="131"
height="33"
srcset="https://thequib.github.io/p/run-docker-containers-in-proxmox-lxc/createCTButton_hu00a5d41f30fad5d502f6a18ff7e8846c_1581_480x0_resize_box_3.png 480w, https://thequib.github.io/p/run-docker-containers-in-proxmox-lxc/createCTButton_hu00a5d41f30fad5d502f6a18ff7e8846c_1581_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="396"
data-flex-basis="952px"
>&lt;/p>
&lt;ul>
&lt;li>Make sure you have &amp;ldquo;Unprivileged container&amp;rdquo; checked&lt;/li>
&lt;li>For the rest of the setup, give it your preferred configuration&lt;/li>
&lt;li>Make sure you don&amp;rsquo;t start the container upon creation&lt;/li>
&lt;/ul>
&lt;h2 id="edit-containers-features">Edit container&amp;rsquo;s features&lt;/h2>
&lt;p>Click on your new container&lt;/p>
&lt;ul>
&lt;li>Go to &lt;code>Options&lt;/code>&lt;/li>
&lt;li>Double-click on the &lt;code>Features&lt;/code> row&lt;/li>
&lt;li>Ensure that the following are checked:
&lt;ul>
&lt;li>&lt;code>keyctl&lt;/code>&lt;/li>
&lt;li>&lt;code>nesting&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Click &lt;code>OK&lt;/code>&lt;/li>
&lt;li>Start the container&lt;/li>
&lt;/ul>
&lt;h2 id="install-docker">Install Docker&lt;/h2>
&lt;p>Head over to &lt;a class="link" href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener"
>Docker&amp;rsquo;s docs&lt;/a>, and find the steps to install docker for your distro.&lt;/p>
&lt;p>Once all set up, test out the installation with &lt;code>docker run hello-world&lt;/code> and it should be working!&lt;/p></description></item><item><title>Stop using weird ports for your Minecraft Servers</title><link>https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/</link><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/</guid><description>&lt;img src="https://thequib.github.io/p/stop-using-weird-ports-for-your-minecraft-servers/featuredImage.png" alt="Featured image of post Stop using weird ports for your Minecraft Servers" />&lt;h1 id="the-scoop">The scoop&lt;/h1>
&lt;p>When I host Minecraft servers for my friends, I seriously hate having to tell them to connect to &lt;code>example.com:25567&lt;/code> or &lt;code>example.com:25568&lt;/code>.&lt;/p>
&lt;p>Luckily, there is an amazing solution for this: &lt;em>Reverse Proxies&lt;/em>&lt;/p>
&lt;p> &lt;/p>
&lt;p>I tried doing this with &lt;a class="link" href="https://traefik.io/" target="_blank" rel="noopener"
>Traefik&lt;/a> at first (which is my preferred &lt;code>http&lt;/code> reverse proxy), but I had zero luck, even after hours of scouring the internet for help.&lt;/p>
&lt;p>So as an alternative, I found &lt;a class="link" href="https://github.com/haveachin/infrared" target="_blank" rel="noopener"
>infrared&lt;/a>, a reverse proxy for Minecraft by &lt;a class="link" href="https://github.com/haveachin" target="_blank" rel="noopener"
>Hendrik Schlehlein&lt;/a>, built with &lt;a class="link" href="https://go.dev/" target="_blank" rel="noopener"
>Go&lt;/a>.&lt;/p>
&lt;h1 id="what-will-we-be-doing">What will we be doing?&lt;/h1>
&lt;p>By the end of this, we will have a working reverse proxy running in a docker container, and two minecraft servers sitting behind &lt;code>mc-server1.example.com&lt;/code> and &lt;code>mc-server2.example.com&lt;/code>. Both of these will be accessed using the default minecraft port of &lt;code>25565&lt;/code>.&lt;/p>
&lt;h1 id="example-files">Example files&lt;/h1>
&lt;p>If you want to just view some example files, check out my &lt;a class="link" href="https://github.com/TheQuib/overture" target="_blank" rel="noopener"
>Overture&lt;/a> repository, under the &lt;code>Docker/Infrared&lt;/code> directory.&lt;/p>
&lt;hr>
&lt;h1 id="before-you-start">Before You Start&lt;/h1>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A virtual machine with Ubuntu 22.04 or later
&lt;ul>
&lt;li>Or bare metal, I won&amp;rsquo;t judge&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A bit of knowledge in the ways of &lt;code>Docker&lt;/code>
&lt;ul>
&lt;li>i.e. you will need &lt;code>Docker&lt;/code> installed on your server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>At least 2 working Minecraft servers&lt;/li>
&lt;li>Ability to edit DNS records&lt;/li>
&lt;/ul>
&lt;h2 id="optional">Optional&lt;/h2>
&lt;ul>
&lt;li>Ability to port forward on your router (if you want to access outside of your network)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="set-up-proxy-server">Set up Proxy Server&lt;/h1>
&lt;h2 id="create-proxy-server">Create Proxy Server&lt;/h2>
&lt;p>To get it all started, we&amp;rsquo;ll need a server that will act as a proxy.&lt;/p>
&lt;ul>
&lt;li>This can be a new virtual machine, or existing. It just needs to have &lt;code>Docker&lt;/code> installed&lt;/li>
&lt;li>Make sure you take note of its IP Address
&lt;ul>
&lt;li>For this example, we&amp;rsquo;ll use &lt;code>192.168.1.10&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="create-necessary-files-and-directories">Create necessary files and directories&lt;/h2>
&lt;p>&lt;code>cd&lt;/code> to a directory that you want to store your files in, your current user&amp;rsquo;s &lt;code>home&lt;/code> directory is probably best&lt;/p>
&lt;p>Create the necessary directories and files:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir infrared
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch docker-compose.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir configs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> configs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch mc-server1.example.com.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch mc-server2.example.com.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ../../
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-these-commands-do">What these commands do&lt;/h3>
&lt;ul>
&lt;li>Create a project folder&lt;/li>
&lt;li>Create &lt;code>docker-compose&lt;/code> file to deploy from&lt;/li>
&lt;li>Creates a &lt;code>data/configs&lt;/code> directory to store configurations&lt;/li>
&lt;li>Creates two configuration files, one for each server name listed under &lt;a class="link" href="#what-will-we-be-doing" >What will we be doing?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="edit-docker-composeyml">Edit docker-compose.yml&lt;/h2>
&lt;p>Now, you&amp;rsquo;ll want to edit the &lt;code>docker-compose.yml&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nano docker-compose.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And paste in the following text:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">infrared&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ghcr.io/haveachin/infrared:1.3.3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">infrared&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">unless-stopped&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stdin_open&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tty&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;25565:25565/tcp&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;./data/configs:/configs&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">expose&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;25565&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">INFRARED_CONFIG_PATH&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/configs&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="what-this-bit-of-yaml-does">What this bit of Yaml does&lt;/h3>
&lt;ul>
&lt;li>Uses docker-compose version 3&lt;/li>
&lt;li>Creates a service called &lt;code>infrared&lt;/code>
&lt;ul>
&lt;li>With the image &lt;code>ghcr.io/haveachin/infrared:1.3.3&lt;/code>&lt;/li>
&lt;li>With a name of &lt;code>infrared&lt;/code>&lt;/li>
&lt;li>Don&amp;rsquo;t restart the container unless we (the admin) stops it&lt;/li>
&lt;li>Open up a port&lt;/li>
&lt;li>Define a location for configurations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="edit-configurations">Edit configurations&lt;/h2>
&lt;p>Now, go into the configurations directory&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /data/configs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You may want to change the names of the created files to match the &lt;code>FQDN&lt;/code>&amp;rsquo;s of your actual servers.&lt;/p>
&lt;p>I will continue to use the names &lt;code>mc-server1.example.com&lt;/code> and &lt;code>mc-server2.example.com&lt;/code> for this tutorial, however.&lt;/p>
&lt;p>Edit each file and include the following contents:&lt;/p>
&lt;h3 id="mc-serverexamplecomjson">&lt;code>mc-server.example.com.json&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domainName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mc-server1.example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;proxyTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.0.11:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listenTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;disconnectMessage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Goodbye&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;offlineStatus&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;motd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Server is currently offline :(&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mc-server2examplecomjson">&lt;code>mc-server2.example.com.json&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;domainName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mc-server2.example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;proxyTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;192.168.0.12:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;listenTo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0:25565&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;disconnectMessage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Goodbye&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;offlineStatus&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;motd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Server is currently offline :(&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="configuration-note">Configuration note&lt;/h3>
&lt;p>Make sure that you change &lt;code>domainName&lt;/code> to your server&amp;rsquo;s &lt;code>FQDN&lt;/code> and the &lt;code>proxyTo&lt;/code> address and port to match your Minecraft server.&lt;/p>
&lt;hr>
&lt;h1 id="set-up-dns">Set up DNS&lt;/h1>
&lt;p>Reverse Proxies rely on DNS to route the incoming connection to the intended server.&lt;/p>
&lt;p>Let&amp;rsquo;s say, for this example we are going to proxy 2 servers:&lt;/p>
&lt;ul>
&lt;li>&lt;code>mc-server1.example.com&lt;/code>&lt;/li>
&lt;li>&lt;code>mc-server2.example.com&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>On your DNS server, create an A record for each of the servers, pointed at your proxy server. For eaxmple:&lt;/p>
&lt;ul>
&lt;li>&lt;code>A&lt;/code>: &lt;code>mc-server1.example.com&lt;/code> &amp;gt; &lt;code>192.168.1.10&lt;/code>&lt;/li>
&lt;li>&lt;code>A&lt;/code>: &lt;code>mc-server2.example.com&lt;/code> &amp;gt; &lt;code>192.168.1.10&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="test-er-out">Test &amp;rsquo;er out&lt;/h1>
&lt;h2 id="spin-up-your-container">Spin up your container&lt;/h2>
&lt;p>Now you&amp;rsquo;re ready to spin up your container!&lt;/p>
&lt;p>Make sure you&amp;rsquo;re in the same directory as your &lt;code>docker-compose.yml&lt;/code> file, and run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo docker-compose up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="launch-minecraft-and-check-your-work">Launch Minecraft, and check your work&lt;/h2>
&lt;p>Now, launch Minecraft, head over to the multiplayer menu, and add servers that point to the &lt;code>FQDN&lt;/code>s for your A records created in &lt;a class="link" href="#set-up-dns" >Set up DNS&lt;/a>.&lt;/p>
&lt;p>If you did everything correctly, these should be showing as online! (If not make sure they&amp;rsquo;re running first 😉)&lt;/p></description></item><item><title>Getting Started with GNS3</title><link>https://thequib.github.io/p/getting-started-with-gns3/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-gns3/</guid><description>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/featuredImage.png" alt="Featured image of post Getting Started with GNS3" />&lt;p>When diving into learning networking, GNS3 is a great tool to get started. GNS3 allows you to build out and design networks without having to buy all of the expensive hardware to do so.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A GNS3 VM server, or server running on your local machine
&lt;ul>
&lt;li>Check out &lt;a class="link" href="https://thequib.github.io/gns3-vm-in-proxmox-ve" >GNS3 in Proxmox VE&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GNS3 client on your local computer
&lt;ul>
&lt;li>Download the GNS3 Client from the &lt;a class="link" href="https://www.gns3.com/software/download" target="_blank" rel="noopener"
>official website&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="optional">Optional&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://learningnetworkstore.cisco.com/cisco-modeling-labs-personal/cisco-cml-personal" target="_blank" rel="noopener"
>Cisco Modeling Labs IOSv router/switch images&lt;/a>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="loading-gns3">Loading GNS3&lt;/h2>
&lt;p>Start by opening your GNS3 client. Here, a dialog shows to create a new project.&lt;/p>
&lt;ul>
&lt;li>If you are running the GNS3 server on your local machine, go ahead and create a new project, name it whatever you want&lt;/li>
&lt;li>If you are running the GNS3 server on a remote machine
&lt;ul>
&lt;li>Go to Edit &amp;gt; Preferences &amp;gt; Server&lt;/li>
&lt;li>Change &amp;lsquo;Host&amp;rsquo; to the IP address of your server&lt;/li>
&lt;li>Change the port to &amp;lsquo;80 TCP&amp;rsquo; (Or the port you have it set to if you&amp;rsquo;ve changed it)&lt;/li>
&lt;li>Fill out the &amp;lsquo;user&amp;rsquo; and &amp;lsquo;password&amp;rsquo; fields (Default user is &amp;lsquo;gns3&amp;rsquo; and password is &amp;lsquo;password&amp;rsquo;)&lt;/li>
&lt;li>Click &amp;lsquo;Apply&amp;rsquo; and close the preferences window&lt;/li>
&lt;li>Go to File &amp;gt; New blank project, name the new project whatever you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="installing-an-appliance">Installing an appliance&lt;/h2>
&lt;p>On the left hand side of the window, you will find a toolbar with the following icons:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems.png"
width="410"
height="60"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Sidebar Items"
class="gallery-image"
data-flex-grow="683"
data-flex-basis="1640px"
>&lt;/p>
&lt;p>From top to bottom, these items are &lt;em>Routers&lt;/em>, &lt;em>Switches&lt;/em>, &lt;em>End Devices&lt;/em>, &lt;em>Security Devices&lt;/em>, &lt;em>All Devices&lt;/em>, and &lt;em>Add a link&lt;/em>. These buttons contain what are called templates, templates are virtual devices that can be manipulated just as if they were the real deal.&lt;/p>
&lt;p>All of these are relatively self explanatory, the last &lt;em>&amp;ldquo;Add a link&amp;rdquo;&lt;/em> is for connecting devices together using a virtual network cable.&lt;/p>
&lt;p>To get started and testing things, go to &lt;em>End Devices&lt;/em> and click &amp;ldquo;+ New template&amp;rdquo;. You will want to install an appliance from the server, so click &amp;ldquo;Next &amp;gt;&amp;rdquo;, expand &amp;ldquo;Guests&amp;rdquo;, and scroll to find an appliance that interests you. I&amp;rsquo;ll be choosing the &amp;ldquo;Ubuntu Docker Guest&amp;rdquo; as docker containers start up in just a few seconds.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection.png"
width="855"
height="259"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Selection"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="792px"
>&lt;/p>
&lt;p>Once you have found the device you want, click &amp;ldquo;Install&amp;rdquo;, then &amp;ldquo;Next&amp;rdquo; to install on the main server, then &amp;ldquo;Finish&amp;rdquo;. Now, the appliance should be installed!&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="adding-devices-to-a-project">Adding devices to a project&lt;/h2>
&lt;p>Now, the newly installed appliance should show up under &lt;em>End Devices&lt;/em>. Click this, and drag the device into the blank space of the project. This will do some downloading work if you have just installed it, then add itself into the project.&lt;/p>
&lt;p>To use the device, you can either click the green play button at the top of the window (this would start all devices in the project), or you can right click an individual device, and click &amp;ldquo;Start&amp;rdquo;.&lt;/p>
&lt;p>You can confirm that the device has started by looking at the &amp;ldquo;Topology Summary&amp;rdquo; on the top right of the window. A green circle indicates that a device is online.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline.png"
width="395"
height="85"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Online"
class="gallery-image"
data-flex-grow="464"
data-flex-basis="1115px"
>&lt;/p>
&lt;p>To get console access to this docker guest, you can double click on the node, or right click and hit &amp;ldquo;console&amp;rdquo;. This, by default, will open the Solarwinds Solar-PuTTY application on your computer. You can interact with the device just as if it were a physical one.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>Keep in mind, each devices has its own configuration settings that you can mess with, as well as console types depending on if the device has a GUI or not (Such as between the Ubuntu Docker and Ubuntu Desktop guests). Some of these settings include amount of CPU cores, RAM, and type of console access you have to the device.&lt;/p>
&lt;p>Feel free to play around with these and figure some stuff out! The beauty of GNS3 is that you can do anything you want, and not have to worry about breaking anything of importance :)&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>And there you have it! Go ahead and play with the different end devices, as well as switching/routing appliances that exist. If you have the Cisco Modeling labs subscription, you are also able to import the IOSv images into GNS3, which will allow you to interact and play with Cisco IOS devices.&lt;/p></description></item></channel></rss>