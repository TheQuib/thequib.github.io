<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gns3 on QuibTech</title><link>https://thequib.github.io/tags/gns3/</link><description>Recent content in gns3 on QuibTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://thequib.github.io/tags/gns3/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with Network Automation</title><link>https://thequib.github.io/p/getting-started-with-network-automation/</link><pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-network-automation/</guid><description>&lt;p>Ever though about an easier way to configure tons of network devices easily? Python is definitely the answer to get started, and as long as you have a basic understanding of programming, it&amp;rsquo;s pretty simple, and tons of fun!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Python version 3.9 or higher&lt;/li>
&lt;li>An IDE that supports the Python language&lt;/li>
&lt;li>Some sort of appliance you can connect to via SSH
&lt;ul>
&lt;li>I will be using a Cisco IOS appliance here running in GNS3&lt;/li>
&lt;li>A Linux VM will also work&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In this post, I&amp;rsquo;ll be using Visual Studio Code as my IDE, you can download that &lt;a class="link" href="https://code.visualstudio.com/download" target="_blank" rel="noopener"
>here&lt;/a> if you are interested.&lt;/p>
&lt;p>You can find all of my &lt;a class="link" href="https://github.com/TheQuib/python-network-automation" target="_blank" rel="noopener"
>scripts&lt;/a>, and other projects on my &lt;a class="link" href="https://github.com/TheQuib" target="_blank" rel="noopener"
>GitHub page&lt;/a>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="before-you-start">Before you Start&lt;/h2>
&lt;p>&lt;em>&lt;strong>Note:&lt;/strong>&lt;/em> &lt;em>This is only if you are using Visual Studio Code as your IDE&lt;/em>&lt;/p>
&lt;p>VS Code gets a little funky when it comes to installed python libraries. First, make sure you install the latest version of Python from the Microsoft Store&amp;hellip; Code will look to the installation path of this by default.&lt;/p>
&lt;p>After installation:&lt;/p>
&lt;ol>
&lt;li>Open VS Code&lt;/li>
&lt;li>Open or create a Python file (use the extension &lt;em>.py&lt;/em> to tell Code to use Python)&lt;/li>
&lt;li>On the bottom-left of the window, click the Python version number, this should open a box at the top of the screen&lt;/li>
&lt;li>Select &amp;ldquo;&lt;em>Entire Workspace&lt;/em>&amp;rdquo;&lt;/li>
&lt;li>Choose the following option from the list:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter.png"
width="898"
height="70"
srcset="https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter_hua8be6abbf3a39391b195b18f2b73d718_10706_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-network-automation/selectInterpreter_hua8be6abbf3a39391b195b18f2b73d718_10706_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Select Python Interpreter"
class="gallery-image"
data-flex-grow="1282"
data-flex-basis="3078px"
>&lt;/p>
&lt;p>Now you should be all goood to go!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="installing-netmiko">Installing Netmiko&lt;/h2>
&lt;p>Netmiko is, in my opinion, the best all-in-one network automation tool to use in Python. Netmiko has a multitude of supported devices; including Linux, Cisco (IOS, NX-OS, etc), HP Enterprise, and TONS more.&lt;/p>
&lt;p>To install Netmiko on your computer, open a terminal and type:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python3 -m pip install netmiko
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, open your IDE and create a new Python file, enter the following code and run it to test installation:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you run this, and it doesn&amp;rsquo;t do anything, that&amp;rsquo;s good! This just means that the library imported with no problems.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="setting-up-netmiko">Setting up Netmiko&lt;/h2>
&lt;p>Network automation is all about doing the similar tasks on tons of devices from a single place. That doesn&amp;rsquo;t mean you have to have a hundred devices to do some automation work.&lt;/p>
&lt;p>In my case, I will be using the Cisco Modeling Labs IOSv router image (in GNS3), so my commands will be IOS specific. I&amp;rsquo;ll have some information down below so you can set up a Linux machine if you want as well :)&lt;/p>
&lt;p>First, we&amp;rsquo;ll need to import the ConnectHandler module from Netmiko:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># NEtwork automation module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">netmiko&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then let&amp;rsquo;s get some username and password information from the user:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Module used to hide passwords in the console&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for username&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a username to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for password using getpass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a password to connect with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Ask user for secret password&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">secret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getpass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getpass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Please enter a secret password to enable with:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now we&amp;rsquo;ll want to set up information that Netmiko will use for the actual connection. Type the following code and note the comments:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;ip address&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This code creates a Python dictionary that contains the items &lt;em>device_type&lt;/em>, &lt;em>host&lt;/em>, &lt;em>password&lt;/em>, &lt;em>secret&lt;/em>, and &lt;em>use_keys&lt;/em>, and then sets a variable to the string &lt;em>&amp;lsquo;ip address&amp;rsquo;&lt;/em>.&lt;/p>
&lt;p>Most of these are pretty self explanatory, &lt;em>use_keys&lt;/em> will bypass the prompt SSH gives back when connecting to an unknown device for the first time.&lt;/p>
&lt;p>If you wanted to try this on multiple devices, tweak your code to use a list for hosts and a for loop as such:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Defined host IP address, make sure this matches your machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">hosts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;1.2.3.4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="s1">&amp;#39;4.3.2.1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="ow">in&lt;/span>  &lt;span class="n">hosts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Configuration dictionary that netmiko will use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">hostConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;device_type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;cisco_ios&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#Used for exec priv commands if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;secret&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="c1">#Accept unknown SSH keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        &lt;span class="s1">&amp;#39;use_keys&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">#Command to be sent to the machine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;sh run&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="sending-your-first-command">Sending your first command&lt;/h2>
&lt;p>Now we&amp;rsquo;re ready to send a command to your device / devices! Let&amp;rsquo;s get started by creating a Netmiko &lt;code>ConnectHandler&lt;/code> variable by adding this line:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConnectHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">hostConfig&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, we can act on the variable &lt;em>ssh&lt;/em> to send commands to our device. Using &lt;em>send_command&lt;/em>, which is used specifically for sending a single command via Netmiko (this will utilize the &lt;em>command&lt;/em> variable we set in the previous step):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now go ahead and run your program! If you put everything in correctly, you should see the output of the Linux command &lt;code>ip addr&lt;/code> in your terminal.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="sending-multiple-commands">Sending multiple commands&lt;/h2>
&lt;p>Automation isn&amp;rsquo;t just about sending a single command to devices. While this can be pretty useful, especially for gathering some information (like switch configs), sending multiple commands can prove to be extremely useful and time-saving, especially when you&amp;rsquo;re configuring tons of devices.&lt;/p>
&lt;p>In the previous step, we used the function &lt;strong>send_command()&lt;/strong>, which only sends one command. For multiple configuration commands, there is a function called &lt;strong>send_config_set()&lt;/strong>, which accepts a list in its parameters.&lt;/p>
&lt;p>So first, let&amp;rsquo;s create a list:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;int gi0/1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ip address 172.16.0.1 255.255.0.0&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, instead of &lt;em>send_command()&lt;/em>, we can use the following to send our &lt;em>config&lt;/em> variable instead:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssh&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_config_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Getting Started with GNS3</title><link>https://thequib.github.io/p/getting-started-with-gns3/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/getting-started-with-gns3/</guid><description>&lt;p>When diving into learning networking, GNS3 is a great tool to get started. GNS3 allows you to build out and design networks without having to buy all of the expensive hardware to do so.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>A GNS3 VM server, or server running on your local machine
&lt;ul>
&lt;li>Check out &lt;a class="link" href="https://thequib.github.io/gns3-vm-in-proxmox-ve" >GNS3 in Proxmox VE&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GNS3 client on your local computer
&lt;ul>
&lt;li>Download the GNS3 Client from the &lt;a class="link" href="https://www.gns3.com/software/download" target="_blank" rel="noopener"
>official website&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="optional">Optional&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://learningnetworkstore.cisco.com/cisco-modeling-labs-personal/cisco-cml-personal" target="_blank" rel="noopener"
>Cisco Modeling Labs IOSv router/switch images&lt;/a>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="loading-gns3">Loading GNS3&lt;/h2>
&lt;p>Start by opening your GNS3 client. Here, a dialog shows to create a new project.&lt;/p>
&lt;ul>
&lt;li>If you are running the GNS3 server on your local machine, go ahead and create a new project, name it whatever you want&lt;/li>
&lt;li>If you are running the GNS3 server on a remote machine
&lt;ul>
&lt;li>Go to Edit &amp;gt; Preferences &amp;gt; Server&lt;/li>
&lt;li>Change &amp;lsquo;Host&amp;rsquo; to the IP address of your server&lt;/li>
&lt;li>Change the port to &amp;lsquo;80 TCP&amp;rsquo; (Or the port you have it set to if you&amp;rsquo;ve changed it)&lt;/li>
&lt;li>Fill out the &amp;lsquo;user&amp;rsquo; and &amp;lsquo;password&amp;rsquo; fields (Default user is &amp;lsquo;gns3&amp;rsquo; and password is &amp;lsquo;password&amp;rsquo;)&lt;/li>
&lt;li>Click &amp;lsquo;Apply&amp;rsquo; and close the preferences window&lt;/li>
&lt;li>Go to File &amp;gt; New blank project, name the new project whatever you want&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="installing-an-appliance">Installing an appliance&lt;/h2>
&lt;p>On the left hand side of the window, you will find a toolbar with the following icons:&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems.png"
width="410"
height="60"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-sidebarItems_hucffda01e01af67cd5907afd761ffd267_7563_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Sidebar Items"
class="gallery-image"
data-flex-grow="683"
data-flex-basis="1640px"
>&lt;/p>
&lt;p>From top to bottom, these items are &lt;em>Routers&lt;/em>, &lt;em>Switches&lt;/em>, &lt;em>End Devices&lt;/em>, &lt;em>Security Devices&lt;/em>, &lt;em>All Devices&lt;/em>, and &lt;em>Add a link&lt;/em>. These buttons contain what are called templates, templates are virtual devices that can be manipulated just as if they were the real deal.&lt;/p>
&lt;p>All of these are relatively self explanatory, the last &lt;em>&amp;ldquo;Add a link&amp;rdquo;&lt;/em> is for connecting devices together using a virtual network cable.&lt;/p>
&lt;p>To get started and testing things, go to &lt;em>End Devices&lt;/em> and click &amp;ldquo;+ New template&amp;rdquo;. You will want to install an appliance from the server, so click &amp;ldquo;Next &amp;gt;&amp;rdquo;, expand &amp;ldquo;Guests&amp;rdquo;, and scroll to find an appliance that interests you. I&amp;rsquo;ll be choosing the &amp;ldquo;Ubuntu Docker Guest&amp;rdquo; as docker containers start up in just a few seconds.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection.png"
width="855"
height="259"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceSelection_hu9ee5d7adef6fcf242a8fda80466466d2_21661_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Selection"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="792px"
>&lt;/p>
&lt;p>Once you have found the device you want, click &amp;ldquo;Install&amp;rdquo;, then &amp;ldquo;Next&amp;rdquo; to install on the main server, then &amp;ldquo;Finish&amp;rdquo;. Now, the appliance should be installed!&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="adding-devices-to-a-project">Adding devices to a project&lt;/h2>
&lt;p>Now, the newly installed appliance should show up under &lt;em>End Devices&lt;/em>. Click this, and drag the device into the blank space of the project. This will do some downloading work if you have just installed it, then add itself into the project.&lt;/p>
&lt;p>To use the device, you can either click the green play button at the top of the window (this would start all devices in the project), or you can right click an individual device, and click &amp;ldquo;Start&amp;rdquo;.&lt;/p>
&lt;p>You can confirm that the device has started by looking at the &amp;ldquo;Topology Summary&amp;rdquo; on the top right of the window. A green circle indicates that a device is online.&lt;/p>
&lt;p>&lt;img src="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline.png"
width="395"
height="85"
srcset="https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_480x0_resize_box_3.png 480w, https://thequib.github.io/p/getting-started-with-gns3/gns3-applianceOnline_huffc9884081bb913511336a2c8a4f2264_4615_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GNS3 - Appliance Online"
class="gallery-image"
data-flex-grow="464"
data-flex-basis="1115px"
>&lt;/p>
&lt;p>To get console access to this docker guest, you can double click on the node, or right click and hit &amp;ldquo;console&amp;rdquo;. This, by default, will open the Solarwinds Solar-PuTTY application on your computer. You can interact with the device just as if it were a physical one.&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>Keep in mind, each devices has its own configuration settings that you can mess with, as well as console types depending on if the device has a GUI or not (Such as between the Ubuntu Docker and Ubuntu Desktop guests). Some of these settings include amount of CPU cores, RAM, and type of console access you have to the device.&lt;/p>
&lt;p>Feel free to play around with these and figure some stuff out! The beauty of GNS3 is that you can do anything you want, and not have to worry about breaking anything of importance :)&lt;/p>
&lt;p> &lt;/p>
&lt;hr>
&lt;p> &lt;/p>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>And there you have it! Go ahead and play with the different end devices, as well as switching/routing appliances that exist. If you have the Cisco Modeling labs subscription, you are also able to import the IOSv images into GNS3, which will allow you to interact and play with Cisco IOS devices.&lt;/p></description></item><item><title>GNS3 VM in Proxmox VE</title><link>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><guid>https://thequib.github.io/p/gns3-vm-in-proxmox-ve/</guid><description>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/featuredImage.png" alt="Featured image of post GNS3 VM in Proxmox VE" />&lt;p>Do you use Proxmox VE as your main homelab hypervisor, and want to run the GNS3 VM on it? You&amp;rsquo;re in luck, below you can find steps on how to do just that as long as you meet a few server requirements.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Proxmox VE with 3-4&lt;/li>
&lt;li>A VM storage device that supports .qcow2 files&lt;/li>
&lt;li>Location of VM disks on your Proxmox Server&lt;/li>
&lt;li>FTP and Shell access to your Proxmox Server&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="download-the-ova-file">Download the .ova file&lt;/h2>
&lt;p>Head over to the GNS3 website and download the ESXi VM &lt;a class="link" href="https://gns3.com/software/download-vm" target="_blank" rel="noopener"
>https://gns3.com/software/download-vm&lt;/a>&lt;/p>
&lt;p>Keep in mind, this will ask you to create an account before you can download.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="upload-the-ova-file-to-your-server">Upload the .ova file to your server&lt;/h2>
&lt;p>Now you will need to get the downloaded file onto your Proxmox server&lt;/p>
&lt;ul>
&lt;li>Open your favorite FTP client on your computer. In my case, I&amp;rsquo;m using WinSCP to do this&lt;/li>
&lt;li>Connect to your Proxmox server using either its IP address or hostname&lt;/li>
&lt;li>On the left pane (your local machine), navigate to where the &lt;code>.ova&lt;/code> file is&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile.png"
width="488"
height="85"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile_hu52dbf2389f55907a4797863c40ffd1b2_4546_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winscp_localFile_hu52dbf2389f55907a4797863c40ffd1b2_4546_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Local OVA"
class="gallery-image"
data-flex-grow="574"
data-flex-basis="1377px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>On the right pane (the server), create a new directory, naming whatever you want&lt;/li>
&lt;li>I&amp;rsquo;ll be putting mine underthe &lt;code>/root&lt;/code> directory&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir.png"
width="522"
height="72"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir_hu2df7b9856d778360d197c4fec2391e01_4079_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_rootDir_hu2df7b9856d778360d197c4fec2391e01_4079_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Remote Directory"
class="gallery-image"
data-flex-grow="725"
data-flex-basis="1740px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>Now, drag the &lt;code>.ova&lt;/code> file from the left side to the right side, and you will see the upload begin&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload.png"
width="357"
height="201"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload_hud8dcb7040d4e35f6ee477344c55964e0_9760_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/winScp_upload_hud8dcb7040d4e35f6ee477344c55964e0_9760_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="File Upload"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="create-a-vm-in-proxmox">Create a VM in Proxmox&lt;/h2>
&lt;p>Now we&amp;rsquo;re going to want to create a VM in Proxmox that we will be adding hard disk to&lt;/p>
&lt;ul>
&lt;li>Create a VM by clicking &amp;ldquo;Create VM&amp;rdquo; on the top right&lt;/li>
&lt;li>Under &amp;ldquo;General&amp;rdquo;, you can use any ID starting from 100 that you like, take note of this. Name it whatever you would like&lt;/li>
&lt;li>Under &amp;ldquo;OS&amp;rdquo;, select the radio button to not use any media&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media.png"
width="331"
height="265"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media_hu22615d4374964dd954a424ec944c1a50_11932_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_media_hu22615d4374964dd954a424ec944c1a50_11932_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - Media"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;System&amp;rdquo;, select your preferred graphics card (I will be using the VirtIO option), and make sure &amp;ldquo;SeaBIOS&amp;rdquo; is selected&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system.png"
width="370"
height="203"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system_hu144e48e87e7615a05aa0bed7ee4c5ef0_9687_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_system_hu144e48e87e7615a05aa0bed7ee4c5ef0_9687_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - System"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Storage&amp;rdquo;, make sure SCSI is selected, and a qcow2 compatible storage device is selected&lt;/li>
&lt;li>Under CPU, give it at least 3 cores to run with, and make sure to select &amp;lsquo;host&amp;rsquo; for the type&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu.png"
width="700"
height="231"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu_hud110e020dfeeb55b5cb563aee5f24613_16409_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/createVm_cpu_hud110e020dfeeb55b5cb563aee5f24613_16409_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Create VM - CPU"
class="gallery-image"
data-flex-grow="303"
data-flex-basis="727px"
>&lt;/p>
&lt;ul>
&lt;li>Under &amp;ldquo;Memory&amp;rdquo;, give it at least 4096MB of RAM&lt;/li>
&lt;li>Set your preferred settings under &amp;ldquo;Network&amp;rdquo;, the default model will work just fine and should have the best performance&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="create-secondary-hard-disk">Create secondary hard disk&lt;/h2>
&lt;ul>
&lt;li>Navigate to the newly created VM&lt;/li>
&lt;li>Go to the &amp;ldquo;Hardware&amp;rdquo; tab&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add.png"
width="222"
height="142"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add_hu5728a90c7b8a6edcc3c64c33f0836e44_7121_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/hardware_add_hu5728a90c7b8a6edcc3c64c33f0836e44_7121_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="VM - Add Hardware"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;ul>
&lt;li>Select the same storage device that you chose when creating the VM&lt;/li>
&lt;li>Change the size to whatever you would like to make it&lt;/li>
&lt;li>Click the &amp;lsquo;Add&amp;rsquo; button at the bottom&lt;/li>
&lt;li>You should now have 2 hard disks in the machine, &amp;lsquo;scsi0&amp;rsquo; and &amp;lsquo;scsi1&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="extract-files-from-the-ova-file">Extract files from the .ova file&lt;/h2>
&lt;p>We will need to grab files that are packaged into the file downloaded from the GNS3 website. .ova files typically contain 2 main parts: VM Configuration settings (we just did this), and virtual hard disks (In the .vmdk format)&lt;/p>
&lt;ul>
&lt;li>First access the shell of the Proxmox server, this can be either over SSH, or using the shell tab in Proxmox&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell.png"
width="338"
height="131"
srcset="https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell_hu4ca0cf01b7ef3c90e0e860582e6030be_9278_480x0_resize_box_3.png 480w, https://thequib.github.io/p/gns3-vm-in-proxmox-ve/proxmoxHost_shell_hu4ca0cf01b7ef3c90e0e860582e6030be_9278_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Proxmox Shell"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="619px"
>&lt;/p>
&lt;ul>
&lt;li>Change your current directory to where you stored the .ova file earlier using the &amp;lsquo;cd&amp;rsquo; command. In my case, that would be:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /root/GNS2.2.20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Now, to extract the files using tar to the current directory, and list the new files&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">tar -xvf *.ova
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will show the new files in the current directory, these should be:
&lt;ul>
&lt;li>&lt;code>GNS3 VM-disk001.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM-disk002.vmdk&lt;/code>&lt;/li>
&lt;li>&lt;code>GNS3 VM.ovf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The 2 &lt;code>.vmdk&lt;/code> files are the virtual hard disks, and the &lt;code>.ovf&lt;/code> file is the VM configuration file&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="convert-vmdk-files-to-qcow2-qemu-files">Convert .vmdk files to .qcow2 qemu files&lt;/h2>
&lt;p>In order for Proxmox to properly use the hard disks we just snatched, we need to convert them to .qcow2 (qemu) hard disks&lt;/p>
&lt;ul>
&lt;li>Get that VM ID you set earlier when creating the VM, I used 501 in my case&lt;/li>
&lt;li>Convert each file, replacing vmid with your VM ID:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-vmid-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk001.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-0.qcow2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-img convert -f vmdk &lt;span class="s1">&amp;#39;GNS3 VM-disk002.vmdk&amp;#39;&lt;/span> -O qcow2 vm-501-disk-1.qcow2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="copy-the-newly-converted-qcow2-files">Copy the newly converted .qcow2 files&lt;/h2>
&lt;p>Now we can copy the files to the VM folder!&lt;/p>
&lt;ul>
&lt;li>Make sure you&amp;rsquo;re still in the same directory as the .qcow2 files&lt;/li>
&lt;li>Find the directory of the VM you will be copying the files to
&lt;ul>
&lt;li>In my case, my GNS3 VM is located at /mnt/pve/Proxmox-1-VM/images/501&lt;/li>
&lt;li>501 in this directory is my VM ID&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use the &lt;code>cp&lt;/code> command to copy the files to the vm directory&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-0.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-vmid-disk-1.qcow2 /directory/of/vm/vm-vmid/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here&amp;rsquo;s an example of what mine looked like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp vm-501-disk-0.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp vm-501-disk-1.qcow2 /mnt/pve/Proxmox1-VM-images-501/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="start-the-vm">Start the VM&lt;/h2>
&lt;p>Now you should be good to go! Try and start the VM, and head to the console tab. GNS3 should start to load, and you can begin creating your virtual networks!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="optional---install-qemu-guest-agent-on-gns3">Optional - Install qemu-guest-agent on GNS3&lt;/h2>
&lt;p>I know that when I have a VM in Proxmox, I like to get some quick information sometimes straight from the GUI&amp;hellip; such as the VM&amp;rsquo;s IP address. This is only possible if the qemu guest agent installed on the machine.&lt;/p>
&lt;p>Lucky for us, the GNS3 VM runs on Ubuntu, so this is pretty easy!&lt;/p>
&lt;ul>
&lt;li>Once GNS3 is loaded, go to the console tab, and press enter in the window to hit OK&lt;/li>
&lt;li>Arrow-down to the option &amp;ldquo;Shell&amp;rdquo; and hit enter&lt;/li>
&lt;li>In the shell, type the following commands:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install qemu-guest-agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start qemu-guest-agent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>This will update the repository, install the guest agent, and start the guest agent service&lt;/li>
&lt;li>Now, click the &amp;ldquo;Summary&amp;rdquo; tab of the VM in Proxmox, more information (such as the VM&amp;rsquo;s IP address) will now show right there!&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Note: If the guest agent information doesn&amp;rsquo;t show, try reloading the web page&lt;/em>&lt;/p></description></item></channel></rss>